
STM32F407VET6_Black_ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004490  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08004620  08004620  00014620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004df4  08004df4  00014df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08004df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          00000420  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004b0  200004b0  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001451d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003005  00000000  00000000  000345dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000766f  00000000  00000000  000375e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  0003ec58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001448  00000000  00000000  0003f780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005a13  00000000  00000000  00040bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004437  00000000  00000000  000465db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004aa12  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002384  00000000  00000000  0004aa90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004608 	.word	0x08004608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08004608 	.word	0x08004608

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 f89c 	bl	80006d4 <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f85e 	bl	800066c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000028 	.word	0x20000028
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f82f 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f001 fe24 	bl	800223c <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200001c4 	.word	0x200001c4
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200001c4 	.word	0x200001c4

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
 8000622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff6 	bl	8000614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf1c      	itt	ne
 800062c:	4b05      	ldrne	r3, [pc, #20]	; (8000644 <HAL_Delay+0x24>)
 800062e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000630:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000632:	bf18      	it	ne
 8000634:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000636:	f7ff ffed 	bl	8000614 <HAL_GetTick>
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	4284      	cmp	r4, r0
 800063e:	d8fa      	bhi.n	8000636 <HAL_Delay+0x16>
  {
  }
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800064a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	0200      	lsls	r0, r0, #8
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000662:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000664:	60d3      	str	r3, [r2, #12]
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	68dc      	ldr	r4, [r3, #12]
 8000672:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000676:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	2b04      	cmp	r3, #4
 800067e:	bf28      	it	cs
 8000680:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 0501 	mov.w	r5, #1
 8000688:	fa05 f303 	lsl.w	r3, r5, r3
 800068c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000690:	bf8c      	ite	hi
 8000692:	3c03      	subhi	r4, #3
 8000694:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000696:	4019      	ands	r1, r3
 8000698:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069a:	fa05 f404 	lsl.w	r4, r5, r4
 800069e:	3c01      	subs	r4, #1
 80006a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80006a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	ea42 0201 	orr.w	r2, r2, r1
 80006a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	bfad      	iteet	ge
 80006ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	f000 000f 	andlt.w	r0, r0, #15
 80006b6:	4b06      	ldrlt	r3, [pc, #24]	; (80006d0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfb5      	itete	lt
 80006be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000ed14 	.word	0xe000ed14

080006d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	3801      	subs	r0, #1
 80006d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006da:	d20a      	bcs.n	80006f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	21f0      	movs	r1, #240	; 0xf0
 80006e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000e010 	.word	0xe000e010
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000704:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000706:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000708:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80008b8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800070c:	4a68      	ldr	r2, [pc, #416]	; (80008b0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800070e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80008bc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000712:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000714:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000716:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000718:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800071a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800071e:	42ac      	cmp	r4, r5
 8000720:	f040 80b0 	bne.w	8000884 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000724:	684c      	ldr	r4, [r1, #4]
 8000726:	f024 0c10 	bic.w	ip, r4, #16
 800072a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800072e:	2e01      	cmp	r6, #1
 8000730:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000734:	d812      	bhi.n	800075c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000736:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000738:	2603      	movs	r6, #3
 800073a:	fa06 f60e 	lsl.w	r6, r6, lr
 800073e:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000742:	68ce      	ldr	r6, [r1, #12]
 8000744:	fa06 f60e 	lsl.w	r6, r6, lr
 8000748:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800074a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800074c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800074e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000752:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000756:	409e      	lsls	r6, r3
 8000758:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800075a:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800075c:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800075e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000760:	fa06 f60e 	lsl.w	r6, r6, lr
 8000764:	43f6      	mvns	r6, r6
 8000766:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800076a:	688f      	ldr	r7, [r1, #8]
 800076c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000770:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000774:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000778:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800077a:	d116      	bne.n	80007aa <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 800077c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000780:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000784:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000788:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800078c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000790:	f04f 0c0f 	mov.w	ip, #15
 8000794:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000798:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800079c:	690f      	ldr	r7, [r1, #16]
 800079e:	fa07 f70b 	lsl.w	r7, r7, fp
 80007a2:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007a6:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007aa:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ac:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ae:	f004 0703 	and.w	r7, r4, #3
 80007b2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007b6:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007ba:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007bc:	00e6      	lsls	r6, r4, #3
 80007be:	d561      	bpl.n	8000884 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c0:	f04f 0b00 	mov.w	fp, #0
 80007c4:	f8cd b00c 	str.w	fp, [sp, #12]
 80007c8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007cc:	4e39      	ldr	r6, [pc, #228]	; (80008b4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007d2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007d6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007da:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007de:	9703      	str	r7, [sp, #12]
 80007e0:	9f03      	ldr	r7, [sp, #12]
 80007e2:	f023 0703 	bic.w	r7, r3, #3
 80007e6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007ea:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007ee:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007f2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007f6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007fa:	f04f 0e0f 	mov.w	lr, #15
 80007fe:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000802:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000804:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000808:	d043      	beq.n	8000892 <HAL_GPIO_Init+0x192>
 800080a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800080e:	42b0      	cmp	r0, r6
 8000810:	d041      	beq.n	8000896 <HAL_GPIO_Init+0x196>
 8000812:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000816:	42b0      	cmp	r0, r6
 8000818:	d03f      	beq.n	800089a <HAL_GPIO_Init+0x19a>
 800081a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800081e:	42b0      	cmp	r0, r6
 8000820:	d03d      	beq.n	800089e <HAL_GPIO_Init+0x19e>
 8000822:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000826:	42b0      	cmp	r0, r6
 8000828:	d03b      	beq.n	80008a2 <HAL_GPIO_Init+0x1a2>
 800082a:	4548      	cmp	r0, r9
 800082c:	d03b      	beq.n	80008a6 <HAL_GPIO_Init+0x1a6>
 800082e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000832:	42b0      	cmp	r0, r6
 8000834:	d039      	beq.n	80008aa <HAL_GPIO_Init+0x1aa>
 8000836:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800083a:	42b0      	cmp	r0, r6
 800083c:	bf14      	ite	ne
 800083e:	2608      	movne	r6, #8
 8000840:	2607      	moveq	r6, #7
 8000842:	fa06 f60c 	lsl.w	r6, r6, ip
 8000846:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800084a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800084c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800084e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000850:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000854:	bf0c      	ite	eq
 8000856:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000858:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800085a:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800085c:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800085e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000862:	bf0c      	ite	eq
 8000864:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000866:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000868:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800086a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800086c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000870:	bf0c      	ite	eq
 8000872:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000874:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000876:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000878:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800087a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800087c:	bf54      	ite	pl
 800087e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000880:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000882:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000884:	3301      	adds	r3, #1
 8000886:	2b10      	cmp	r3, #16
 8000888:	f47f af45 	bne.w	8000716 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800088c:	b005      	add	sp, #20
 800088e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000892:	465e      	mov	r6, fp
 8000894:	e7d5      	b.n	8000842 <HAL_GPIO_Init+0x142>
 8000896:	2601      	movs	r6, #1
 8000898:	e7d3      	b.n	8000842 <HAL_GPIO_Init+0x142>
 800089a:	2602      	movs	r6, #2
 800089c:	e7d1      	b.n	8000842 <HAL_GPIO_Init+0x142>
 800089e:	2603      	movs	r6, #3
 80008a0:	e7cf      	b.n	8000842 <HAL_GPIO_Init+0x142>
 80008a2:	2604      	movs	r6, #4
 80008a4:	e7cd      	b.n	8000842 <HAL_GPIO_Init+0x142>
 80008a6:	2605      	movs	r6, #5
 80008a8:	e7cb      	b.n	8000842 <HAL_GPIO_Init+0x142>
 80008aa:	2606      	movs	r6, #6
 80008ac:	e7c9      	b.n	8000842 <HAL_GPIO_Init+0x142>
 80008ae:	bf00      	nop
 80008b0:	40013c00 	.word	0x40013c00
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40021400 	.word	0x40021400

080008c0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008c0:	6903      	ldr	r3, [r0, #16]
 80008c2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008c4:	bf14      	ite	ne
 80008c6:	2001      	movne	r0, #1
 80008c8:	2000      	moveq	r0, #0
 80008ca:	4770      	bx	lr

080008cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008cc:	b10a      	cbz	r2, 80008d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008ce:	6181      	str	r1, [r0, #24]
 80008d0:	4770      	bx	lr
 80008d2:	0409      	lsls	r1, r1, #16
 80008d4:	e7fb      	b.n	80008ce <HAL_GPIO_WritePin+0x2>

080008d6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80008d6:	6943      	ldr	r3, [r0, #20]
 80008d8:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80008dc:	bf08      	it	eq
 80008de:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80008e0:	6181      	str	r1, [r0, #24]
 80008e2:	4770      	bx	lr

080008e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008e8:	4604      	mov	r4, r0
 80008ea:	b908      	cbnz	r0, 80008f0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80008ec:	2001      	movs	r0, #1
 80008ee:	e03f      	b.n	8000970 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f0:	6803      	ldr	r3, [r0, #0]
 80008f2:	07dd      	lsls	r5, r3, #31
 80008f4:	d410      	bmi.n	8000918 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	0798      	lsls	r0, r3, #30
 80008fa:	d45a      	bmi.n	80009b2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	071a      	lsls	r2, r3, #28
 8000900:	f100 809c 	bmi.w	8000a3c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	075b      	lsls	r3, r3, #29
 8000908:	f100 80ba 	bmi.w	8000a80 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800090c:	69a0      	ldr	r0, [r4, #24]
 800090e:	2800      	cmp	r0, #0
 8000910:	f040 811b 	bne.w	8000b4a <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000914:	2000      	movs	r0, #0
 8000916:	e02b      	b.n	8000970 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000918:	4ba4      	ldr	r3, [pc, #656]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	f002 020c 	and.w	r2, r2, #12
 8000920:	2a04      	cmp	r2, #4
 8000922:	d007      	beq.n	8000934 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800092a:	2a08      	cmp	r2, #8
 800092c:	d10a      	bne.n	8000944 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	0259      	lsls	r1, r3, #9
 8000932:	d507      	bpl.n	8000944 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000934:	4b9d      	ldr	r3, [pc, #628]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	039a      	lsls	r2, r3, #14
 800093a:	d5dc      	bpl.n	80008f6 <HAL_RCC_OscConfig+0x12>
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1d9      	bne.n	80008f6 <HAL_RCC_OscConfig+0x12>
 8000942:	e7d3      	b.n	80008ec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000944:	6863      	ldr	r3, [r4, #4]
 8000946:	4d99      	ldr	r5, [pc, #612]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
 8000948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800094c:	d113      	bne.n	8000976 <HAL_RCC_OscConfig+0x92>
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000954:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000956:	f7ff fe5d 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095a:	4d94      	ldr	r5, [pc, #592]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800095c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	039b      	lsls	r3, r3, #14
 8000962:	d4c8      	bmi.n	80008f6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000964:	f7ff fe56 	bl	8000614 <HAL_GetTick>
 8000968:	1b80      	subs	r0, r0, r6
 800096a:	2864      	cmp	r0, #100	; 0x64
 800096c:	d9f7      	bls.n	800095e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800096e:	2003      	movs	r0, #3
}
 8000970:	b002      	add	sp, #8
 8000972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000976:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800097a:	d104      	bne.n	8000986 <HAL_RCC_OscConfig+0xa2>
 800097c:	682b      	ldr	r3, [r5, #0]
 800097e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000982:	602b      	str	r3, [r5, #0]
 8000984:	e7e3      	b.n	800094e <HAL_RCC_OscConfig+0x6a>
 8000986:	682a      	ldr	r2, [r5, #0]
 8000988:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800098c:	602a      	str	r2, [r5, #0]
 800098e:	682a      	ldr	r2, [r5, #0]
 8000990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000994:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1dd      	bne.n	8000956 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800099a:	f7ff fe3b 	bl	8000614 <HAL_GetTick>
 800099e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	039f      	lsls	r7, r3, #14
 80009a4:	d5a7      	bpl.n	80008f6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009a6:	f7ff fe35 	bl	8000614 <HAL_GetTick>
 80009aa:	1b80      	subs	r0, r0, r6
 80009ac:	2864      	cmp	r0, #100	; 0x64
 80009ae:	d9f7      	bls.n	80009a0 <HAL_RCC_OscConfig+0xbc>
 80009b0:	e7dd      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b2:	4b7e      	ldr	r3, [pc, #504]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	f012 0f0c 	tst.w	r2, #12
 80009ba:	d007      	beq.n	80009cc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009c2:	2a08      	cmp	r2, #8
 80009c4:	d111      	bne.n	80009ea <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	025e      	lsls	r6, r3, #9
 80009ca:	d40e      	bmi.n	80009ea <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009cc:	4b77      	ldr	r3, [pc, #476]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	0795      	lsls	r5, r2, #30
 80009d2:	d502      	bpl.n	80009da <HAL_RCC_OscConfig+0xf6>
 80009d4:	68e2      	ldr	r2, [r4, #12]
 80009d6:	2a01      	cmp	r2, #1
 80009d8:	d188      	bne.n	80008ec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	6921      	ldr	r1, [r4, #16]
 80009de:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009e2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e8:	e788      	b.n	80008fc <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009ea:	68e2      	ldr	r2, [r4, #12]
 80009ec:	4b70      	ldr	r3, [pc, #448]	; (8000bb0 <HAL_RCC_OscConfig+0x2cc>)
 80009ee:	b1b2      	cbz	r2, 8000a1e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f4:	f7ff fe0e 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f8:	4d6c      	ldr	r5, [pc, #432]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80009fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	0798      	lsls	r0, r3, #30
 8000a00:	d507      	bpl.n	8000a12 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	6922      	ldr	r2, [r4, #16]
 8000a06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a0e:	602b      	str	r3, [r5, #0]
 8000a10:	e774      	b.n	80008fc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a12:	f7ff fdff 	bl	8000614 <HAL_GetTick>
 8000a16:	1b80      	subs	r0, r0, r6
 8000a18:	2802      	cmp	r0, #2
 8000a1a:	d9ef      	bls.n	80009fc <HAL_RCC_OscConfig+0x118>
 8000a1c:	e7a7      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a20:	f7ff fdf8 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a24:	4d61      	ldr	r5, [pc, #388]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	0799      	lsls	r1, r3, #30
 8000a2c:	f57f af66 	bpl.w	80008fc <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a30:	f7ff fdf0 	bl	8000614 <HAL_GetTick>
 8000a34:	1b80      	subs	r0, r0, r6
 8000a36:	2802      	cmp	r0, #2
 8000a38:	d9f6      	bls.n	8000a28 <HAL_RCC_OscConfig+0x144>
 8000a3a:	e798      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a3c:	6962      	ldr	r2, [r4, #20]
 8000a3e:	4b5d      	ldr	r3, [pc, #372]	; (8000bb4 <HAL_RCC_OscConfig+0x2d0>)
 8000a40:	b17a      	cbz	r2, 8000a62 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a46:	f7ff fde5 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4a:	4d58      	ldr	r5, [pc, #352]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a4c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a50:	079f      	lsls	r7, r3, #30
 8000a52:	f53f af57 	bmi.w	8000904 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a56:	f7ff fddd 	bl	8000614 <HAL_GetTick>
 8000a5a:	1b80      	subs	r0, r0, r6
 8000a5c:	2802      	cmp	r0, #2
 8000a5e:	d9f6      	bls.n	8000a4e <HAL_RCC_OscConfig+0x16a>
 8000a60:	e785      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a64:	f7ff fdd6 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a68:	4d50      	ldr	r5, [pc, #320]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a6a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a6e:	0798      	lsls	r0, r3, #30
 8000a70:	f57f af48 	bpl.w	8000904 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a74:	f7ff fdce 	bl	8000614 <HAL_GetTick>
 8000a78:	1b80      	subs	r0, r0, r6
 8000a7a:	2802      	cmp	r0, #2
 8000a7c:	d9f6      	bls.n	8000a6c <HAL_RCC_OscConfig+0x188>
 8000a7e:	e776      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a80:	4b4a      	ldr	r3, [pc, #296]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
 8000a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a84:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a88:	d128      	bne.n	8000adc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	9201      	str	r2, [sp, #4]
 8000a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a92:	641a      	str	r2, [r3, #64]	; 0x40
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a9e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa0:	4d45      	ldr	r5, [pc, #276]	; (8000bb8 <HAL_RCC_OscConfig+0x2d4>)
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	05d9      	lsls	r1, r3, #23
 8000aa6:	d51b      	bpl.n	8000ae0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa8:	68a3      	ldr	r3, [r4, #8]
 8000aaa:	4d40      	ldr	r5, [pc, #256]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d127      	bne.n	8000b00 <HAL_RCC_OscConfig+0x21c>
 8000ab0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ab8:	f7ff fdac 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000abc:	4d3b      	ldr	r5, [pc, #236]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000abe:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ac4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ac6:	079b      	lsls	r3, r3, #30
 8000ac8:	d539      	bpl.n	8000b3e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	f43f af1e 	beq.w	800090c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad0:	4a36      	ldr	r2, [pc, #216]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
 8000ad2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	e717      	b.n	800090c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000adc:	2600      	movs	r6, #0
 8000ade:	e7df      	b.n	8000aa0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae0:	682b      	ldr	r3, [r5, #0]
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fd94 	bl	8000614 <HAL_GetTick>
 8000aec:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	05da      	lsls	r2, r3, #23
 8000af2:	d4d9      	bmi.n	8000aa8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000af4:	f7ff fd8e 	bl	8000614 <HAL_GetTick>
 8000af8:	1bc0      	subs	r0, r0, r7
 8000afa:	2802      	cmp	r0, #2
 8000afc:	d9f7      	bls.n	8000aee <HAL_RCC_OscConfig+0x20a>
 8000afe:	e736      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b00:	2b05      	cmp	r3, #5
 8000b02:	d104      	bne.n	8000b0e <HAL_RCC_OscConfig+0x22a>
 8000b04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	672b      	str	r3, [r5, #112]	; 0x70
 8000b0c:	e7d0      	b.n	8000ab0 <HAL_RCC_OscConfig+0x1cc>
 8000b0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b10:	f022 0201 	bic.w	r2, r2, #1
 8000b14:	672a      	str	r2, [r5, #112]	; 0x70
 8000b16:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b18:	f022 0204 	bic.w	r2, r2, #4
 8000b1c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1ca      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b22:	f7ff fd77 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b26:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b2a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b2e:	0798      	lsls	r0, r3, #30
 8000b30:	d5cb      	bpl.n	8000aca <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fd6f 	bl	8000614 <HAL_GetTick>
 8000b36:	1bc0      	subs	r0, r0, r7
 8000b38:	4540      	cmp	r0, r8
 8000b3a:	d9f7      	bls.n	8000b2c <HAL_RCC_OscConfig+0x248>
 8000b3c:	e717      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fd69 	bl	8000614 <HAL_GetTick>
 8000b42:	1bc0      	subs	r0, r0, r7
 8000b44:	4540      	cmp	r0, r8
 8000b46:	d9bd      	bls.n	8000ac4 <HAL_RCC_OscConfig+0x1e0>
 8000b48:	e711      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b4a:	4d18      	ldr	r5, [pc, #96]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
 8000b4c:	68ab      	ldr	r3, [r5, #8]
 8000b4e:	f003 030c 	and.w	r3, r3, #12
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	d047      	beq.n	8000be6 <HAL_RCC_OscConfig+0x302>
 8000b56:	4e19      	ldr	r6, [pc, #100]	; (8000bbc <HAL_RCC_OscConfig+0x2d8>)
 8000b58:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b5a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b5c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b5e:	d135      	bne.n	8000bcc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b60:	f7ff fd58 	bl	8000614 <HAL_GetTick>
 8000b64:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	0199      	lsls	r1, r3, #6
 8000b6a:	d429      	bmi.n	8000bc0 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b6c:	6a22      	ldr	r2, [r4, #32]
 8000b6e:	69e3      	ldr	r3, [r4, #28]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b74:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b80:	4c0a      	ldr	r4, [pc, #40]	; (8000bac <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b82:	0852      	lsrs	r2, r2, #1
 8000b84:	3a01      	subs	r2, #1
 8000b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b8a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b90:	f7ff fd40 	bl	8000614 <HAL_GetTick>
 8000b94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	019a      	lsls	r2, r3, #6
 8000b9a:	f53f aebb 	bmi.w	8000914 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9e:	f7ff fd39 	bl	8000614 <HAL_GetTick>
 8000ba2:	1b40      	subs	r0, r0, r5
 8000ba4:	2802      	cmp	r0, #2
 8000ba6:	d9f6      	bls.n	8000b96 <HAL_RCC_OscConfig+0x2b2>
 8000ba8:	e6e1      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	42470000 	.word	0x42470000
 8000bb4:	42470e80 	.word	0x42470e80
 8000bb8:	40007000 	.word	0x40007000
 8000bbc:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc0:	f7ff fd28 	bl	8000614 <HAL_GetTick>
 8000bc4:	1bc0      	subs	r0, r0, r7
 8000bc6:	2802      	cmp	r0, #2
 8000bc8:	d9cd      	bls.n	8000b66 <HAL_RCC_OscConfig+0x282>
 8000bca:	e6d0      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fd22 	bl	8000614 <HAL_GetTick>
 8000bd0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bd2:	682b      	ldr	r3, [r5, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	f57f ae9d 	bpl.w	8000914 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bda:	f7ff fd1b 	bl	8000614 <HAL_GetTick>
 8000bde:	1b00      	subs	r0, r0, r4
 8000be0:	2802      	cmp	r0, #2
 8000be2:	d9f6      	bls.n	8000bd2 <HAL_RCC_OscConfig+0x2ee>
 8000be4:	e6c3      	b.n	800096e <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000be6:	2801      	cmp	r0, #1
 8000be8:	f43f aec2 	beq.w	8000970 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000bec:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bee:	69e3      	ldr	r3, [r4, #28]
 8000bf0:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f47f ae79 	bne.w	80008ec <HAL_RCC_OscConfig+0x8>
 8000bfa:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000bfc:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c00:	4293      	cmp	r3, r2
 8000c02:	f47f ae73 	bne.w	80008ec <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c0c:	4003      	ands	r3, r0
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	f47f ae6c 	bne.w	80008ec <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c16:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	f47f ae66 	bne.w	80008ec <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c22:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c26:	1ac0      	subs	r0, r0, r3
 8000c28:	bf18      	it	ne
 8000c2a:	2001      	movne	r0, #1
 8000c2c:	e6a0      	b.n	8000970 <HAL_RCC_OscConfig+0x8c>
 8000c2e:	bf00      	nop

08000c30 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c30:	4913      	ldr	r1, [pc, #76]	; (8000c80 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c32:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c34:	688b      	ldr	r3, [r1, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	d003      	beq.n	8000c46 <HAL_RCC_GetSysClockFreq+0x16>
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d003      	beq.n	8000c4a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c42:	4810      	ldr	r0, [pc, #64]	; (8000c84 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c44:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c46:	4810      	ldr	r0, [pc, #64]	; (8000c88 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c48:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c4a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c4c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c50:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c54:	bf14      	ite	ne
 8000c56:	480c      	ldrne	r0, [pc, #48]	; (8000c88 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c58:	480a      	ldreq	r0, [pc, #40]	; (8000c84 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c5a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c5e:	bf18      	it	ne
 8000c60:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c62:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c66:	fba1 0100 	umull	r0, r1, r1, r0
 8000c6a:	f7ff fb01 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c76:	3301      	adds	r3, #1
 8000c78:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c7e:	bd08      	pop	{r3, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	00f42400 	.word	0x00f42400
 8000c88:	017d7840 	.word	0x017d7840

08000c8c <HAL_RCC_ClockConfig>:
{
 8000c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c90:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c92:	4604      	mov	r4, r0
 8000c94:	b910      	cbnz	r0, 8000c9c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c96:	2001      	movs	r0, #1
 8000c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c9c:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <HAL_RCC_ClockConfig+0x124>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	f002 020f 	and.w	r2, r2, #15
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	d329      	bcc.n	8000cfc <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca8:	6821      	ldr	r1, [r4, #0]
 8000caa:	078f      	lsls	r7, r1, #30
 8000cac:	d42e      	bmi.n	8000d0c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cae:	07c8      	lsls	r0, r1, #31
 8000cb0:	d441      	bmi.n	8000d36 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <HAL_RCC_ClockConfig+0x124>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	f002 020f 	and.w	r2, r2, #15
 8000cba:	4295      	cmp	r5, r2
 8000cbc:	d367      	bcc.n	8000d8e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	0751      	lsls	r1, r2, #29
 8000cc2:	d46d      	bmi.n	8000da0 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc4:	0713      	lsls	r3, r2, #28
 8000cc6:	d507      	bpl.n	8000cd8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cc8:	4a3a      	ldr	r2, [pc, #232]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000cca:	6921      	ldr	r1, [r4, #16]
 8000ccc:	6893      	ldr	r3, [r2, #8]
 8000cce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cd6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cd8:	f7ff ffaa 	bl	8000c30 <HAL_RCC_GetSysClockFreq>
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000cde:	4a36      	ldr	r2, [pc, #216]	; (8000db8 <HAL_RCC_ClockConfig+0x12c>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	40d8      	lsrs	r0, r3
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <HAL_RCC_ClockConfig+0x130>)
 8000cec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_RCC_ClockConfig+0x134>)
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	f7ff fc45 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfc:	b2ca      	uxtb	r2, r1
 8000cfe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	4299      	cmp	r1, r3
 8000d08:	d1c5      	bne.n	8000c96 <HAL_RCC_ClockConfig+0xa>
 8000d0a:	e7cd      	b.n	8000ca8 <HAL_RCC_ClockConfig+0x1c>
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d0e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d12:	bf1e      	ittt	ne
 8000d14:	689a      	ldrne	r2, [r3, #8]
 8000d16:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d1a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d1c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d1e:	bf42      	ittt	mi
 8000d20:	689a      	ldrmi	r2, [r3, #8]
 8000d22:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d26:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	68a0      	ldr	r0, [r4, #8]
 8000d2c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d30:	4302      	orrs	r2, r0
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	e7bb      	b.n	8000cae <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d36:	6862      	ldr	r2, [r4, #4]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000d3a:	2a01      	cmp	r2, #1
 8000d3c:	d11d      	bne.n	8000d7a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	d0a7      	beq.n	8000c96 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d46:	4e1b      	ldr	r6, [pc, #108]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000d48:	68b3      	ldr	r3, [r6, #8]
 8000d4a:	f023 0303 	bic.w	r3, r3, #3
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d52:	f7ff fc5f 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d56:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d5a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5c:	68b3      	ldr	r3, [r6, #8]
 8000d5e:	6862      	ldr	r2, [r4, #4]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d68:	d0a3      	beq.n	8000cb2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d6a:	f7ff fc53 	bl	8000614 <HAL_GetTick>
 8000d6e:	1bc0      	subs	r0, r0, r7
 8000d70:	4540      	cmp	r0, r8
 8000d72:	d9f3      	bls.n	8000d5c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d74:	2003      	movs	r0, #3
}
 8000d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d7a:	1e91      	subs	r1, r2, #2
 8000d7c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d7e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d80:	d802      	bhi.n	8000d88 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d86:	e7dd      	b.n	8000d44 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d88:	f013 0f02 	tst.w	r3, #2
 8000d8c:	e7da      	b.n	8000d44 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d8e:	b2ea      	uxtb	r2, r5
 8000d90:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 030f 	and.w	r3, r3, #15
 8000d98:	429d      	cmp	r5, r3
 8000d9a:	f47f af7c 	bne.w	8000c96 <HAL_RCC_ClockConfig+0xa>
 8000d9e:	e78e      	b.n	8000cbe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000da0:	4904      	ldr	r1, [pc, #16]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000da2:	68e0      	ldr	r0, [r4, #12]
 8000da4:	688b      	ldr	r3, [r1, #8]
 8000da6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000daa:	4303      	orrs	r3, r0
 8000dac:	608b      	str	r3, [r1, #8]
 8000dae:	e789      	b.n	8000cc4 <HAL_RCC_ClockConfig+0x38>
 8000db0:	40023c00 	.word	0x40023c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	08004aa9 	.word	0x08004aa9
 8000dbc:	20000028 	.word	0x20000028
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8000dc4:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	b190      	cbz	r0, 8000df0 <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8000dca:	7943      	ldrb	r3, [r0, #5]
 8000dcc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dd0:	b913      	cbnz	r3, 8000dd8 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8000dd2:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8000dd4:	f001 fa4e 	bl	8002274 <HAL_RNG_MspInit>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8000dd8:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8000dde:	6813      	ldr	r3, [r2, #0]
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8000de6:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8000de8:	2301      	movs	r3, #1
 8000dea:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8000dec:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
 8000dee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000df0:	2001      	movs	r0, #1
}
 8000df2:	bd10      	pop	{r4, pc}

08000df4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8000df6:	7903      	ldrb	r3, [r0, #4]
 8000df8:	2b01      	cmp	r3, #1
{
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	460e      	mov	r6, r1
  __HAL_LOCK(hrng);
 8000dfe:	d025      	beq.n	8000e4c <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8000e00:	7963      	ldrb	r3, [r4, #5]
  __HAL_LOCK(hrng);
 8000e02:	2001      	movs	r0, #1
  if (hrng->State == HAL_RNG_STATE_READY)
 8000e04:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng);
 8000e06:	7120      	strb	r0, [r4, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 8000e08:	d11d      	bne.n	8000e46 <HAL_RNG_GenerateRandomNumber+0x52>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e0e:	f7ff fc01 	bl	8000614 <HAL_GetTick>
 8000e12:	4607      	mov	r7, r0

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8000e14:	6822      	ldr	r2, [r4, #0]
 8000e16:	6855      	ldr	r5, [r2, #4]
 8000e18:	f015 0501 	ands.w	r5, r5, #1
 8000e1c:	d008      	beq.n	8000e30 <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_ERROR;
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8000e1e:	6893      	ldr	r3, [r2, #8]
 8000e20:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8000e22:	6033      	str	r3, [r6, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8000e24:	2301      	movs	r3, #1
 8000e26:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000e28:	2000      	movs	r0, #0
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	7123      	strb	r3, [r4, #4]
 8000e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8000e30:	f7ff fbf0 	bl	8000614 <HAL_GetTick>
 8000e34:	1bc0      	subs	r0, r0, r7
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9ec      	bls.n	8000e14 <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_READY;
 8000e3a:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8000e3c:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 8000e3e:	7160      	strb	r0, [r4, #5]
        __HAL_UNLOCK(hrng);
 8000e40:	7125      	strb	r5, [r4, #4]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8000e42:	60a3      	str	r3, [r4, #8]
 8000e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8000e46:	2304      	movs	r3, #4
 8000e48:	60a3      	str	r3, [r4, #8]
 8000e4a:	e7ee      	b.n	8000e2a <HAL_RNG_GenerateRandomNumber+0x36>
  __HAL_LOCK(hrng);
 8000e4c:	2002      	movs	r0, #2

  return status;
}
 8000e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e50 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e52:	4604      	mov	r4, r0
 8000e54:	460e      	mov	r6, r1
 8000e56:	4615      	mov	r5, r2
 8000e58:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000e5a:	6821      	ldr	r1, [r4, #0]
 8000e5c:	688a      	ldr	r2, [r1, #8]
 8000e5e:	ea36 0302 	bics.w	r3, r6, r2
 8000e62:	d001      	beq.n	8000e68 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000e64:	2000      	movs	r0, #0
}
 8000e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e68:	1c6b      	adds	r3, r5, #1
 8000e6a:	d0f7      	beq.n	8000e5c <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000e6c:	f7ff fbd2 	bl	8000614 <HAL_GetTick>
 8000e70:	1bc0      	subs	r0, r0, r7
 8000e72:	4285      	cmp	r5, r0
 8000e74:	d8f1      	bhi.n	8000e5a <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e7e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e80:	6862      	ldr	r2, [r4, #4]
 8000e82:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000e86:	d10a      	bne.n	8000e9e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000e88:	68a2      	ldr	r2, [r4, #8]
 8000e8a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e8e:	d002      	beq.n	8000e96 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e94:	d103      	bne.n	8000e9e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e9c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ea0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ea4:	d107      	bne.n	8000eb6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000eb4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ec8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000eca:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000ecc:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <SPI_EndRxTxTransaction+0x54>)
 8000ece:	4e14      	ldr	r6, [pc, #80]	; (8000f20 <SPI_EndRxTxTransaction+0x58>)
 8000ed0:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000ed2:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000ed4:	fbb5 f6f6 	udiv	r6, r5, r6
 8000ed8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000edc:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000ede:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000ee2:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000ee4:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000ee6:	d10d      	bne.n	8000f04 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ee8:	460a      	mov	r2, r1
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	f7ff ffb0 	bl	8000e50 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000ef0:	b910      	cbnz	r0, 8000ef8 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000ef2:	2000      	movs	r0, #0
}
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ef8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000efa:	f043 0320 	orr.w	r3, r3, #32
 8000efe:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000f00:	2003      	movs	r0, #3
 8000f02:	e7f7      	b.n	8000ef4 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000f04:	9b01      	ldr	r3, [sp, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f3      	beq.n	8000ef2 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000f0a:	9b01      	ldr	r3, [sp, #4]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	061b      	lsls	r3, r3, #24
 8000f16:	d4f5      	bmi.n	8000f04 <SPI_EndRxTxTransaction+0x3c>
 8000f18:	e7eb      	b.n	8000ef2 <SPI_EndRxTxTransaction+0x2a>
 8000f1a:	bf00      	nop
 8000f1c:	20000028 	.word	0x20000028
 8000f20:	016e3600 	.word	0x016e3600

08000f24 <HAL_SPI_Init>:
{
 8000f24:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000f26:	4604      	mov	r4, r0
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d036      	beq.n	8000f9a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f30:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f38:	b91b      	cbnz	r3, 8000f42 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000f3a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000f3e:	f001 f9b1 	bl	80022a4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000f42:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f44:	68a0      	ldr	r0, [r4, #8]
 8000f46:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000f4e:	680b      	ldr	r3, [r1, #0]
 8000f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f54:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f56:	6863      	ldr	r3, [r4, #4]
 8000f58:	4303      	orrs	r3, r0
 8000f5a:	68e0      	ldr	r0, [r4, #12]
 8000f5c:	4303      	orrs	r3, r0
 8000f5e:	6920      	ldr	r0, [r4, #16]
 8000f60:	4303      	orrs	r3, r0
 8000f62:	6960      	ldr	r0, [r4, #20]
 8000f64:	4303      	orrs	r3, r0
 8000f66:	69e0      	ldr	r0, [r4, #28]
 8000f68:	4303      	orrs	r3, r0
 8000f6a:	6a20      	ldr	r0, [r4, #32]
 8000f6c:	4303      	orrs	r3, r0
 8000f6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f70:	4303      	orrs	r3, r0
 8000f72:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000f76:	4303      	orrs	r3, r0
 8000f78:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f7a:	0c12      	lsrs	r2, r2, #16
 8000f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f7e:	f002 0204 	and.w	r2, r2, #4
 8000f82:	431a      	orrs	r2, r3
 8000f84:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f86:	69cb      	ldr	r3, [r1, #28]
 8000f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f8c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f8e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f90:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f92:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f94:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f98:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f9a:	2001      	movs	r0, #1
}
 8000f9c:	bd10      	pop	{r4, pc}

08000f9e <HAL_SPI_Transmit>:
{
 8000f9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000fa2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000fa4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000fa8:	2b01      	cmp	r3, #1
{
 8000faa:	4604      	mov	r4, r0
 8000fac:	460d      	mov	r5, r1
 8000fae:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000fb0:	f000 809b 	beq.w	80010ea <HAL_SPI_Transmit+0x14c>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000fba:	f7ff fb2b 	bl	8000614 <HAL_GetTick>
 8000fbe:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000fc0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000fc4:	b2c0      	uxtb	r0, r0
 8000fc6:	2801      	cmp	r0, #1
 8000fc8:	f040 808d 	bne.w	80010e6 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8000fcc:	2d00      	cmp	r5, #0
 8000fce:	d05d      	beq.n	800108c <HAL_SPI_Transmit+0xee>
 8000fd0:	f1b8 0f00 	cmp.w	r8, #0
 8000fd4:	d05a      	beq.n	800108c <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fdc:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fde:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fe0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000fe2:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000fe4:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000fe8:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000fea:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000fec:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000fee:	6420      	str	r0, [r4, #64]	; 0x40
 8000ff0:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000ff2:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000ff8:	bf08      	it	eq
 8000ffa:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8000ffc:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001000:	bf04      	itt	eq
 8001002:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001006:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001008:	6803      	ldr	r3, [r0, #0]
 800100a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800100c:	bf5e      	ittt	pl
 800100e:	6803      	ldrpl	r3, [r0, #0]
 8001010:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001014:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001016:	68e3      	ldr	r3, [r4, #12]
 8001018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800101c:	6863      	ldr	r3, [r4, #4]
 800101e:	d13e      	bne.n	800109e <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001020:	b113      	cbz	r3, 8001028 <HAL_SPI_Transmit+0x8a>
 8001022:	f1b8 0f01 	cmp.w	r8, #1
 8001026:	d107      	bne.n	8001038 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001028:	f835 3b02 	ldrh.w	r3, [r5], #2
 800102c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800102e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001030:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001032:	3b01      	subs	r3, #1
 8001034:	b29b      	uxth	r3, r3
 8001036:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001038:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800103a:	b29b      	uxth	r3, r3
 800103c:	b9a3      	cbnz	r3, 8001068 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800103e:	463a      	mov	r2, r7
 8001040:	4631      	mov	r1, r6
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff ff40 	bl	8000ec8 <SPI_EndRxTxTransaction>
 8001048:	2800      	cmp	r0, #0
 800104a:	d149      	bne.n	80010e0 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800104c:	68a3      	ldr	r3, [r4, #8]
 800104e:	b933      	cbnz	r3, 800105e <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	9201      	str	r2, [sp, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800105e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001060:	3000      	adds	r0, #0
 8001062:	bf18      	it	ne
 8001064:	2001      	movne	r0, #1
 8001066:	e011      	b.n	800108c <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	6893      	ldr	r3, [r2, #8]
 800106c:	0798      	lsls	r0, r3, #30
 800106e:	d505      	bpl.n	800107c <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001070:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001072:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001076:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001078:	6323      	str	r3, [r4, #48]	; 0x30
 800107a:	e7d9      	b.n	8001030 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800107c:	f7ff faca 	bl	8000614 <HAL_GetTick>
 8001080:	1bc0      	subs	r0, r0, r7
 8001082:	42b0      	cmp	r0, r6
 8001084:	d3d8      	bcc.n	8001038 <HAL_SPI_Transmit+0x9a>
 8001086:	1c71      	adds	r1, r6, #1
 8001088:	d0d6      	beq.n	8001038 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 800108a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800108c:	2301      	movs	r3, #1
 800108e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001092:	2300      	movs	r3, #0
 8001094:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001098:	b002      	add	sp, #8
 800109a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800109e:	b113      	cbz	r3, 80010a6 <HAL_SPI_Transmit+0x108>
 80010a0:	f1b8 0f01 	cmp.w	r8, #1
 80010a4:	d108      	bne.n	80010b8 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80010a6:	782b      	ldrb	r3, [r5, #0]
 80010a8:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80010aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010ac:	3301      	adds	r3, #1
 80010ae:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80010b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010b2:	3b01      	subs	r3, #1
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80010b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0be      	beq.n	800103e <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	0792      	lsls	r2, r2, #30
 80010c6:	d503      	bpl.n	80010d0 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80010c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010ca:	7812      	ldrb	r2, [r2, #0]
 80010cc:	731a      	strb	r2, [r3, #12]
 80010ce:	e7ec      	b.n	80010aa <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80010d0:	f7ff faa0 	bl	8000614 <HAL_GetTick>
 80010d4:	1bc0      	subs	r0, r0, r7
 80010d6:	4286      	cmp	r6, r0
 80010d8:	d8ee      	bhi.n	80010b8 <HAL_SPI_Transmit+0x11a>
 80010da:	1c73      	adds	r3, r6, #1
 80010dc:	d0ec      	beq.n	80010b8 <HAL_SPI_Transmit+0x11a>
 80010de:	e7d4      	b.n	800108a <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010e0:	2320      	movs	r3, #32
 80010e2:	6563      	str	r3, [r4, #84]	; 0x54
 80010e4:	e7b2      	b.n	800104c <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 80010e6:	2002      	movs	r0, #2
 80010e8:	e7d0      	b.n	800108c <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 80010ea:	2002      	movs	r0, #2
 80010ec:	e7d4      	b.n	8001098 <HAL_SPI_Transmit+0xfa>

080010ee <HAL_SPI_TransmitReceive>:
{
 80010ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80010f2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80010f4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80010f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80010fa:	2b01      	cmp	r3, #1
{
 80010fc:	4604      	mov	r4, r0
 80010fe:	460d      	mov	r5, r1
 8001100:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001102:	f000 80e2 	beq.w	80012ca <HAL_SPI_TransmitReceive+0x1dc>
 8001106:	2301      	movs	r3, #1
 8001108:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800110c:	f7ff fa82 	bl	8000614 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001110:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001114:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001116:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001118:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800111a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800111c:	d00a      	beq.n	8001134 <HAL_SPI_TransmitReceive+0x46>
 800111e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001122:	f040 80d0 	bne.w	80012c6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001126:	68a0      	ldr	r0, [r4, #8]
 8001128:	2800      	cmp	r0, #0
 800112a:	f040 80cc 	bne.w	80012c6 <HAL_SPI_TransmitReceive+0x1d8>
 800112e:	2b04      	cmp	r3, #4
 8001130:	f040 80c9 	bne.w	80012c6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001134:	2d00      	cmp	r5, #0
 8001136:	f000 80c4 	beq.w	80012c2 <HAL_SPI_TransmitReceive+0x1d4>
 800113a:	f1b9 0f00 	cmp.w	r9, #0
 800113e:	f000 80c0 	beq.w	80012c2 <HAL_SPI_TransmitReceive+0x1d4>
 8001142:	2e00      	cmp	r6, #0
 8001144:	f000 80bd 	beq.w	80012c2 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001148:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800114c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001150:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001152:	bf1c      	itt	ne
 8001154:	2305      	movne	r3, #5
 8001156:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800115a:	2300      	movs	r3, #0
 800115c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800115e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001160:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001162:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001164:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001166:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001168:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800116a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800116c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800116e:	bf58      	it	pl
 8001170:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001172:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001174:	bf58      	it	pl
 8001176:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800117a:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800117c:	bf58      	it	pl
 800117e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001180:	68e2      	ldr	r2, [r4, #12]
 8001182:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001186:	d158      	bne.n	800123a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001188:	b109      	cbz	r1, 800118e <HAL_SPI_TransmitReceive+0xa0>
 800118a:	2e01      	cmp	r6, #1
 800118c:	d107      	bne.n	800119e <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800118e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001192:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001194:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001196:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001198:	3b01      	subs	r3, #1
 800119a:	b29b      	uxth	r3, r3
 800119c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800119e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80011a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b9ab      	cbnz	r3, 80011d2 <HAL_SPI_TransmitReceive+0xe4>
 80011a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b993      	cbnz	r3, 80011d2 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80011ac:	4642      	mov	r2, r8
 80011ae:	4639      	mov	r1, r7
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff fe89 	bl	8000ec8 <SPI_EndRxTxTransaction>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	f040 8081 	bne.w	80012be <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011bc:	68a3      	ldr	r3, [r4, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d132      	bne.n	8001228 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	9001      	str	r0, [sp, #4]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	9201      	str	r2, [sp, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	9b01      	ldr	r3, [sp, #4]
 80011d0:	e02a      	b.n	8001228 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80011d2:	6822      	ldr	r2, [r4, #0]
 80011d4:	6893      	ldr	r3, [r2, #8]
 80011d6:	0799      	lsls	r1, r3, #30
 80011d8:	d50d      	bpl.n	80011f6 <HAL_SPI_TransmitReceive+0x108>
 80011da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b153      	cbz	r3, 80011f6 <HAL_SPI_TransmitReceive+0x108>
 80011e0:	b14d      	cbz	r5, 80011f6 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80011e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011e4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80011e8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80011ea:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80011ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80011f4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80011f6:	6893      	ldr	r3, [r2, #8]
 80011f8:	07db      	lsls	r3, r3, #31
 80011fa:	d50c      	bpl.n	8001216 <HAL_SPI_TransmitReceive+0x128>
 80011fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b14b      	cbz	r3, 8001216 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001204:	68d2      	ldr	r2, [r2, #12]
 8001206:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800120a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800120c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800120e:	3b01      	subs	r3, #1
 8001210:	b29b      	uxth	r3, r3
 8001212:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001214:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001216:	f7ff f9fd 	bl	8000614 <HAL_GetTick>
 800121a:	eba0 0008 	sub.w	r0, r0, r8
 800121e:	4287      	cmp	r7, r0
 8001220:	d8be      	bhi.n	80011a0 <HAL_SPI_TransmitReceive+0xb2>
 8001222:	1c7e      	adds	r6, r7, #1
 8001224:	d0bc      	beq.n	80011a0 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001226:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001228:	2301      	movs	r3, #1
 800122a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800122e:	2300      	movs	r3, #0
 8001230:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001234:	b003      	add	sp, #12
 8001236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800123a:	b109      	cbz	r1, 8001240 <HAL_SPI_TransmitReceive+0x152>
 800123c:	2e01      	cmp	r6, #1
 800123e:	d108      	bne.n	8001252 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001240:	782a      	ldrb	r2, [r5, #0]
 8001242:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001244:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001246:	3301      	adds	r3, #1
 8001248:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800124a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800124c:	3b01      	subs	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001252:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001254:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001256:	b29b      	uxth	r3, r3
 8001258:	b91b      	cbnz	r3, 8001262 <HAL_SPI_TransmitReceive+0x174>
 800125a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800125c:	b29b      	uxth	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0a4      	beq.n	80011ac <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001262:	6822      	ldr	r2, [r4, #0]
 8001264:	6893      	ldr	r3, [r2, #8]
 8001266:	0798      	lsls	r0, r3, #30
 8001268:	d50e      	bpl.n	8001288 <HAL_SPI_TransmitReceive+0x19a>
 800126a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800126c:	b29b      	uxth	r3, r3
 800126e:	b15b      	cbz	r3, 8001288 <HAL_SPI_TransmitReceive+0x19a>
 8001270:	b155      	cbz	r5, 8001288 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001272:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001278:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800127a:	3301      	adds	r3, #1
 800127c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800127e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001280:	3b01      	subs	r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001286:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	6893      	ldr	r3, [r2, #8]
 800128c:	07d9      	lsls	r1, r3, #31
 800128e:	d50d      	bpl.n	80012ac <HAL_SPI_TransmitReceive+0x1be>
 8001290:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001292:	b29b      	uxth	r3, r3
 8001294:	b153      	cbz	r3, 80012ac <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001298:	68d2      	ldr	r2, [r2, #12]
 800129a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800129c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800129e:	3301      	adds	r3, #1
 80012a0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80012a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80012aa:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80012ac:	f7ff f9b2 	bl	8000614 <HAL_GetTick>
 80012b0:	eba0 0008 	sub.w	r0, r0, r8
 80012b4:	4287      	cmp	r7, r0
 80012b6:	d8cd      	bhi.n	8001254 <HAL_SPI_TransmitReceive+0x166>
 80012b8:	1c7b      	adds	r3, r7, #1
 80012ba:	d0cb      	beq.n	8001254 <HAL_SPI_TransmitReceive+0x166>
 80012bc:	e7b3      	b.n	8001226 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80012be:	2320      	movs	r3, #32
 80012c0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80012c2:	2001      	movs	r0, #1
 80012c4:	e7b0      	b.n	8001228 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80012c6:	2002      	movs	r0, #2
 80012c8:	e7ae      	b.n	8001228 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80012ca:	2002      	movs	r0, #2
 80012cc:	e7b2      	b.n	8001234 <HAL_SPI_TransmitReceive+0x146>

080012ce <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80012ce:	b570      	push	{r4, r5, r6, lr}
 80012d0:	460e      	mov	r6, r1
 80012d2:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80012d4:	4604      	mov	r4, r0
 80012d6:	b310      	cbz	r0, 800131e <HAL_SRAM_Init+0x50>
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80012d8:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80012dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012e0:	b91b      	cbnz	r3, 80012ea <HAL_SRAM_Init+0x1c>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80012e2:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80012e6:	f001 f813 	bl	8002310 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80012ea:	f104 0108 	add.w	r1, r4, #8
 80012ee:	6820      	ldr	r0, [r4, #0]
 80012f0:	f000 f818 	bl	8001324 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80012f4:	68a2      	ldr	r2, [r4, #8]
 80012f6:	6820      	ldr	r0, [r4, #0]
 80012f8:	4631      	mov	r1, r6
 80012fa:	f000 f83f 	bl	800137c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80012fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001300:	68a2      	ldr	r2, [r4, #8]
 8001302:	6860      	ldr	r0, [r4, #4]
 8001304:	4629      	mov	r1, r5
 8001306:	f000 f857 	bl	80013b8 <FSMC_NORSRAM_Extended_Timing_Init>
 800130a:	68a1      	ldr	r1, [r4, #8]
 800130c:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800130e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 800131a:	2000      	movs	r0, #0
 800131c:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800131e:	2001      	movs	r0, #1
}
 8001320:	bd70      	pop	{r4, r5, r6, pc}
	...

08001324 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	680c      	ldr	r4, [r1, #0]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                     Init->MemoryType           |\
 8001328:	688d      	ldr	r5, [r1, #8]
  tmpr = Device->BTCR[Init->NSBank];
 800132a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800132e:	684a      	ldr	r2, [r1, #4]
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8001330:	4e11      	ldr	r6, [pc, #68]	; (8001378 <FSMC_NORSRAM_Init+0x54>)
 8001332:	401e      	ands	r6, r3
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8001334:	ea45 0302 	orr.w	r3, r5, r2
                     Init->MemoryType           |\
 8001338:	68ca      	ldr	r2, [r1, #12]
 800133a:	4313      	orrs	r3, r2
                     Init->MemoryDataWidth      |\
 800133c:	690a      	ldr	r2, [r1, #16]
 800133e:	4313      	orrs	r3, r2
                     Init->BurstAccessMode      |\
 8001340:	694a      	ldr	r2, [r1, #20]
 8001342:	4313      	orrs	r3, r2
                     Init->WaitSignalPolarity   |\
 8001344:	698a      	ldr	r2, [r1, #24]
 8001346:	4313      	orrs	r3, r2
                     Init->WrapMode             |\
 8001348:	69ca      	ldr	r2, [r1, #28]
 800134a:	4313      	orrs	r3, r2
                     Init->WaitSignalActive     |\
 800134c:	6a0a      	ldr	r2, [r1, #32]
 800134e:	4313      	orrs	r3, r2
                     Init->WriteOperation       |\
 8001350:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001352:	4313      	orrs	r3, r2
                     Init->WaitSignal           |\
 8001354:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001356:	4313      	orrs	r3, r2
                     Init->ExtendedMode         |\
 8001358:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800135a:	4313      	orrs	r3, r2
                     Init->AsynchronousWait     |\
 800135c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800135e:	4313      	orrs	r3, r2
                     Init->PageSize             |\
 8001360:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001362:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8001364:	4333      	orrs	r3, r6
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8001366:	2d08      	cmp	r5, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8001368:	bf08      	it	eq
 800136a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800136e:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8001372:	2000      	movs	r0, #0
 8001374:	bd70      	pop	{r4, r5, r6, pc}
 8001376:	bf00      	nop
 8001378:	fff00080 	.word	0xfff00080

0800137c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800137c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8001380:	680b      	ldr	r3, [r1, #0]
 8001382:	6988      	ldr	r0, [r1, #24]
 8001384:	4303      	orrs	r3, r0
                    ((Timing->AddressHoldTime) << 4U)          |\
 8001386:	6848      	ldr	r0, [r1, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8001388:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                    ((Timing->DataSetupTime) << 8U)            |\
 800138c:	6888      	ldr	r0, [r1, #8]
{
 800138e:	b530      	push	{r4, r5, lr}
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8001390:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8001394:	690d      	ldr	r5, [r1, #16]
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8001396:	68c8      	ldr	r0, [r1, #12]
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8001398:	6949      	ldr	r1, [r1, #20]
  tmpr = Device->BTCR[Bank + 1U];
 800139a:	6854      	ldr	r4, [r2, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800139c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80013a0:	3d01      	subs	r5, #1
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80013a2:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80013a6:	3902      	subs	r1, #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80013a8:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80013ac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80013b0:	4323      	orrs	r3, r4
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr; 
 80013b2:	6053      	str	r3, [r2, #4]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 80013b4:	2000      	movs	r0, #0
 80013b6:	bd30      	pop	{r4, r5, pc}

080013b8 <FSMC_NORSRAM_Extended_Timing_Init>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80013b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 80013bc:	b530      	push	{r4, r5, lr}
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80013be:	d114      	bne.n	80013ea <FSMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80013c0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80013c4:	4c0a      	ldr	r4, [pc, #40]	; (80013f0 <FSMC_NORSRAM_Extended_Timing_Init+0x38>)
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
                      ((Timing->AddressHoldTime) << 4U)          |\
                      ((Timing->DataSetupTime) << 8U)            |\
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80013c6:	698d      	ldr	r5, [r1, #24]
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80013c8:	401c      	ands	r4, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80013ca:	680b      	ldr	r3, [r1, #0]
 80013cc:	432b      	orrs	r3, r5
                      ((Timing->AddressHoldTime) << 4U)          |\
 80013ce:	684d      	ldr	r5, [r1, #4]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80013d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                      ((Timing->DataSetupTime) << 8U)            |\
 80013d4:	688d      	ldr	r5, [r1, #8]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80013d6:	68c9      	ldr	r1, [r1, #12]
 80013d8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80013dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80013e0:	4323      	orrs	r3, r4
    
    Device->BWTR[Bank] = tmpr;
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80013e2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }   
  
  return HAL_OK;  
}
 80013e6:	2000      	movs	r0, #0
 80013e8:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80013ea:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80013ee:	e7f8      	b.n	80013e2 <FSMC_NORSRAM_Extended_Timing_Init+0x2a>
 80013f0:	cff00000 	.word	0xcff00000

080013f4 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 80013f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 80013f8:	4f73      	ldr	r7, [pc, #460]	; (80015c8 <lcdInit+0x1d4>)
 80013fa:	2348      	movs	r3, #72	; 0x48
 80013fc:	703b      	strb	r3, [r7, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 80013fe:	4b73      	ldr	r3, [pc, #460]	; (80015cc <lcdInit+0x1d8>)
 8001400:	2628      	movs	r6, #40	; 0x28
 8001402:	701e      	strb	r6, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001404:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <lcdInit+0x1dc>)
 8001406:	2288      	movs	r2, #136	; 0x88
}

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
	LCD_CmdWrite(command);
 8001408:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800140c:	701a      	strb	r2, [r3, #0]
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800140e:	4b71      	ldr	r3, [pc, #452]	; (80015d4 <lcdInit+0x1e0>)
	LCD_CmdWrite(command);
 8001410:	2501      	movs	r5, #1
  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001412:	f04f 08e8 	mov.w	r8, #232	; 0xe8
 8001416:	f883 8000 	strb.w	r8, [r3]
	HAL_Delay(50);
 800141a:	2032      	movs	r0, #50	; 0x32
	LCD_CmdWrite(command);
 800141c:	8025      	strh	r5, [r4, #0]
	HAL_Delay(50);
 800141e:	f7ff f8ff 	bl	8000620 <HAL_Delay>
	LCD_CmdWrite(command);
 8001422:	23cf      	movs	r3, #207	; 0xcf
 8001424:	8026      	strh	r6, [r4, #0]
 8001426:	8023      	strh	r3, [r4, #0]
}

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
	LCD_DataWrite(data);
 8001428:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <lcdInit+0x1e4>)
 800142a:	2200      	movs	r2, #0
 800142c:	2183      	movs	r1, #131	; 0x83
 800142e:	801a      	strh	r2, [r3, #0]
 8001430:	8019      	strh	r1, [r3, #0]
 8001432:	2130      	movs	r1, #48	; 0x30
 8001434:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 8001436:	21ed      	movs	r1, #237	; 0xed
 8001438:	8021      	strh	r1, [r4, #0]
	LCD_DataWrite(data);
 800143a:	2664      	movs	r6, #100	; 0x64
 800143c:	2103      	movs	r1, #3
 800143e:	801e      	strh	r6, [r3, #0]
 8001440:	8019      	strh	r1, [r3, #0]
 8001442:	2112      	movs	r1, #18
 8001444:	8019      	strh	r1, [r3, #0]
 8001446:	2181      	movs	r1, #129	; 0x81
 8001448:	8019      	strh	r1, [r3, #0]
 800144a:	2185      	movs	r1, #133	; 0x85
	LCD_CmdWrite(command);
 800144c:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001450:	8019      	strh	r1, [r3, #0]
 8001452:	2179      	movs	r1, #121	; 0x79
 8001454:	801d      	strh	r5, [r3, #0]
 8001456:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 8001458:	21cb      	movs	r1, #203	; 0xcb
 800145a:	8021      	strh	r1, [r4, #0]
	LCD_DataWrite(data);
 800145c:	2139      	movs	r1, #57	; 0x39
 800145e:	8019      	strh	r1, [r3, #0]
 8001460:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8001464:	8019      	strh	r1, [r3, #0]
 8001466:	2134      	movs	r1, #52	; 0x34
 8001468:	801a      	strh	r2, [r3, #0]
 800146a:	f04f 0e02 	mov.w	lr, #2
 800146e:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 8001470:	21f7      	movs	r1, #247	; 0xf7
	LCD_DataWrite(data);
 8001472:	f8a3 e000 	strh.w	lr, [r3]
	LCD_CmdWrite(command);
 8001476:	8021      	strh	r1, [r4, #0]
	LCD_DataWrite(data);
 8001478:	2120      	movs	r1, #32
 800147a:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 800147c:	21ea      	movs	r1, #234	; 0xea
 800147e:	8021      	strh	r1, [r4, #0]
 8001480:	21c0      	movs	r1, #192	; 0xc0
	LCD_DataWrite(data);
 8001482:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8001484:	20c1      	movs	r0, #193	; 0xc1
	LCD_DataWrite(data);
 8001486:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 8001488:	8021      	strh	r1, [r4, #0]
	LCD_DataWrite(data);
 800148a:	2126      	movs	r1, #38	; 0x26
 800148c:	8019      	strh	r1, [r3, #0]
 800148e:	f04f 0c11 	mov.w	ip, #17
	LCD_CmdWrite(command);
 8001492:	8020      	strh	r0, [r4, #0]
 8001494:	20c5      	movs	r0, #197	; 0xc5
	LCD_DataWrite(data);
 8001496:	f8a3 c000 	strh.w	ip, [r3]
	LCD_CmdWrite(command);
 800149a:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 800149c:	2035      	movs	r0, #53	; 0x35
 800149e:	8018      	strh	r0, [r3, #0]
 80014a0:	203e      	movs	r0, #62	; 0x3e
 80014a2:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 80014a4:	20c7      	movs	r0, #199	; 0xc7
 80014a6:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 80014a8:	20be      	movs	r0, #190	; 0xbe
 80014aa:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 80014ac:	2036      	movs	r0, #54	; 0x36
 80014ae:	8020      	strh	r0, [r4, #0]
  lcdWriteData(lcdPortraitConfig);
 80014b0:	7838      	ldrb	r0, [r7, #0]
	LCD_DataWrite(data);
 80014b2:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 80014b4:	273a      	movs	r7, #58	; 0x3a
	LCD_DataWrite(data);
 80014b6:	2055      	movs	r0, #85	; 0x55
	LCD_CmdWrite(command);
 80014b8:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 80014ba:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 80014bc:	20b1      	movs	r0, #177	; 0xb1
 80014be:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 80014c0:	201b      	movs	r0, #27
 80014c2:	801a      	strh	r2, [r3, #0]
 80014c4:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 80014c6:	20f2      	movs	r0, #242	; 0xf2
 80014c8:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 80014ca:	2008      	movs	r0, #8
 80014cc:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 80014ce:	8021      	strh	r1, [r4, #0]
 80014d0:	21e0      	movs	r1, #224	; 0xe0
	LCD_DataWrite(data);
 80014d2:	801d      	strh	r5, [r3, #0]
 80014d4:	f04f 091f 	mov.w	r9, #31
	LCD_CmdWrite(command);
 80014d8:	8021      	strh	r1, [r4, #0]
	LCD_DataWrite(data);
 80014da:	211a      	movs	r1, #26
 80014dc:	f8a3 9000 	strh.w	r9, [r3]
 80014e0:	f04f 0a18 	mov.w	sl, #24
 80014e4:	8019      	strh	r1, [r3, #0]
 80014e6:	200f      	movs	r0, #15
 80014e8:	210a      	movs	r1, #10
 80014ea:	f8a3 a000 	strh.w	sl, [r3]
 80014ee:	8019      	strh	r1, [r3, #0]
 80014f0:	8018      	strh	r0, [r3, #0]
 80014f2:	2006      	movs	r0, #6
 80014f4:	8018      	strh	r0, [r3, #0]
 80014f6:	2045      	movs	r0, #69	; 0x45
 80014f8:	8018      	strh	r0, [r3, #0]
 80014fa:	2087      	movs	r0, #135	; 0x87
 80014fc:	8018      	strh	r0, [r3, #0]
 80014fe:	2032      	movs	r0, #50	; 0x32
 8001500:	8018      	strh	r0, [r3, #0]
 8001502:	2007      	movs	r0, #7
 8001504:	8019      	strh	r1, [r3, #0]
	LCD_CmdWrite(command);
 8001506:	f04f 08e1 	mov.w	r8, #225	; 0xe1
	LCD_DataWrite(data);
 800150a:	8018      	strh	r0, [r3, #0]
 800150c:	f8a3 e000 	strh.w	lr, [r3]
 8001510:	f04f 0e05 	mov.w	lr, #5
 8001514:	8018      	strh	r0, [r3, #0]
 8001516:	f8a3 e000 	strh.w	lr, [r3]
 800151a:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 800151c:	f8a4 8000 	strh.w	r8, [r4]
	LCD_DataWrite(data);
 8001520:	f04f 0825 	mov.w	r8, #37	; 0x25
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	f04f 0b10 	mov.w	fp, #16
 800152a:	f8a3 8000 	strh.w	r8, [r3]
 800152e:	f04f 0827 	mov.w	r8, #39	; 0x27
 8001532:	f8a3 8000 	strh.w	r8, [r3]
 8001536:	f8a3 e000 	strh.w	lr, [r3]
 800153a:	f8a3 b000 	strh.w	fp, [r3]
 800153e:	f04f 0b09 	mov.w	fp, #9
 8001542:	f8a3 b000 	strh.w	fp, [r3]
 8001546:	f04f 0b78 	mov.w	fp, #120	; 0x78
 800154a:	801f      	strh	r7, [r3, #0]
 800154c:	f8a3 b000 	strh.w	fp, [r3]
 8001550:	f04f 0b4d 	mov.w	fp, #77	; 0x4d
 8001554:	f8a3 b000 	strh.w	fp, [r3]
 8001558:	f8a3 e000 	strh.w	lr, [r3]
 800155c:	f04f 0e0d 	mov.w	lr, #13
 8001560:	f8a3 a000 	strh.w	sl, [r3]
 8001564:	f8a3 e000 	strh.w	lr, [r3]
 8001568:	f04f 0e38 	mov.w	lr, #56	; 0x38
 800156c:	f8a3 e000 	strh.w	lr, [r3]
 8001570:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001572:	272a      	movs	r7, #42	; 0x2a
	LCD_DataWrite(data);
 8001574:	f8a3 9000 	strh.w	r9, [r3]
	LCD_CmdWrite(command);
 8001578:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 800157a:	27ef      	movs	r7, #239	; 0xef
 800157c:	801a      	strh	r2, [r3, #0]
 800157e:	801a      	strh	r2, [r3, #0]
 8001580:	801a      	strh	r2, [r3, #0]
 8001582:	801f      	strh	r7, [r3, #0]
	LCD_CmdWrite(command);
 8001584:	272b      	movs	r7, #43	; 0x2b
 8001586:	8027      	strh	r7, [r4, #0]
	LCD_DataWrite(data);
 8001588:	801a      	strh	r2, [r3, #0]
 800158a:	801a      	strh	r2, [r3, #0]
 800158c:	801d      	strh	r5, [r3, #0]
 800158e:	253f      	movs	r5, #63	; 0x3f
 8001590:	801d      	strh	r5, [r3, #0]
	LCD_CmdWrite(command);
 8001592:	25b7      	movs	r5, #183	; 0xb7
 8001594:	8025      	strh	r5, [r4, #0]
	LCD_DataWrite(data);
 8001596:	8018      	strh	r0, [r3, #0]
	LCD_CmdWrite(command);
 8001598:	20b6      	movs	r0, #182	; 0xb6
 800159a:	8020      	strh	r0, [r4, #0]
	LCD_DataWrite(data);
 800159c:	8019      	strh	r1, [r3, #0]
 800159e:	2182      	movs	r1, #130	; 0x82
 80015a0:	8019      	strh	r1, [r3, #0]
  HAL_Delay(100);
 80015a2:	4630      	mov	r0, r6
	LCD_DataWrite(data);
 80015a4:	f8a3 8000 	strh.w	r8, [r3]
 80015a8:	801a      	strh	r2, [r3, #0]
	LCD_CmdWrite(command);
 80015aa:	f8a4 c000 	strh.w	ip, [r4]
  HAL_Delay(100);
 80015ae:	f7ff f837 	bl	8000620 <HAL_Delay>
	LCD_CmdWrite(command);
 80015b2:	2329      	movs	r3, #41	; 0x29
 80015b4:	8023      	strh	r3, [r4, #0]
  HAL_Delay(100);
 80015b6:	4630      	mov	r0, r6
 80015b8:	f7ff f832 	bl	8000620 <HAL_Delay>
	LCD_CmdWrite(command);
 80015bc:	f04f 032c 	mov.w	r3, #44	; 0x2c
 80015c0:	8023      	strh	r3, [r4, #0]
 80015c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015c6:	bf00      	nop
 80015c8:	200001b2 	.word	0x200001b2
 80015cc:	200001b0 	.word	0x200001b0
 80015d0:	200001b3 	.word	0x200001b3
 80015d4:	200001b1 	.word	0x200001b1
 80015d8:	60080000 	.word	0x60080000

080015dc <lcdSetTextColor>:
	lcdFont.TextColor = c;
 80015dc:	4b01      	ldr	r3, [pc, #4]	; (80015e4 <lcdSetTextColor+0x8>)
	lcdFont.BackColor = b;
 80015de:	e883 0003 	stmia.w	r3, {r0, r1}
 80015e2:	4770      	bx	lr
 80015e4:	20000010 	.word	0x20000010

080015e8 <lcdSetWindow>:
{
 80015e8:	b570      	push	{r4, r5, r6, lr}
	LCD_CmdWrite(command);
 80015ea:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 80015ee:	242a      	movs	r4, #42	; 0x2a
 80015f0:	802c      	strh	r4, [r5, #0]
	LCD_DataWrite(data);
 80015f2:	4c0b      	ldr	r4, [pc, #44]	; (8001620 <lcdSetWindow+0x38>)
  lcdWriteData((x0 >> 8) & 0xFF);
 80015f4:	0a06      	lsrs	r6, r0, #8
  lcdWriteData(x0 & 0xFF);
 80015f6:	b2c0      	uxtb	r0, r0
	LCD_DataWrite(data);
 80015f8:	8026      	strh	r6, [r4, #0]
 80015fa:	8020      	strh	r0, [r4, #0]
  lcdWriteData((x1 >> 8) & 0xFF);
 80015fc:	0a10      	lsrs	r0, r2, #8
  lcdWriteData(x1 & 0xFF);
 80015fe:	b2d2      	uxtb	r2, r2
	LCD_DataWrite(data);
 8001600:	8020      	strh	r0, [r4, #0]
 8001602:	8022      	strh	r2, [r4, #0]
	LCD_CmdWrite(command);
 8001604:	222b      	movs	r2, #43	; 0x2b
 8001606:	802a      	strh	r2, [r5, #0]
  lcdWriteData((y0 >> 8) & 0xFF);
 8001608:	0a0a      	lsrs	r2, r1, #8
	LCD_DataWrite(data);
 800160a:	8022      	strh	r2, [r4, #0]
  lcdWriteData(y0 & 0xFF);
 800160c:	b2c9      	uxtb	r1, r1
  lcdWriteData((y1 >> 8) & 0xFF);
 800160e:	0a1a      	lsrs	r2, r3, #8
  lcdWriteData(y1 & 0xFF);
 8001610:	b2db      	uxtb	r3, r3
	LCD_DataWrite(data);
 8001612:	8021      	strh	r1, [r4, #0]
 8001614:	8022      	strh	r2, [r4, #0]
 8001616:	8023      	strh	r3, [r4, #0]
	LCD_CmdWrite(command);
 8001618:	232c      	movs	r3, #44	; 0x2c
 800161a:	802b      	strh	r3, [r5, #0]
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	bf00      	nop
 8001620:	60080000 	.word	0x60080000

08001624 <lcdDrawPixel>:
{
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	4615      	mov	r5, r2
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <lcdDrawPixel+0x20>)
 800162a:	8816      	ldrh	r6, [r2, #0]
 800162c:	4286      	cmp	r6, r0
{
 800162e:	460b      	mov	r3, r1
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001630:	d907      	bls.n	8001642 <lcdDrawPixel+0x1e>
 8001632:	8852      	ldrh	r2, [r2, #2]
 8001634:	428a      	cmp	r2, r1
 8001636:	d904      	bls.n	8001642 <lcdDrawPixel+0x1e>
    lcdSetWindow(x, y, x, y);
 8001638:	4602      	mov	r2, r0
 800163a:	f7ff ffd5 	bl	80015e8 <lcdSetWindow>
	LCD_DataWrite(data);
 800163e:	4b02      	ldr	r3, [pc, #8]	; (8001648 <lcdDrawPixel+0x24>)
 8001640:	801d      	strh	r5, [r3, #0]
 8001642:	bd70      	pop	{r4, r5, r6, pc}
 8001644:	20000020 	.word	0x20000020
 8001648:	60080000 	.word	0x60080000

0800164c <lcdDrawLine>:
{
 800164c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001650:	1a5f      	subs	r7, r3, r1
{
 8001652:	4616      	mov	r6, r2
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001654:	eba6 0800 	sub.w	r8, r6, r0
 8001658:	2f00      	cmp	r7, #0
 800165a:	bfb8      	it	lt
 800165c:	427f      	neglt	r7, r7
 800165e:	f1b8 0f00 	cmp.w	r8, #0
 8001662:	bfb8      	it	lt
 8001664:	f1c8 0800 	rsblt	r8, r8, #0
	if (steep)
 8001668:	4547      	cmp	r7, r8
{
 800166a:	4604      	mov	r4, r0
 800166c:	460d      	mov	r5, r1
 800166e:	461a      	mov	r2, r3
 8001670:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
	if (steep)
 8001674:	dd04      	ble.n	8001680 <lcdDrawLine+0x34>
 8001676:	4633      	mov	r3, r6
		swap(x1, y1);
 8001678:	460c      	mov	r4, r1
		swap(x2, y2);
 800167a:	4616      	mov	r6, r2
		swap(x1, y1);
 800167c:	4605      	mov	r5, r0
		swap(x2, y2);
 800167e:	461a      	mov	r2, r3
	if (x1 > x2)
 8001680:	42b4      	cmp	r4, r6
 8001682:	dd05      	ble.n	8001690 <lcdDrawLine+0x44>
 8001684:	462b      	mov	r3, r5
		swap(y1, y2);
 8001686:	4615      	mov	r5, r2
 8001688:	461a      	mov	r2, r3
	if (x1 > x2)
 800168a:	4623      	mov	r3, r4
 800168c:	4634      	mov	r4, r6
 800168e:	461e      	mov	r6, r3
	dy = abs(y2 - y1);
 8001690:	eba2 0a05 	sub.w	sl, r2, r5
 8001694:	4653      	mov	r3, sl
 8001696:	2b00      	cmp	r3, #0
	dx = x2 - x1;
 8001698:	eba6 0904 	sub.w	r9, r6, r4
	dy = abs(y2 - y1);
 800169c:	bfb8      	it	lt
 800169e:	425b      	neglt	r3, r3
	dx = x2 - x1;
 80016a0:	fa1f f989 	uxth.w	r9, r9
	dy = abs(y2 - y1);
 80016a4:	9301      	str	r3, [sp, #4]
	int16_t err = dx / 2;
 80016a6:	fa0f f189 	sxth.w	r1, r9
 80016aa:	2302      	movs	r3, #2
 80016ac:	fb91 faf3 	sdiv	sl, r1, r3
		ystep = -1;
 80016b0:	4295      	cmp	r5, r2
 80016b2:	bfb4      	ite	lt
 80016b4:	2301      	movlt	r3, #1
 80016b6:	f04f 33ff 	movge.w	r3, #4294967295
 80016ba:	9300      	str	r3, [sp, #0]
	for (; x1 <= x2; x1++)
 80016bc:	42b4      	cmp	r4, r6
 80016be:	dd02      	ble.n	80016c6 <lcdDrawLine+0x7a>
}
 80016c0:	b003      	add	sp, #12
 80016c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (steep)
 80016c6:	4547      	cmp	r7, r8
 80016c8:	b2a0      	uxth	r0, r4
 80016ca:	fa1f fe85 	uxth.w	lr, r5
			lcdDrawPixel(y1, x1, color);
 80016ce:	bfc8      	it	gt
 80016d0:	4601      	movgt	r1, r0
 80016d2:	465a      	mov	r2, fp
 80016d4:	bfcc      	ite	gt
 80016d6:	4670      	movgt	r0, lr
			lcdDrawPixel(x1, y1, color);
 80016d8:	4671      	movle	r1, lr
 80016da:	f7ff ffa3 	bl	8001624 <lcdDrawPixel>
		err -= dy;
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	ebaa 0303 	sub.w	r3, sl, r3
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	fa0f fa82 	sxth.w	sl, r2
		if (err < 0)
 80016ea:	f1ba 0f00 	cmp.w	sl, #0
 80016ee:	da06      	bge.n	80016fe <lcdDrawLine+0xb2>
			y1 += ystep;
 80016f0:	9b00      	ldr	r3, [sp, #0]
 80016f2:	441d      	add	r5, r3
			err += dx;
 80016f4:	eb09 0302 	add.w	r3, r9, r2
			y1 += ystep;
 80016f8:	b22d      	sxth	r5, r5
			err += dx;
 80016fa:	fa0f fa83 	sxth.w	sl, r3
 80016fe:	3401      	adds	r4, #1
 8001700:	b224      	sxth	r4, r4
 8001702:	e7db      	b.n	80016bc <lcdDrawLine+0x70>

08001704 <lcdDrawTriangle>:
{
 8001704:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001708:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800170c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8001710:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
    lcdDrawLine(x0, y0, x1, y1, color);
 8001714:	9400      	str	r4, [sp, #0]
{
 8001716:	4691      	mov	r9, r2
 8001718:	469a      	mov	sl, r3
 800171a:	4607      	mov	r7, r0
 800171c:	4688      	mov	r8, r1
    lcdDrawLine(x0, y0, x1, y1, color);
 800171e:	f7ff ff95 	bl	800164c <lcdDrawLine>
    lcdDrawLine(x1, y1, x2, y2, color);
 8001722:	4633      	mov	r3, r6
 8001724:	462a      	mov	r2, r5
 8001726:	4651      	mov	r1, sl
 8001728:	4648      	mov	r0, r9
 800172a:	9400      	str	r4, [sp, #0]
 800172c:	f7ff ff8e 	bl	800164c <lcdDrawLine>
    lcdDrawLine(x2, y2, x0, y0, color);
 8001730:	4643      	mov	r3, r8
 8001732:	463a      	mov	r2, r7
 8001734:	4631      	mov	r1, r6
 8001736:	4628      	mov	r0, r5
 8001738:	940a      	str	r4, [sp, #40]	; 0x28
}
 800173a:	b002      	add	sp, #8
 800173c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    lcdDrawLine(x2, y2, x0, y0, color);
 8001740:	f7ff bf84 	b.w	800164c <lcdDrawLine>

08001744 <lcdDrawCircleHelper>:
{
 8001744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001748:	469b      	mov	fp, r3
	int16_t f = 1 - r;
 800174a:	b293      	uxth	r3, r2
 800174c:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 8001750:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 8001754:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	b21b      	sxth	r3, r3
 800175a:	9301      	str	r3, [sp, #4]
	while (x < y)
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
{
 8001760:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
		if (cornername & 0x4)
 8001764:	f00b 0304 	and.w	r3, fp, #4
{
 8001768:	468a      	mov	sl, r1
 800176a:	4615      	mov	r5, r2
	int16_t f = 1 - r;
 800176c:	b224      	sxth	r4, r4
		if (cornername & 0x4)
 800176e:	9302      	str	r3, [sp, #8]
			lcdDrawPixel(x0 + x, y0 + y, color);
 8001770:	fa1f f880 	uxth.w	r8, r0
	while (x < y)
 8001774:	f9bd 3000 	ldrsh.w	r3, [sp]
 8001778:	42ab      	cmp	r3, r5
 800177a:	db02      	blt.n	8001782 <lcdDrawCircleHelper+0x3e>
}
 800177c:	b005      	add	sp, #20
 800177e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (f >= 0)
 8001782:	2c00      	cmp	r4, #0
 8001784:	db08      	blt.n	8001798 <lcdDrawCircleHelper+0x54>
			ddF_y += 2;
 8001786:	9b01      	ldr	r3, [sp, #4]
 8001788:	3302      	adds	r3, #2
 800178a:	b29b      	uxth	r3, r3
			y--;
 800178c:	3d01      	subs	r5, #1
			ddF_y += 2;
 800178e:	b21a      	sxth	r2, r3
			f += ddF_y;
 8001790:	441c      	add	r4, r3
			y--;
 8001792:	b22d      	sxth	r5, r5
			ddF_y += 2;
 8001794:	9201      	str	r2, [sp, #4]
			f += ddF_y;
 8001796:	b224      	sxth	r4, r4
 8001798:	f8bd 6000 	ldrh.w	r6, [sp]
		if (cornername & 0x4)
 800179c:	9b02      	ldr	r3, [sp, #8]
		f += ddF_x;
 800179e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80017a2:	3403      	adds	r4, #3
 80017a4:	b224      	sxth	r4, r4
		if (cornername & 0x4)
 80017a6:	b1c3      	cbz	r3, 80017da <lcdDrawCircleHelper+0x96>
			lcdDrawPixel(x0 + x, y0 + y, color);
 80017a8:	b2ab      	uxth	r3, r5
 80017aa:	fa1f f98a 	uxth.w	r9, sl
 80017ae:	f108 0001 	add.w	r0, r8, #1
 80017b2:	eb09 0103 	add.w	r1, r9, r3
 80017b6:	4430      	add	r0, r6
 80017b8:	463a      	mov	r2, r7
 80017ba:	b289      	uxth	r1, r1
 80017bc:	b280      	uxth	r0, r0
 80017be:	9303      	str	r3, [sp, #12]
 80017c0:	f7ff ff30 	bl	8001624 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 + x, color);
 80017c4:	9b03      	ldr	r3, [sp, #12]
 80017c6:	f109 0101 	add.w	r1, r9, #1
 80017ca:	4431      	add	r1, r6
 80017cc:	eb08 0003 	add.w	r0, r8, r3
 80017d0:	463a      	mov	r2, r7
 80017d2:	b289      	uxth	r1, r1
 80017d4:	b280      	uxth	r0, r0
 80017d6:	f7ff ff25 	bl	8001624 <lcdDrawPixel>
		if (cornername & 0x2)
 80017da:	f01b 0f02 	tst.w	fp, #2
 80017de:	d018      	beq.n	8001812 <lcdDrawCircleHelper+0xce>
			lcdDrawPixel(x0 + x, y0 - y, color);
 80017e0:	b2ab      	uxth	r3, r5
 80017e2:	fa1f f98a 	uxth.w	r9, sl
 80017e6:	f108 0001 	add.w	r0, r8, #1
 80017ea:	eba9 0103 	sub.w	r1, r9, r3
 80017ee:	4430      	add	r0, r6
 80017f0:	463a      	mov	r2, r7
 80017f2:	b289      	uxth	r1, r1
 80017f4:	b280      	uxth	r0, r0
 80017f6:	9303      	str	r3, [sp, #12]
 80017f8:	f7ff ff14 	bl	8001624 <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 - x, color);
 80017fc:	9b03      	ldr	r3, [sp, #12]
 80017fe:	f109 31ff 	add.w	r1, r9, #4294967295
 8001802:	1b89      	subs	r1, r1, r6
 8001804:	eb08 0003 	add.w	r0, r8, r3
 8001808:	463a      	mov	r2, r7
 800180a:	b289      	uxth	r1, r1
 800180c:	b280      	uxth	r0, r0
 800180e:	f7ff ff09 	bl	8001624 <lcdDrawPixel>
		if (cornername & 0x8)
 8001812:	f01b 0f08 	tst.w	fp, #8
 8001816:	d01a      	beq.n	800184e <lcdDrawCircleHelper+0x10a>
			lcdDrawPixel(x0 - y, y0 + x, color);
 8001818:	fa1f f38a 	uxth.w	r3, sl
 800181c:	f103 0e01 	add.w	lr, r3, #1
 8001820:	fa1f f985 	uxth.w	r9, r5
 8001824:	44b6      	add	lr, r6
 8001826:	eba8 0009 	sub.w	r0, r8, r9
 800182a:	463a      	mov	r2, r7
 800182c:	fa1f f18e 	uxth.w	r1, lr
 8001830:	b280      	uxth	r0, r0
 8001832:	9303      	str	r3, [sp, #12]
 8001834:	f7ff fef6 	bl	8001624 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 + y, color);
 8001838:	9b03      	ldr	r3, [sp, #12]
 800183a:	f108 30ff 	add.w	r0, r8, #4294967295
 800183e:	eb09 0103 	add.w	r1, r9, r3
 8001842:	1b80      	subs	r0, r0, r6
 8001844:	463a      	mov	r2, r7
 8001846:	b289      	uxth	r1, r1
 8001848:	b280      	uxth	r0, r0
 800184a:	f7ff feeb 	bl	8001624 <lcdDrawPixel>
		if (cornername & 0x1)
 800184e:	f01b 0f01 	tst.w	fp, #1
 8001852:	d01a      	beq.n	800188a <lcdDrawCircleHelper+0x146>
			lcdDrawPixel(x0 - y, y0 - x, color);
 8001854:	fa1f f98a 	uxth.w	r9, sl
 8001858:	b2ab      	uxth	r3, r5
 800185a:	f109 3eff 	add.w	lr, r9, #4294967295
 800185e:	eba8 0003 	sub.w	r0, r8, r3
 8001862:	ebae 0e06 	sub.w	lr, lr, r6
 8001866:	463a      	mov	r2, r7
 8001868:	fa1f f18e 	uxth.w	r1, lr
 800186c:	b280      	uxth	r0, r0
 800186e:	9303      	str	r3, [sp, #12]
 8001870:	f7ff fed8 	bl	8001624 <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 - y, color);
 8001874:	9b03      	ldr	r3, [sp, #12]
 8001876:	f108 30ff 	add.w	r0, r8, #4294967295
 800187a:	eba9 0103 	sub.w	r1, r9, r3
 800187e:	1b80      	subs	r0, r0, r6
 8001880:	463a      	mov	r2, r7
 8001882:	b289      	uxth	r1, r1
 8001884:	b280      	uxth	r0, r0
 8001886:	f7ff fecd 	bl	8001624 <lcdDrawPixel>
 800188a:	9b00      	ldr	r3, [sp, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	e770      	b.n	8001774 <lcdDrawCircleHelper+0x30>

08001892 <lcdDrawCircle>:
{
 8001892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 8001896:	b295      	uxth	r5, r2
{
 8001898:	b089      	sub	sp, #36	; 0x24
 800189a:	461c      	mov	r4, r3
	int16_t f = 1 - r;
 800189c:	f1c5 0301 	rsb	r3, r5, #1
 80018a0:	b21b      	sxth	r3, r3
	lcdDrawPixel(x0, y0 + r, color);
 80018a2:	b28f      	uxth	r7, r1
	int16_t f = 1 - r;
 80018a4:	9301      	str	r3, [sp, #4]
	int16_t ddF_y = -2 * r;
 80018a6:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
	lcdDrawPixel(x0, y0 + r, color);
 80018aa:	b286      	uxth	r6, r0
	int16_t ddF_y = -2 * r;
 80018ac:	005b      	lsls	r3, r3, #1
	lcdDrawPixel(x0, y0 + r, color);
 80018ae:	19e9      	adds	r1, r5, r7
	int16_t ddF_y = -2 * r;
 80018b0:	b21b      	sxth	r3, r3
	lcdDrawPixel(x0, y0 + r, color);
 80018b2:	b289      	uxth	r1, r1
 80018b4:	4630      	mov	r0, r6
{
 80018b6:	4690      	mov	r8, r2
	lcdDrawPixel(x0, y0 + r, color);
 80018b8:	4622      	mov	r2, r4
	int16_t ddF_y = -2 * r;
 80018ba:	9303      	str	r3, [sp, #12]
	lcdDrawPixel(x0, y0 + r, color);
 80018bc:	f7ff feb2 	bl	8001624 <lcdDrawPixel>
	lcdDrawPixel(x0, y0 - r, color);
 80018c0:	1b79      	subs	r1, r7, r5
 80018c2:	4622      	mov	r2, r4
 80018c4:	b289      	uxth	r1, r1
 80018c6:	4630      	mov	r0, r6
 80018c8:	f7ff feac 	bl	8001624 <lcdDrawPixel>
	lcdDrawPixel(x0 + r, y0, color);
 80018cc:	19a8      	adds	r0, r5, r6
 80018ce:	4622      	mov	r2, r4
 80018d0:	4639      	mov	r1, r7
 80018d2:	b280      	uxth	r0, r0
 80018d4:	f7ff fea6 	bl	8001624 <lcdDrawPixel>
	lcdDrawPixel(x0 - r, y0, color);
 80018d8:	1b70      	subs	r0, r6, r5
 80018da:	4622      	mov	r2, r4
 80018dc:	4639      	mov	r1, r7
 80018de:	b280      	uxth	r0, r0
 80018e0:	f7ff fea0 	bl	8001624 <lcdDrawPixel>
	while (x < y)
 80018e4:	2300      	movs	r3, #0
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	1c73      	adds	r3, r6, #1
 80018ea:	9304      	str	r3, [sp, #16]
 80018ec:	1e73      	subs	r3, r6, #1
 80018ee:	9305      	str	r3, [sp, #20]
 80018f0:	1c7b      	adds	r3, r7, #1
 80018f2:	9306      	str	r3, [sp, #24]
 80018f4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80018f8:	4543      	cmp	r3, r8
 80018fa:	db02      	blt.n	8001902 <lcdDrawCircle+0x70>
}
 80018fc:	b009      	add	sp, #36	; 0x24
 80018fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (f >= 0)
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0c      	blt.n	8001922 <lcdDrawCircle+0x90>
			ddF_y += 2;
 8001908:	9b03      	ldr	r3, [sp, #12]
 800190a:	3302      	adds	r3, #2
 800190c:	b29b      	uxth	r3, r3
 800190e:	b21a      	sxth	r2, r3
 8001910:	9203      	str	r2, [sp, #12]
			f += ddF_y;
 8001912:	9a01      	ldr	r2, [sp, #4]
 8001914:	4413      	add	r3, r2
			y--;
 8001916:	f108 38ff 	add.w	r8, r8, #4294967295
			f += ddF_y;
 800191a:	b21b      	sxth	r3, r3
			y--;
 800191c:	fa0f f888 	sxth.w	r8, r8
			f += ddF_y;
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	f8bd 9008 	ldrh.w	r9, [sp, #8]
		f += ddF_x;
 8001926:	9b01      	ldr	r3, [sp, #4]
 8001928:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 800192c:	3303      	adds	r3, #3
 800192e:	b21b      	sxth	r3, r3
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	9b04      	ldr	r3, [sp, #16]
		lcdDrawPixel(x0 + x, y0 + y, color);
 8001934:	fa1f f588 	uxth.w	r5, r8
 8001938:	444b      	add	r3, r9
 800193a:	eb07 0b05 	add.w	fp, r7, r5
 800193e:	b29b      	uxth	r3, r3
 8001940:	fa1f fb8b 	uxth.w	fp, fp
 8001944:	4659      	mov	r1, fp
 8001946:	4618      	mov	r0, r3
 8001948:	4622      	mov	r2, r4
 800194a:	9307      	str	r3, [sp, #28]
 800194c:	f7ff fe6a 	bl	8001624 <lcdDrawPixel>
 8001950:	9b05      	ldr	r3, [sp, #20]
 8001952:	eba3 0a09 	sub.w	sl, r3, r9
 8001956:	fa1f fa8a 	uxth.w	sl, sl
		lcdDrawPixel(x0 - x, y0 + y, color);
 800195a:	4659      	mov	r1, fp
 800195c:	4650      	mov	r0, sl
 800195e:	4622      	mov	r2, r4
 8001960:	f7ff fe60 	bl	8001624 <lcdDrawPixel>
		lcdDrawPixel(x0 + x, y0 - y, color);
 8001964:	eba7 0b05 	sub.w	fp, r7, r5
 8001968:	9b07      	ldr	r3, [sp, #28]
 800196a:	fa1f fb8b 	uxth.w	fp, fp
 800196e:	4618      	mov	r0, r3
 8001970:	4659      	mov	r1, fp
 8001972:	4622      	mov	r2, r4
 8001974:	f7ff fe56 	bl	8001624 <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 - y, color);
 8001978:	4659      	mov	r1, fp
 800197a:	4650      	mov	r0, sl
 800197c:	4622      	mov	r2, r4
 800197e:	f7ff fe51 	bl	8001624 <lcdDrawPixel>
 8001982:	9b06      	ldr	r3, [sp, #24]
		lcdDrawPixel(x0 + y, y0 + x, color);
 8001984:	eb06 0a05 	add.w	sl, r6, r5
 8001988:	eb09 0b03 	add.w	fp, r9, r3
 800198c:	fa1f fa8a 	uxth.w	sl, sl
 8001990:	fa1f fb8b 	uxth.w	fp, fp
		lcdDrawPixel(x0 - y, y0 + x, color);
 8001994:	1b75      	subs	r5, r6, r5
		lcdDrawPixel(x0 + y, y0 + x, color);
 8001996:	4622      	mov	r2, r4
 8001998:	4659      	mov	r1, fp
 800199a:	4650      	mov	r0, sl
		lcdDrawPixel(x0 - y, y0 + x, color);
 800199c:	b2ad      	uxth	r5, r5
		lcdDrawPixel(x0 + y, y0 + x, color);
 800199e:	f7ff fe41 	bl	8001624 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 + x, color);
 80019a2:	4622      	mov	r2, r4
 80019a4:	4659      	mov	r1, fp
 80019a6:	4628      	mov	r0, r5
 80019a8:	f7ff fe3c 	bl	8001624 <lcdDrawPixel>
 80019ac:	1e7b      	subs	r3, r7, #1
 80019ae:	eba3 0909 	sub.w	r9, r3, r9
 80019b2:	fa1f f989 	uxth.w	r9, r9
		lcdDrawPixel(x0 + y, y0 - x, color);
 80019b6:	4622      	mov	r2, r4
 80019b8:	4649      	mov	r1, r9
 80019ba:	4650      	mov	r0, sl
 80019bc:	f7ff fe32 	bl	8001624 <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 - x, color);
 80019c0:	4622      	mov	r2, r4
 80019c2:	4649      	mov	r1, r9
 80019c4:	4628      	mov	r0, r5
 80019c6:	f7ff fe2d 	bl	8001624 <lcdDrawPixel>
 80019ca:	9b02      	ldr	r3, [sp, #8]
 80019cc:	3301      	adds	r3, #1
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	e790      	b.n	80018f4 <lcdDrawCircle+0x62>
	...

080019d4 <lcdDrawChar>:
{
 80019d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019d8:	469a      	mov	sl, r3
	if ((x >= lcdProperties.width) || 			// Clip right
 80019da:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <lcdDrawChar+0xc0>)
{
 80019dc:	4689      	mov	r9, r1
	if ((x >= lcdProperties.width) || 			// Clip right
 80019de:	8819      	ldrh	r1, [r3, #0]
{
 80019e0:	b087      	sub	sp, #28
	if ((x >= lcdProperties.width) || 			// Clip right
 80019e2:	4288      	cmp	r0, r1
{
 80019e4:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
	if ((x >= lcdProperties.width) || 			// Clip right
 80019e8:	da50      	bge.n	8001a8c <lcdDrawChar+0xb8>
			(y >= lcdProperties.height) || 		// Clip bottom
 80019ea:	885b      	ldrh	r3, [r3, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 80019ec:	4599      	cmp	r9, r3
 80019ee:	da4d      	bge.n	8001a8c <lcdDrawChar+0xb8>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 80019f0:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <lcdDrawChar+0xc4>)
 80019f2:	689e      	ldr	r6, [r3, #8]
 80019f4:	88b3      	ldrh	r3, [r6, #4]
			(y >= lcdProperties.height) || 		// Clip bottom
 80019f6:	42c3      	cmn	r3, r0
 80019f8:	d448      	bmi.n	8001a8c <lcdDrawChar+0xb8>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 80019fa:	88f3      	ldrh	r3, [r6, #6]
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 80019fc:	eb13 0f09 	cmn.w	r3, r9
 8001a00:	d444      	bmi.n	8001a8c <lcdDrawChar+0xb8>
	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8001a02:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 8001a06:	9300      	str	r3, [sp, #0]
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001a08:	f1a2 0320 	sub.w	r3, r2, #32
 8001a0c:	9304      	str	r3, [sp, #16]
 8001a0e:	b283      	uxth	r3, r0
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	3308      	adds	r3, #8
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001a14:	2500      	movs	r5, #0
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	88f1      	ldrh	r1, [r6, #6]
 8001a1a:	b2ea      	uxtb	r2, r5
 8001a1c:	4291      	cmp	r1, r2
 8001a1e:	d935      	bls.n	8001a8c <lcdDrawChar+0xb8>
					lcdDrawPixel(x + j + xP, y + i, bg);
 8001a20:	444a      	add	r2, r9
 8001a22:	b293      	uxth	r3, r2
 8001a24:	f04f 0800 	mov.w	r8, #0
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	e022      	b.n	8001a72 <lcdDrawChar+0x9e>
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001a2c:	9b04      	ldr	r3, [sp, #16]
 8001a2e:	88f2      	ldrh	r2, [r6, #6]
 8001a30:	b2e8      	uxtb	r0, r5
 8001a32:	fb02 0203 	mla	r2, r2, r3, r0
 8001a36:	9b00      	ldr	r3, [sp, #0]
 8001a38:	6830      	ldr	r0, [r6, #0]
 8001a3a:	fb03 0202 	mla	r2, r3, r2, r0
 8001a3e:	9b02      	ldr	r3, [sp, #8]
 8001a40:	f812 7008 	ldrb.w	r7, [r2, r8]
 8001a44:	b28a      	uxth	r2, r1
 8001a46:	18d4      	adds	r4, r2, r3
 8001a48:	9b05      	ldr	r3, [sp, #20]
 8001a4a:	441a      	add	r2, r3
 8001a4c:	b293      	uxth	r3, r2
 8001a4e:	b2a4      	uxth	r4, r4
 8001a50:	9303      	str	r3, [sp, #12]
				if((line & 0x80) == 0x80)
 8001a52:	063b      	lsls	r3, r7, #24
 8001a54:	d516      	bpl.n	8001a84 <lcdDrawChar+0xb0>
					lcdDrawPixel(x + j + xP, y + i, color);
 8001a56:	4652      	mov	r2, sl
					lcdDrawPixel(x + j + xP, y + i, bg);
 8001a58:	9901      	ldr	r1, [sp, #4]
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff fde2 	bl	8001624 <lcdDrawPixel>
 8001a60:	3401      	adds	r4, #1
			for(uint8_t j = 0; j < 8; j++)
 8001a62:	9b03      	ldr	r3, [sp, #12]
 8001a64:	b2a4      	uxth	r4, r4
				line <<= 1;
 8001a66:	007f      	lsls	r7, r7, #1
			for(uint8_t j = 0; j < 8; j++)
 8001a68:	42a3      	cmp	r3, r4
				line <<= 1;
 8001a6a:	b2ff      	uxtb	r7, r7
			for(uint8_t j = 0; j < 8; j++)
 8001a6c:	d1f1      	bne.n	8001a52 <lcdDrawChar+0x7e>
 8001a6e:	f108 0801 	add.w	r8, r8, #1
		for(uint8_t k = 0; k < fontCoeff; k++)
 8001a72:	9b00      	ldr	r3, [sp, #0]
 8001a74:	fa5f f088 	uxtb.w	r0, r8
 8001a78:	00c2      	lsls	r2, r0, #3
 8001a7a:	4283      	cmp	r3, r0
 8001a7c:	b2d1      	uxtb	r1, r2
 8001a7e:	d8d5      	bhi.n	8001a2c <lcdDrawChar+0x58>
 8001a80:	3501      	adds	r5, #1
 8001a82:	e7c9      	b.n	8001a18 <lcdDrawChar+0x44>
				else if (bg != color)
 8001a84:	45da      	cmp	sl, fp
 8001a86:	d0eb      	beq.n	8001a60 <lcdDrawChar+0x8c>
					lcdDrawPixel(x + j + xP, y + i, bg);
 8001a88:	465a      	mov	r2, fp
 8001a8a:	e7e5      	b.n	8001a58 <lcdDrawChar+0x84>
}
 8001a8c:	b007      	add	sp, #28
 8001a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a92:	bf00      	nop
 8001a94:	20000020 	.word	0x20000020
 8001a98:	20000010 	.word	0x20000010

08001a9c <lcdPrintf>:
{
 8001a9c:	b40f      	push	{r0, r1, r2, r3}
 8001a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	aa0c      	add	r2, sp, #48	; 0x30
	vsprintf(buf, fmt, lst);
 8001aa6:	4824      	ldr	r0, [pc, #144]	; (8001b38 <lcdPrintf+0x9c>)
{
 8001aa8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(lst, fmt);
 8001aac:	9203      	str	r2, [sp, #12]
	vsprintf(buf, fmt, lst);
 8001aae:	f002 f9a7 	bl	8003e00 <vsiprintf>
 8001ab2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8001b44 <lcdPrintf+0xa8>
 8001ab6:	4c21      	ldr	r4, [pc, #132]	; (8001b3c <lcdPrintf+0xa0>)
 8001ab8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001b48 <lcdPrintf+0xac>
 8001abc:	4e20      	ldr	r6, [pc, #128]	; (8001b40 <lcdPrintf+0xa4>)
	while (*p)
 8001abe:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8001ac2:	b922      	cbnz	r2, 8001ace <lcdPrintf+0x32>
}
 8001ac4:	b005      	add	sp, #20
 8001ac6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001aca:	b004      	add	sp, #16
 8001acc:	4770      	bx	lr
		if (*p == '\n')
 8001ace:	2a0a      	cmp	r2, #10
 8001ad0:	d106      	bne.n	8001ae0 <lcdPrintf+0x44>
			cursorXY.y += lcdFont.pFont->Height;
 8001ad2:	68b3      	ldr	r3, [r6, #8]
 8001ad4:	8862      	ldrh	r2, [r4, #2]
 8001ad6:	88db      	ldrh	r3, [r3, #6]
 8001ad8:	4413      	add	r3, r2
 8001ada:	8063      	strh	r3, [r4, #2]
				cursorXY.x = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e008      	b.n	8001af2 <lcdPrintf+0x56>
		else if (*p == '\r')
 8001ae0:	2a0d      	cmp	r2, #13
 8001ae2:	d007      	beq.n	8001af4 <lcdPrintf+0x58>
		else if (*p == '\t')
 8001ae4:	2a09      	cmp	r2, #9
 8001ae6:	d10d      	bne.n	8001b04 <lcdPrintf+0x68>
			cursorXY.x += lcdFont.pFont->Width * 4;
 8001ae8:	68b3      	ldr	r3, [r6, #8]
 8001aea:	889a      	ldrh	r2, [r3, #4]
 8001aec:	8823      	ldrh	r3, [r4, #0]
 8001aee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
				cursorXY.x = 0;
 8001af2:	8023      	strh	r3, [r4, #0]
		if (cursorXY.y >= lcdProperties.height)
 8001af4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8001af8:	8862      	ldrh	r2, [r4, #2]
 8001afa:	429a      	cmp	r2, r3
			cursorXY.y = 0;
 8001afc:	bf24      	itt	cs
 8001afe:	2300      	movcs	r3, #0
 8001b00:	8063      	strhcs	r3, [r4, #2]
 8001b02:	e7dc      	b.n	8001abe <lcdPrintf+0x22>
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8001b04:	8825      	ldrh	r5, [r4, #0]
 8001b06:	8867      	ldrh	r7, [r4, #2]
 8001b08:	88b1      	ldrh	r1, [r6, #4]
 8001b0a:	8833      	ldrh	r3, [r6, #0]
 8001b0c:	9100      	str	r1, [sp, #0]
 8001b0e:	b228      	sxth	r0, r5
 8001b10:	b239      	sxth	r1, r7
 8001b12:	f7ff ff5f 	bl	80019d4 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8001b16:	68b2      	ldr	r2, [r6, #8]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8001b18:	7b33      	ldrb	r3, [r6, #12]
			cursorXY.x += lcdFont.pFont->Width;
 8001b1a:	8891      	ldrh	r1, [r2, #4]
 8001b1c:	440d      	add	r5, r1
 8001b1e:	b2ad      	uxth	r5, r5
 8001b20:	8025      	strh	r5, [r4, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0e6      	beq.n	8001af4 <lcdPrintf+0x58>
 8001b26:	f8b9 3000 	ldrh.w	r3, [r9]
 8001b2a:	1a5b      	subs	r3, r3, r1
 8001b2c:	429d      	cmp	r5, r3
 8001b2e:	dde1      	ble.n	8001af4 <lcdPrintf+0x58>
				cursorXY.y += lcdFont.pFont->Height;
 8001b30:	88d3      	ldrh	r3, [r2, #6]
 8001b32:	441f      	add	r7, r3
 8001b34:	8067      	strh	r7, [r4, #2]
 8001b36:	e7d1      	b.n	8001adc <lcdPrintf+0x40>
 8001b38:	200000ac 	.word	0x200000ac
 8001b3c:	200001ac 	.word	0x200001ac
 8001b40:	20000010 	.word	0x20000010
 8001b44:	200000ab 	.word	0x200000ab
 8001b48:	20000020 	.word	0x20000020

08001b4c <lcdDrawHLine>:
	if (x1 < x0)
 8001b4c:	4281      	cmp	r1, r0
{
 8001b4e:	b570      	push	{r4, r5, r6, lr}
 8001b50:	461e      	mov	r6, r3
	if (x1 < x0)
 8001b52:	bf38      	it	cc
 8001b54:	4603      	movcc	r3, r0
{
 8001b56:	460d      	mov	r5, r1
	if (x1 < x0)
 8001b58:	bf38      	it	cc
 8001b5a:	461d      	movcc	r5, r3
	if (x1 >= lcdProperties.width)
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <lcdDrawHLine+0x48>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
{
 8001b60:	4604      	mov	r4, r0
	if (x1 < x0)
 8001b62:	bf38      	it	cc
 8001b64:	460c      	movcc	r4, r1
	if (x1 >= lcdProperties.width)
 8001b66:	429d      	cmp	r5, r3
		x1 = lcdProperties.width - 1;
 8001b68:	bf24      	itt	cs
 8001b6a:	f103 35ff 	addcs.w	r5, r3, #4294967295
 8001b6e:	b2ad      	uxthcs	r5, r5
	if (x0 >= lcdProperties.width)
 8001b70:	429c      	cmp	r4, r3
		x0 = lcdProperties.width - 1;
 8001b72:	bf24      	itt	cs
 8001b74:	f103 34ff 	addcs.w	r4, r3, #4294967295
 8001b78:	b2a4      	uxthcs	r4, r4
	lcdSetWindow(x0, y, x1, y);
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	462a      	mov	r2, r5
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff fd31 	bl	80015e8 <lcdSetWindow>
	LCD_DataWrite(data);
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <lcdDrawHLine+0x4c>)
	for (int line = x0; line <= x1; line++)
 8001b88:	42ac      	cmp	r4, r5
 8001b8a:	dd00      	ble.n	8001b8e <lcdDrawHLine+0x42>
}
 8001b8c:	bd70      	pop	{r4, r5, r6, pc}
	LCD_DataWrite(data);
 8001b8e:	801e      	strh	r6, [r3, #0]
	for (int line = x0; line <= x1; line++)
 8001b90:	3401      	adds	r4, #1
 8001b92:	e7f9      	b.n	8001b88 <lcdDrawHLine+0x3c>
 8001b94:	20000020 	.word	0x20000020
 8001b98:	60080000 	.word	0x60080000

08001b9c <lcdFillRect>:
{
 8001b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ba0:	461e      	mov	r6, r3
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <lcdFillRect+0x5c>)
{
 8001ba4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8001ba8:	881d      	ldrh	r5, [r3, #0]
 8001baa:	42a8      	cmp	r0, r5
 8001bac:	da16      	bge.n	8001bdc <lcdFillRect+0x40>
 8001bae:	885b      	ldrh	r3, [r3, #2]
 8001bb0:	4299      	cmp	r1, r3
 8001bb2:	460f      	mov	r7, r1
 8001bb4:	da12      	bge.n	8001bdc <lcdFillRect+0x40>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8001bb6:	1814      	adds	r4, r2, r0
 8001bb8:	42a5      	cmp	r5, r4
 8001bba:	bfb8      	it	lt
 8001bbc:	1a2a      	sublt	r2, r5, r0
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8001bbe:	eb06 0401 	add.w	r4, r6, r1
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8001bc2:	bfb8      	it	lt
 8001bc4:	b212      	sxthlt	r2, r2
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8001bc6:	42a3      	cmp	r3, r4
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8001bc8:	b284      	uxth	r4, r0
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8001bca:	bfb8      	it	lt
 8001bcc:	1a5e      	sublt	r6, r3, r1
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8001bce:	4422      	add	r2, r4
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8001bd0:	bfb8      	it	lt
 8001bd2:	b236      	sxthlt	r6, r6
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8001bd4:	b295      	uxth	r5, r2
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8001bd6:	19f3      	adds	r3, r6, r7
 8001bd8:	4299      	cmp	r1, r3
 8001bda:	dd01      	ble.n	8001be0 <lcdFillRect+0x44>
 8001bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8001be0:	fa1f f981 	uxth.w	r9, r1
 8001be4:	4643      	mov	r3, r8
 8001be6:	4629      	mov	r1, r5
 8001be8:	464a      	mov	r2, r9
 8001bea:	4620      	mov	r0, r4
 8001bec:	f7ff ffae 	bl	8001b4c <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8001bf0:	f109 0101 	add.w	r1, r9, #1
 8001bf4:	b209      	sxth	r1, r1
 8001bf6:	e7ee      	b.n	8001bd6 <lcdFillRect+0x3a>
 8001bf8:	20000020 	.word	0x20000020

08001bfc <lcdDrawVLine>:
  if (y1 < y0)
 8001bfc:	428a      	cmp	r2, r1
{
 8001bfe:	b570      	push	{r4, r5, r6, lr}
 8001c00:	461e      	mov	r6, r3
  if (y1 < y0)
 8001c02:	bf38      	it	cc
 8001c04:	460b      	movcc	r3, r1
{
 8001c06:	4615      	mov	r5, r2
  if (y1 < y0)
 8001c08:	bf38      	it	cc
 8001c0a:	461d      	movcc	r5, r3
  if (x >= lcdProperties.width)
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <lcdDrawVLine+0x54>)
{
 8001c0e:	460c      	mov	r4, r1
  if (y1 < y0)
 8001c10:	bf38      	it	cc
 8001c12:	4614      	movcc	r4, r2
  if (x >= lcdProperties.width)
 8001c14:	881a      	ldrh	r2, [r3, #0]
  if (y0 >= lcdProperties.height)
 8001c16:	885b      	ldrh	r3, [r3, #2]
  if (x >= lcdProperties.width)
 8001c18:	4282      	cmp	r2, r0
    x = lcdProperties.width - 1;
 8001c1a:	bf9c      	itt	ls
 8001c1c:	f102 32ff 	addls.w	r2, r2, #4294967295
 8001c20:	b290      	uxthls	r0, r2
  if (y0 >= lcdProperties.height)
 8001c22:	429c      	cmp	r4, r3
    y0 = lcdProperties.height - 1;
 8001c24:	bf24      	itt	cs
 8001c26:	f103 34ff 	addcs.w	r4, r3, #4294967295
 8001c2a:	b2a4      	uxthcs	r4, r4
  if (y1 >= lcdProperties.height)
 8001c2c:	429d      	cmp	r5, r3
    y1 = lcdProperties.height - 1;
 8001c2e:	bf24      	itt	cs
 8001c30:	f103 35ff 	addcs.w	r5, r3, #4294967295
 8001c34:	b2ad      	uxthcs	r5, r5
  lcdSetWindow(x, y0, x, y1);
 8001c36:	462b      	mov	r3, r5
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	f7ff fcd4 	bl	80015e8 <lcdSetWindow>
	LCD_DataWrite(data);
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <lcdDrawVLine+0x58>)
  for(int line = y0; line <= y1; line++)
 8001c42:	42ac      	cmp	r4, r5
 8001c44:	dd00      	ble.n	8001c48 <lcdDrawVLine+0x4c>
}
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
	LCD_DataWrite(data);
 8001c48:	801e      	strh	r6, [r3, #0]
  for(int line = y0; line <= y1; line++)
 8001c4a:	3401      	adds	r4, #1
 8001c4c:	e7f9      	b.n	8001c42 <lcdDrawVLine+0x46>
 8001c4e:	bf00      	nop
 8001c50:	20000020 	.word	0x20000020
 8001c54:	60080000 	.word	0x60080000

08001c58 <lcdDrawRoundRect>:
{
 8001c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c5c:	b085      	sub	sp, #20
	lcdDrawHLine(x + r, x + w - r, y, color);
 8001c5e:	fa1f fb80 	uxth.w	fp, r0
{
 8001c62:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8001c66:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
	lcdDrawHLine(x + r, x + w - r, y, color);
 8001c6a:	445a      	add	r2, fp
 8001c6c:	fa1f fa89 	uxth.w	sl, r9
{
 8001c70:	461c      	mov	r4, r3
	lcdDrawHLine(x + r, x + w - r, y, color);
 8001c72:	b293      	uxth	r3, r2
 8001c74:	b28d      	uxth	r5, r1
 8001c76:	eba3 060a 	sub.w	r6, r3, sl
 8001c7a:	eb0b 070a 	add.w	r7, fp, sl
 8001c7e:	b2bf      	uxth	r7, r7
 8001c80:	b2b6      	uxth	r6, r6
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 8001c82:	442c      	add	r4, r5
	lcdDrawHLine(x + r, x + w - r, y, color);
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	462a      	mov	r2, r5
 8001c88:	4643      	mov	r3, r8
 8001c8a:	4631      	mov	r1, r6
 8001c8c:	4638      	mov	r0, r7
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 8001c8e:	b2a4      	uxth	r4, r4
	lcdDrawHLine(x + r, x + w - r, y, color);
 8001c90:	f7ff ff5c 	bl	8001b4c <lcdDrawHLine>
	lcdDrawVLine(x, y + r, y + h - r, color);
 8001c94:	4455      	add	r5, sl
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 8001c96:	1e62      	subs	r2, r4, #1
	lcdDrawVLine(x, y + r, y + h - r, color);
 8001c98:	eba4 040a 	sub.w	r4, r4, sl
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	4631      	mov	r1, r6
 8001ca0:	4638      	mov	r0, r7
	lcdDrawVLine(x, y + r, y + h - r, color);
 8001ca2:	b2ad      	uxth	r5, r5
 8001ca4:	b2a4      	uxth	r4, r4
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 8001ca6:	b292      	uxth	r2, r2
 8001ca8:	f7ff ff50 	bl	8001b4c <lcdDrawHLine>
	lcdDrawVLine(x, y + r, y + h - r, color);
 8001cac:	4643      	mov	r3, r8
 8001cae:	4622      	mov	r2, r4
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	4658      	mov	r0, fp
 8001cb4:	f7ff ffa2 	bl	8001bfc <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y + r, y + h - r, color);
 8001cb8:	9b03      	ldr	r3, [sp, #12]
 8001cba:	1e58      	subs	r0, r3, #1
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	4643      	mov	r3, r8
 8001cc0:	4629      	mov	r1, r5
	lcdDrawCircleHelper(x + r, y + r, r, 1, color);
 8001cc2:	b23f      	sxth	r7, r7
 8001cc4:	b22d      	sxth	r5, r5
	lcdDrawVLine(x + w - 1, y + r, y + h - r, color);
 8001cc6:	b280      	uxth	r0, r0
	lcdDrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8001cc8:	3e01      	subs	r6, #1
	lcdDrawVLine(x + w - 1, y + r, y + h - r, color);
 8001cca:	f7ff ff97 	bl	8001bfc <lcdDrawVLine>
	lcdDrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8001cce:	b236      	sxth	r6, r6
	lcdDrawCircleHelper(x + r, y + r, r, 1, color);
 8001cd0:	464a      	mov	r2, r9
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	4638      	mov	r0, r7
 8001cd6:	f8cd 8000 	str.w	r8, [sp]
 8001cda:	2301      	movs	r3, #1
	lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8001cdc:	3c01      	subs	r4, #1
	lcdDrawCircleHelper(x + r, y + r, r, 1, color);
 8001cde:	f7ff fd31 	bl	8001744 <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8001ce2:	b224      	sxth	r4, r4
	lcdDrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8001ce4:	464a      	mov	r2, r9
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f8cd 8000 	str.w	r8, [sp]
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f7ff fd28 	bl	8001744 <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8001cf4:	464a      	mov	r2, r9
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	4630      	mov	r0, r6
 8001cfa:	f8cd 8000 	str.w	r8, [sp]
 8001cfe:	2304      	movs	r3, #4
 8001d00:	f7ff fd20 	bl	8001744 <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8001d04:	2308      	movs	r3, #8
 8001d06:	464a      	mov	r2, r9
 8001d08:	4621      	mov	r1, r4
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
}
 8001d10:	b005      	add	sp, #20
 8001d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lcdDrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8001d16:	f7ff bd15 	b.w	8001744 <lcdDrawCircleHelper>

08001d1a <lcdFillCircleHelper>:
{
 8001d1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	b28f      	uxth	r7, r1
 8001d22:	9304      	str	r3, [sp, #16]
	int16_t f = 1 - r;
 8001d24:	b293      	uxth	r3, r2
 8001d26:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 8001d2a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	9303      	str	r3, [sp, #12]
 8001d34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8001d38:	9302      	str	r3, [sp, #8]
 8001d3a:	1c9d      	adds	r5, r3, #2
	while (x < y)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9301      	str	r3, [sp, #4]
		if (cornername & 0x1)
 8001d40:	9b04      	ldr	r3, [sp, #16]
{
 8001d42:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8001d46:	443d      	add	r5, r7
		if (cornername & 0x1)
 8001d48:	f003 0301 	and.w	r3, r3, #1
{
 8001d4c:	4616      	mov	r6, r2
	int16_t f = 1 - r;
 8001d4e:	b224      	sxth	r4, r4
 8001d50:	b2ad      	uxth	r5, r5
		if (cornername & 0x1)
 8001d52:	9305      	str	r3, [sp, #20]
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8001d54:	fa1f fb80 	uxth.w	fp, r0
	while (x < y)
 8001d58:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8001d5c:	42b3      	cmp	r3, r6
 8001d5e:	db02      	blt.n	8001d66 <lcdFillCircleHelper+0x4c>
}
 8001d60:	b007      	add	sp, #28
 8001d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (f >= 0)
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	db08      	blt.n	8001d7c <lcdFillCircleHelper+0x62>
			ddF_y += 2;
 8001d6a:	9b03      	ldr	r3, [sp, #12]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	b29b      	uxth	r3, r3
			y--;
 8001d70:	3e01      	subs	r6, #1
			ddF_y += 2;
 8001d72:	b21a      	sxth	r2, r3
			f += ddF_y;
 8001d74:	441c      	add	r4, r3
			y--;
 8001d76:	b236      	sxth	r6, r6
			ddF_y += 2;
 8001d78:	9203      	str	r2, [sp, #12]
			f += ddF_y;
 8001d7a:	b224      	sxth	r4, r4
 8001d7c:	f8bd 9004 	ldrh.w	r9, [sp, #4]
		if (cornername & 0x1)
 8001d80:	9b05      	ldr	r3, [sp, #20]
		f += ddF_x;
 8001d82:	eb04 0449 	add.w	r4, r4, r9, lsl #1
 8001d86:	3403      	adds	r4, #3
 8001d88:	b224      	sxth	r4, r4
		if (cornername & 0x1)
 8001d8a:	b1db      	cbz	r3, 8001dc4 <lcdFillCircleHelper+0xaa>
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8001d8c:	9b02      	ldr	r3, [sp, #8]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	fa1f f886 	uxth.w	r8, r6
 8001d94:	443a      	add	r2, r7
 8001d96:	f10b 0001 	add.w	r0, fp, #1
 8001d9a:	4442      	add	r2, r8
 8001d9c:	eba7 0108 	sub.w	r1, r7, r8
 8001da0:	4448      	add	r0, r9
 8001da2:	4653      	mov	r3, sl
 8001da4:	b292      	uxth	r2, r2
 8001da6:	b289      	uxth	r1, r1
 8001da8:	b280      	uxth	r0, r0
 8001daa:	f7ff ff27 	bl	8001bfc <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8001dae:	1e79      	subs	r1, r7, #1
 8001db0:	eba1 0109 	sub.w	r1, r1, r9
 8001db4:	eb0b 0008 	add.w	r0, fp, r8
 8001db8:	4653      	mov	r3, sl
 8001dba:	462a      	mov	r2, r5
 8001dbc:	b289      	uxth	r1, r1
 8001dbe:	b280      	uxth	r0, r0
 8001dc0:	f7ff ff1c 	bl	8001bfc <lcdDrawVLine>
		if (cornername & 0x2)
 8001dc4:	9b04      	ldr	r3, [sp, #16]
 8001dc6:	079b      	lsls	r3, r3, #30
 8001dc8:	d51c      	bpl.n	8001e04 <lcdFillCircleHelper+0xea>
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 8001dca:	9b02      	ldr	r3, [sp, #8]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	fa1f f886 	uxth.w	r8, r6
 8001dd2:	443a      	add	r2, r7
 8001dd4:	f10b 30ff 	add.w	r0, fp, #4294967295
 8001dd8:	4442      	add	r2, r8
 8001dda:	eba7 0108 	sub.w	r1, r7, r8
 8001dde:	eba0 0009 	sub.w	r0, r0, r9
 8001de2:	4653      	mov	r3, sl
 8001de4:	b292      	uxth	r2, r2
 8001de6:	b289      	uxth	r1, r1
 8001de8:	b280      	uxth	r0, r0
 8001dea:	f7ff ff07 	bl	8001bfc <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 8001dee:	1e79      	subs	r1, r7, #1
 8001df0:	eba1 0109 	sub.w	r1, r1, r9
 8001df4:	ebab 0008 	sub.w	r0, fp, r8
 8001df8:	4653      	mov	r3, sl
 8001dfa:	462a      	mov	r2, r5
 8001dfc:	b289      	uxth	r1, r1
 8001dfe:	b280      	uxth	r0, r0
 8001e00:	f7ff fefc 	bl	8001bfc <lcdDrawVLine>
 8001e04:	9b01      	ldr	r3, [sp, #4]
 8001e06:	3501      	adds	r5, #1
 8001e08:	3301      	adds	r3, #1
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	b2ad      	uxth	r5, r5
 8001e0e:	e7a3      	b.n	8001d58 <lcdFillCircleHelper+0x3e>

08001e10 <lcdFillCircle>:
{
 8001e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e12:	4604      	mov	r4, r0
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8001e14:	b290      	uxth	r0, r2
{
 8001e16:	460d      	mov	r5, r1
 8001e18:	4616      	mov	r6, r2
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8001e1a:	b289      	uxth	r1, r1
 8001e1c:	1c42      	adds	r2, r0, #1
 8001e1e:	440a      	add	r2, r1
 8001e20:	1a09      	subs	r1, r1, r0
 8001e22:	b292      	uxth	r2, r2
 8001e24:	b2a0      	uxth	r0, r4
 8001e26:	b289      	uxth	r1, r1
{
 8001e28:	461f      	mov	r7, r3
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8001e2a:	f7ff fee7 	bl	8001bfc <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	9701      	str	r7, [sp, #4]
 8001e34:	2303      	movs	r3, #3
 8001e36:	4632      	mov	r2, r6
 8001e38:	4629      	mov	r1, r5
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff ff6d 	bl	8001d1a <lcdFillCircleHelper>
}
 8001e40:	b003      	add	sp, #12
 8001e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e44 <lcdSetOrientation>:
	lcdProperties.orientation = value;
 8001e44:	4a15      	ldr	r2, [pc, #84]	; (8001e9c <lcdSetOrientation+0x58>)
	LCD_CmdWrite(command);
 8001e46:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001e4a:	2136      	movs	r1, #54	; 0x36
	lcdProperties.orientation = value;
 8001e4c:	7110      	strb	r0, [r2, #4]
	LCD_CmdWrite(command);
 8001e4e:	8019      	strh	r1, [r3, #0]
	switch (lcdProperties.orientation)
 8001e50:	2803      	cmp	r0, #3
 8001e52:	d80c      	bhi.n	8001e6e <lcdSetOrientation+0x2a>
 8001e54:	e8df f000 	tbb	[pc, r0]
 8001e58:	20151702 	.word	0x20151702
			lcdWriteData(lcdPortraitConfig);
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <lcdSetOrientation+0x5c>)
			lcdWriteData(lcdPortraitMirrorConfig);
 8001e5e:	7819      	ldrb	r1, [r3, #0]
	LCD_DataWrite(data);
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <lcdSetOrientation+0x60>)
 8001e62:	8019      	strh	r1, [r3, #0]
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001e64:	23f0      	movs	r3, #240	; 0xf0
 8001e66:	8013      	strh	r3, [r2, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8001e68:	f44f 73a0 	mov.w	r3, #320	; 0x140
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001e6c:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001e6e:	8853      	ldrh	r3, [r2, #2]
 8001e70:	8812      	ldrh	r2, [r2, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	3a01      	subs	r2, #1
 8001e76:	2100      	movs	r1, #0
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	f7ff bbb3 	b.w	80015e8 <lcdSetWindow>
			lcdWriteData(lcdPortraitMirrorConfig);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <lcdSetOrientation+0x64>)
 8001e84:	e7eb      	b.n	8001e5e <lcdSetOrientation+0x1a>
			lcdWriteData(lcdLandscapeConfig);
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <lcdSetOrientation+0x68>)
			lcdWriteData(lcdLandscapeMirrorConfig);
 8001e88:	7819      	ldrb	r1, [r3, #0]
	LCD_DataWrite(data);
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <lcdSetOrientation+0x60>)
 8001e8c:	8019      	strh	r1, [r3, #0]
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001e8e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e92:	8013      	strh	r3, [r2, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001e94:	23f0      	movs	r3, #240	; 0xf0
 8001e96:	e7e9      	b.n	8001e6c <lcdSetOrientation+0x28>
			lcdWriteData(lcdLandscapeMirrorConfig);
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <lcdSetOrientation+0x6c>)
 8001e9a:	e7f5      	b.n	8001e88 <lcdSetOrientation+0x44>
 8001e9c:	20000020 	.word	0x20000020
 8001ea0:	200001b2 	.word	0x200001b2
 8001ea4:	60080000 	.word	0x60080000
 8001ea8:	200001b3 	.word	0x200001b3
 8001eac:	200001b0 	.word	0x200001b0
 8001eb0:	200001b1 	.word	0x200001b1

08001eb4 <lcdSetCursor>:
{
 8001eb4:	b410      	push	{r4}
	cursorXY.x = x;
 8001eb6:	4c04      	ldr	r4, [pc, #16]	; (8001ec8 <lcdSetCursor+0x14>)
{
 8001eb8:	4602      	mov	r2, r0
	cursorXY.x = x;
 8001eba:	8020      	strh	r0, [r4, #0]
	cursorXY.y = y;
 8001ebc:	8061      	strh	r1, [r4, #2]
{
 8001ebe:	460b      	mov	r3, r1
}
 8001ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
	lcdSetWindow(x, y, x, y);
 8001ec4:	f7ff bb90 	b.w	80015e8 <lcdSetWindow>
 8001ec8:	200001ac 	.word	0x200001ac

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b510      	push	{r4, lr}
 8001ece:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed0:	2230      	movs	r2, #48	; 0x30
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	a808      	add	r0, sp, #32
 8001ed6:	f001 ff4f 	bl	8003d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eda:	2100      	movs	r1, #0
 8001edc:	2214      	movs	r2, #20
 8001ede:	a803      	add	r0, sp, #12
 8001ee0:	f001 ff4a 	bl	8003d78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	2400      	movs	r4, #0
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <SystemClock_Config+0x80>)
 8001ee8:	9401      	str	r4, [sp, #4]
 8001eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <SystemClock_Config+0x84>)
 8001efe:	9402      	str	r4, [sp, #8]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f0a:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f10:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f12:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f14:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f16:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f18:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f1a:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f1c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f1e:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f20:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f22:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f24:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001f26:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f28:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001f2c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f2e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f30:	f7fe fcd8 	bl	80008e4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f34:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f36:	4621      	mov	r1, r4
 8001f38:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f3c:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f40:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f42:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f44:	f7fe fea2 	bl	8000c8c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001f48:	b014      	add	sp, #80	; 0x50
 8001f4a:	bd10      	pop	{r4, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000

08001f54 <main>:
{
 8001f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f58:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001f5a:	f7fe fb35 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 8001f5e:	f7ff ffb5 	bl	8001ecc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	2214      	movs	r2, #20
 8001f64:	2100      	movs	r1, #0
 8001f66:	a807      	add	r0, sp, #28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f68:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6a:	f001 ff05 	bl	8003d78 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f6e:	4ba4      	ldr	r3, [pc, #656]	; (8002200 <main+0x2ac>)
 8001f70:	9402      	str	r4, [sp, #8]
 8001f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001f74:	48a3      	ldr	r0, [pc, #652]	; (8002204 <main+0x2b0>)
  hspi2.Instance = SPI2;
 8001f76:	4da4      	ldr	r5, [pc, #656]	; (8002208 <main+0x2b4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f78:	f042 0210 	orr.w	r2, r2, #16
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f80:	f002 0210 	and.w	r2, r2, #16
 8001f84:	9202      	str	r2, [sp, #8]
 8001f86:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	9403      	str	r4, [sp, #12]
 8001f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
 8001f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f94:	f002 0201 	and.w	r2, r2, #1
 8001f98:	9203      	str	r2, [sp, #12]
 8001f9a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9c:	9404      	str	r4, [sp, #16]
 8001f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa0:	f042 0204 	orr.w	r2, r2, #4
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa8:	f002 0204 	and.w	r2, r2, #4
 8001fac:	9204      	str	r2, [sp, #16]
 8001fae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb0:	9405      	str	r4, [sp, #20]
 8001fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb4:	f042 0202 	orr.w	r2, r2, #2
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8001fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbc:	f002 0202 	and.w	r2, r2, #2
 8001fc0:	9205      	str	r2, [sp, #20]
 8001fc2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc4:	9406      	str	r4, [sp, #24]
 8001fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc8:	f042 0208 	orr.w	r2, r2, #8
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001fd6:	4622      	mov	r2, r4
 8001fd8:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fda:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001fdc:	f7fe fc76 	bl	80008cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001fe0:	4622      	mov	r2, r4
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	4889      	ldr	r0, [pc, #548]	; (800220c <main+0x2b8>)
 8001fe6:	f7fe fc71 	bl	80008cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001fea:	2201      	movs	r2, #1
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	4886      	ldr	r0, [pc, #536]	; (800220c <main+0x2b8>)
 8001ff2:	f7fe fc6b 	bl	80008cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_BUTTON_Pin LEFT_BUTTON_Pin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_Pin|LEFT_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff6:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = RIGHT_BUTTON_Pin|LEFT_BUTTON_Pin;
 8001ff8:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffa:	a907      	add	r1, sp, #28
 8001ffc:	4884      	ldr	r0, [pc, #528]	; (8002210 <main+0x2bc>)
  GPIO_InitStruct.Pin = RIGHT_BUTTON_Pin|LEFT_BUTTON_Pin;
 8001ffe:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pin : SWAP_BUTTON_Pin */
  GPIO_InitStruct.Pin = SWAP_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002000:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002002:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002006:	f7fe fb7b 	bl	8000700 <HAL_GPIO_Init>
  HAL_GPIO_Init(SWAP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800200a:	a907      	add	r1, sp, #28
 800200c:	487d      	ldr	r0, [pc, #500]	; (8002204 <main+0x2b0>)
  GPIO_InitStruct.Pin = SWAP_BUTTON_Pin;
 800200e:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002010:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002012:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SWAP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002014:	f7fe fb74 	bl	8000700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002018:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	a907      	add	r1, sp, #28
 800201c:	4879      	ldr	r0, [pc, #484]	; (8002204 <main+0x2b0>)
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800201e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002020:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f7fe fb6b 	bl	8000700 <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_PEN_Pin */
  GPIO_InitStruct.Pin = TC_PEN_Pin;
 800202a:	2320      	movs	r3, #32
 800202c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 800202e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002030:	4b78      	ldr	r3, [pc, #480]	; (8002214 <main+0x2c0>)
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 8002032:	4879      	ldr	r0, [pc, #484]	; (8002218 <main+0x2c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002034:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 8002038:	f7fe fb62 	bl	8000700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|TOUCH_CS_Pin;
 800203c:	f241 0302 	movw	r3, #4098	; 0x1002
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	a907      	add	r1, sp, #28
 8002042:	4872      	ldr	r0, [pc, #456]	; (800220c <main+0x2b8>)
  GPIO_InitStruct.Pin = LCD_BL_Pin|TOUCH_CS_Pin;
 8002044:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f7fe fb58 	bl	8000700 <HAL_GPIO_Init>

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002050:	221c      	movs	r2, #28
 8002052:	4621      	mov	r1, r4
 8002054:	eb0d 0002 	add.w	r0, sp, r2
 8002058:	f001 fe8e 	bl	8003d78 <memset>

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800205c:	486f      	ldr	r0, [pc, #444]	; (800221c <main+0x2c8>)
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
  /* Timing */
  Timing.AddressSetupTime = 1;
 800205e:	9607      	str	r6, [sp, #28]
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002060:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002064:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002066:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800206a:	6043      	str	r3, [r0, #4]
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800206c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002070:	6283      	str	r3, [r0, #40]	; 0x28
  Timing.AddressHoldTime = 15;
 8002072:	230f      	movs	r3, #15
 8002074:	9308      	str	r3, [sp, #32]
  Timing.DataSetupTime = 5;
 8002076:	2305      	movs	r3, #5
  Timing.CLKDivision = 16;
  Timing.DataLatency = 17;
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002078:	a907      	add	r1, sp, #28
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800207a:	f04f 0810 	mov.w	r8, #16
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800207e:	4622      	mov	r2, r4
  Timing.DataSetupTime = 5;
 8002080:	9309      	str	r3, [sp, #36]	; 0x24
  Timing.DataLatency = 17;
 8002082:	2311      	movs	r3, #17
 8002084:	930c      	str	r3, [sp, #48]	; 0x30
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002086:	6084      	str	r4, [r0, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002088:	60c4      	str	r4, [r0, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800208a:	6104      	str	r4, [r0, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800208c:	f8c0 8014 	str.w	r8, [r0, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002090:	6184      	str	r4, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002092:	61c4      	str	r4, [r0, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002094:	6204      	str	r4, [r0, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002096:	6244      	str	r4, [r0, #36]	; 0x24
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002098:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800209a:	6304      	str	r4, [r0, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800209c:	6344      	str	r4, [r0, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800209e:	6384      	str	r4, [r0, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80020a0:	6444      	str	r4, [r0, #68]	; 0x44
  Timing.CLKDivision = 16;
 80020a2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80020a6:	f7ff f912 	bl	80012ce <HAL_SRAM_Init>
  hrng.Instance = RNG;
 80020aa:	485d      	ldr	r0, [pc, #372]	; (8002220 <main+0x2cc>)
 80020ac:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <main+0x2d0>)
 80020ae:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80020b0:	f7fe fe88 	bl	8000dc4 <HAL_RNG_Init>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020b4:	4a5c      	ldr	r2, [pc, #368]	; (8002228 <main+0x2d4>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020b6:	60ac      	str	r4, [r5, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020b8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80020bc:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80020c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020c4:	60eb      	str	r3, [r5, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ca:	61ab      	str	r3, [r5, #24]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020cc:	4628      	mov	r0, r5
  hspi2.Init.CRCPolynomial = 10;
 80020ce:	230a      	movs	r3, #10
 80020d0:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d2:	612c      	str	r4, [r5, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020d4:	616c      	str	r4, [r5, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80020d6:	f8c5 801c 	str.w	r8, [r5, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020da:	622c      	str	r4, [r5, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020dc:	626c      	str	r4, [r5, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020de:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020e0:	f7fe ff20 	bl	8000f24 <HAL_SPI_Init>
  LCD_BL_ON();
 80020e4:	4632      	mov	r2, r6
 80020e6:	4639      	mov	r1, r7
 80020e8:	4848      	ldr	r0, [pc, #288]	; (800220c <main+0x2b8>)
 80020ea:	f7fe fbef 	bl	80008cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80020ee:	4632      	mov	r2, r6
 80020f0:	2140      	movs	r1, #64	; 0x40
 80020f2:	4844      	ldr	r0, [pc, #272]	; (8002204 <main+0x2b0>)
    	uint8_t right = !HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port,RIGHT_BUTTON_Pin);
 80020f4:	4e46      	ldr	r6, [pc, #280]	; (8002210 <main+0x2bc>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80020f6:	f7fe fbe9 	bl	80008cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80020fa:	4622      	mov	r2, r4
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	4841      	ldr	r0, [pc, #260]	; (8002204 <main+0x2b0>)
 8002100:	f7fe fbe4 	bl	80008cc <HAL_GPIO_WritePin>
  lcdInit();
 8002104:	f7ff f976 	bl	80013f4 <lcdInit>
  lcdSetOrientation(LCD_ORIENTATION_PORTRAIT_MIRROR);
 8002108:	4638      	mov	r0, r7
 800210a:	f7ff fe9b 	bl	8001e44 <lcdSetOrientation>
  xpt2046_spi(&hspi2);
 800210e:	4628      	mov	r0, r5
 8002110:	f001 fca2 	bl	8003a58 <xpt2046_spi>
  xpt2046_init();
 8002114:	f001 fc1a 	bl	800394c <xpt2046_init>
  xpt2046_orientation(XPT2046_ORIENTATION_PORTRAIT_MIRROR);
 8002118:	4638      	mov	r0, r7
 800211a:	f001 fbe9 	bl	80038f0 <xpt2046_orientation>
  xpt2046_set_size(XPT2046_WIDTH, XPT2046_HEIGHT);
 800211e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002122:	20f0      	movs	r0, #240	; 0xf0
 8002124:	f001 fbea 	bl	80038fc <xpt2046_set_size>
  startGame();
 8002128:	f000 fff0 	bl	800310c <startGame>
    		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 800212c:	4d35      	ldr	r5, [pc, #212]	; (8002204 <main+0x2b0>)
    	readSignals(swap,right,left,0);
 800212e:	4627      	mov	r7, r4
    	if(start + 1000 < HAL_GetTick()){
 8002130:	f7fe fa70 	bl	8000614 <HAL_GetTick>
 8002134:	f504 737a 	add.w	r3, r4, #1000	; 0x3e8
 8002138:	4283      	cmp	r3, r0
 800213a:	d20a      	bcs.n	8002152 <main+0x1fe>
    		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 800213c:	2140      	movs	r1, #64	; 0x40
 800213e:	4628      	mov	r0, r5
 8002140:	f7fe fbc9 	bl	80008d6 <HAL_GPIO_TogglePin>
    	   	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	4628      	mov	r0, r5
 8002148:	f7fe fbc5 	bl	80008d6 <HAL_GPIO_TogglePin>
    	   	start = HAL_GetTick();
 800214c:	f7fe fa62 	bl	8000614 <HAL_GetTick>
 8002150:	4604      	mov	r4, r0
    	runGame();
 8002152:	f001 f883 	bl	800325c <runGame>
    	uint8_t swap = HAL_GPIO_ReadPin(SWAP_BUTTON_GPIO_Port,SWAP_BUTTON_Pin);
 8002156:	2101      	movs	r1, #1
 8002158:	4628      	mov	r0, r5
 800215a:	f7fe fbb1 	bl	80008c0 <HAL_GPIO_ReadPin>
    	uint8_t right = !HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port,RIGHT_BUTTON_Pin);
 800215e:	2108      	movs	r1, #8
    	uint8_t swap = HAL_GPIO_ReadPin(SWAP_BUTTON_GPIO_Port,SWAP_BUTTON_Pin);
 8002160:	4680      	mov	r8, r0
    	uint8_t right = !HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port,RIGHT_BUTTON_Pin);
 8002162:	4630      	mov	r0, r6
 8002164:	f7fe fbac 	bl	80008c0 <HAL_GPIO_ReadPin>
    	uint8_t left = !HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port,LEFT_BUTTON_Pin);
 8002168:	2110      	movs	r1, #16
    	uint8_t right = !HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port,RIGHT_BUTTON_Pin);
 800216a:	4681      	mov	r9, r0
    	uint8_t left = !HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port,LEFT_BUTTON_Pin);
 800216c:	4630      	mov	r0, r6
 800216e:	f7fe fba7 	bl	80008c0 <HAL_GPIO_ReadPin>
    	readSignals(swap,right,left,0);
 8002172:	fab9 f189 	clz	r1, r9
 8002176:	fab0 f280 	clz	r2, r0
 800217a:	2300      	movs	r3, #0
 800217c:	0952      	lsrs	r2, r2, #5
 800217e:	0949      	lsrs	r1, r1, #5
 8002180:	4640      	mov	r0, r8
 8002182:	f000 fd57 	bl	8002c34 <readSignals>
    	uint16_t x = 0,y = 0;
 8002186:	a90e      	add	r1, sp, #56	; 0x38
    	xpt2046_read_position(&x,&y);
 8002188:	a801      	add	r0, sp, #4
    	uint16_t x = 0,y = 0;
 800218a:	f821 7d32 	strh.w	r7, [r1, #-50]!
 800218e:	f8ad 7004 	strh.w	r7, [sp, #4]
    	xpt2046_read_position(&x,&y);
 8002192:	f001 fd89 	bl	8003ca8 <xpt2046_read_position>
    	if(x> 0 && y > 0)
 8002196:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800219a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800219e:	b358      	cbz	r0, 80021f8 <main+0x2a4>
 80021a0:	b351      	cbz	r1, 80021f8 <main+0x2a4>
    		readTouch(x,y,1);
 80021a2:	2201      	movs	r2, #1
 80021a4:	f001 f9be 	bl	8003524 <readTouch>
    		sprintf(coortinates,"X:%06i",x);
 80021a8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80021ac:	491f      	ldr	r1, [pc, #124]	; (800222c <main+0x2d8>)
 80021ae:	a807      	add	r0, sp, #28
 80021b0:	f001 fdea 	bl	8003d88 <siprintf>
			lcdSetCursor(180,200);
 80021b4:	21c8      	movs	r1, #200	; 0xc8
 80021b6:	20b4      	movs	r0, #180	; 0xb4
 80021b8:	f7ff fe7c 	bl	8001eb4 <lcdSetCursor>
			lcdPrintf(coortinates);
 80021bc:	a807      	add	r0, sp, #28
 80021be:	f7ff fc6d 	bl	8001a9c <lcdPrintf>
			sprintf(coortinates,"Y:%06i",y);
 80021c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80021c6:	491a      	ldr	r1, [pc, #104]	; (8002230 <main+0x2dc>)
 80021c8:	a807      	add	r0, sp, #28
 80021ca:	f001 fddd 	bl	8003d88 <siprintf>
			lcdSetCursor(180,215);
 80021ce:	21d7      	movs	r1, #215	; 0xd7
 80021d0:	20b4      	movs	r0, #180	; 0xb4
 80021d2:	f7ff fe6f 	bl	8001eb4 <lcdSetCursor>
			lcdPrintf(coortinates);
 80021d6:	a807      	add	r0, sp, #28
 80021d8:	f7ff fc60 	bl	8001a9c <lcdPrintf>
			sprintf(coortinates,"Z:%06i",ts_Coordinates.z);
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <main+0x2e0>)
 80021de:	4916      	ldr	r1, [pc, #88]	; (8002238 <main+0x2e4>)
 80021e0:	889a      	ldrh	r2, [r3, #4]
 80021e2:	a807      	add	r0, sp, #28
 80021e4:	f001 fdd0 	bl	8003d88 <siprintf>
			lcdSetCursor(180,230);
 80021e8:	21e6      	movs	r1, #230	; 0xe6
 80021ea:	20b4      	movs	r0, #180	; 0xb4
 80021ec:	f7ff fe62 	bl	8001eb4 <lcdSetCursor>
			lcdPrintf(coortinates);
 80021f0:	a807      	add	r0, sp, #28
 80021f2:	f7ff fc53 	bl	8001a9c <lcdPrintf>
 80021f6:	e79b      	b.n	8002130 <main+0x1dc>
    		readTouch(x,y,0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	f001 f993 	bl	8003524 <readTouch>
    {
 80021fe:	e797      	b.n	8002130 <main+0x1dc>
 8002200:	40023800 	.word	0x40023800
 8002204:	40020000 	.word	0x40020000
 8002208:	200001cc 	.word	0x200001cc
 800220c:	40020400 	.word	0x40020400
 8002210:	40021000 	.word	0x40021000
 8002214:	10110000 	.word	0x10110000
 8002218:	40020800 	.word	0x40020800
 800221c:	20000240 	.word	0x20000240
 8002220:	20000480 	.word	0x20000480
 8002224:	50060800 	.word	0x50060800
 8002228:	40003800 	.word	0x40003800
 800222c:	08004a94 	.word	0x08004a94
 8002230:	08004a9b 	.word	0x08004a9b
 8002234:	200002a4 	.word	0x200002a4
 8002238:	08004aa2 	.word	0x08004aa2

0800223c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800223c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_MspInit+0x34>)
 8002240:	2100      	movs	r1, #0
 8002242:	9100      	str	r1, [sp, #0]
 8002244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
 800224c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800224e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	9101      	str	r1, [sp, #4]
 8002258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800225e:	641a      	str	r2, [r3, #64]	; 0x40
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226a:	b002      	add	sp, #8
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8002274:	6802      	ldr	r2, [r0, #0]
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_RNG_MspInit+0x28>)
 8002278:	429a      	cmp	r2, r3
{
 800227a:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 800227c:	d10b      	bne.n	8002296 <HAL_RNG_MspInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_RNG_MspInit+0x2c>)
 8002284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002296:	b002      	add	sp, #8
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	50060800 	.word	0x50060800
 80022a0:	40023800 	.word	0x40023800

080022a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a4:	b510      	push	{r4, lr}
 80022a6:	4604      	mov	r4, r0
 80022a8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	2214      	movs	r2, #20
 80022ac:	2100      	movs	r1, #0
 80022ae:	a803      	add	r0, sp, #12
 80022b0:	f001 fd62 	bl	8003d78 <memset>
  if(hspi->Instance==SPI2)
 80022b4:	6822      	ldr	r2, [r4, #0]
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_SPI_MspInit+0x64>)
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d123      	bne.n	8002304 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022bc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80022c0:	2100      	movs	r1, #0
 80022c2:	9101      	str	r1, [sp, #4]
 80022c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c6:	4811      	ldr	r0, [pc, #68]	; (800230c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
 80022ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022d4:	9201      	str	r2, [sp, #4]
 80022d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d8:	9102      	str	r1, [sp, #8]
 80022da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022dc:	f042 0202 	orr.w	r2, r2, #2
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022fc:	2305      	movs	r3, #5
 80022fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f7fe f9fe 	bl	8000700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002304:	b008      	add	sp, #32
 8002306:	bd10      	pop	{r4, pc}
 8002308:	40003800 	.word	0x40003800
 800230c:	40020400 	.word	0x40020400

08002310 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002314:	2214      	movs	r2, #20
 8002316:	2100      	movs	r1, #0
 8002318:	a801      	add	r0, sp, #4
 800231a:	f001 fd2d 	bl	8003d78 <memset>
  if (FSMC_Initialized) {
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_SRAM_MspInit+0x64>)
 8002320:	681c      	ldr	r4, [r3, #0]
 8002322:	bb24      	cbnz	r4, 800236e <HAL_SRAM_MspInit+0x5e>
  FSMC_Initialized = 1;
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_SRAM_MspInit+0x68>)
 800232a:	9400      	str	r4, [sp, #0]
 800232c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800232e:	4813      	ldr	r0, [pc, #76]	; (800237c <HAL_SRAM_MspInit+0x6c>)
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002342:	f64f 7380 	movw	r3, #65408	; 0xff80
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002346:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002348:	250c      	movs	r5, #12
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800234a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800234c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002352:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002354:	f7fe f9d4 	bl	8000700 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8002358:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235c:	a901      	add	r1, sp, #4
 800235e:	4808      	ldr	r0, [pc, #32]	; (8002380 <HAL_SRAM_MspInit+0x70>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8002360:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002368:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236a:	f7fe f9c9 	bl	8000700 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800236e:	b007      	add	sp, #28
 8002370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002372:	bf00      	nop
 8002374:	200001b4 	.word	0x200001b4
 8002378:	40023800 	.word	0x40023800
 800237c:	40021000 	.word	0x40021000
 8002380:	40020c00 	.word	0x40020c00

08002384 <NMI_Handler>:
 8002384:	4770      	bx	lr

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	e7fe      	b.n	8002386 <HardFault_Handler>

08002388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	e7fe      	b.n	800238a <BusFault_Handler>

0800238c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800238c:	e7fe      	b.n	800238c <UsageFault_Handler>

0800238e <SVC_Handler>:
 800238e:	4770      	bx	lr

08002390 <DebugMon_Handler>:
 8002390:	4770      	bx	lr

08002392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002392:	4770      	bx	lr

08002394 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002394:	f7fe b932 	b.w	80005fc <HAL_IncTick>

08002398 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002398:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <_sbrk+0x2c>)
 800239c:	6819      	ldr	r1, [r3, #0]
{
 800239e:	4602      	mov	r2, r0
	if (heap_end == 0)
 80023a0:	b909      	cbnz	r1, 80023a6 <_sbrk+0xe>
		heap_end = &end;
 80023a2:	4909      	ldr	r1, [pc, #36]	; (80023c8 <_sbrk+0x30>)
 80023a4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80023a6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80023a8:	4669      	mov	r1, sp
 80023aa:	4402      	add	r2, r0
 80023ac:	428a      	cmp	r2, r1
 80023ae:	d906      	bls.n	80023be <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80023b0:	f001 fcb8 	bl	8003d24 <__errno>
 80023b4:	230c      	movs	r3, #12
 80023b6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80023be:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80023c0:	bd08      	pop	{r3, pc}
 80023c2:	bf00      	nop
 80023c4:	200001b8 	.word	0x200001b8
 80023c8:	200004b0 	.word	0x200004b0

080023cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <SystemInit+0x18>)
 80023ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80023d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <drawBlock>:
#include "tetris_blocks.h"


void drawBlock(tetrisBlockPropertiesTypeDef block)
{
 80023e8:	b084      	sub	sp, #16
 80023ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023ec:	ac08      	add	r4, sp, #32
 80023ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023f2:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
	int x = block.pos.x ;
 80023f6:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 80023fa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	int x1 =  x+block.psize;
	int y =  block.pos.y;
	int y1 =  block.pos.y + block.psize;

	lcdFillRect(x,block.pos.y,block.psize,block.psize,block.blockColor);
 80023fe:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8002402:	9200      	str	r2, [sp, #0]
	int x1 =  x+block.psize;
 8002404:	18fc      	adds	r4, r7, r3
	int y1 =  block.pos.y + block.psize;
 8002406:	18ee      	adds	r6, r5, r3
	lcdFillRect(x,block.pos.y,block.psize,block.psize,block.blockColor);
 8002408:	b21b      	sxth	r3, r3
	lcdDrawHLine(x,x+block.psize,y,COLOR_WHITE);
 800240a:	b2a4      	uxth	r4, r4
	lcdFillRect(x,block.pos.y,block.psize,block.psize,block.blockColor);
 800240c:	461a      	mov	r2, r3
 800240e:	b229      	sxth	r1, r5
 8002410:	b238      	sxth	r0, r7
 8002412:	f7ff fbc3 	bl	8001b9c <lcdFillRect>
	lcdDrawHLine(x,x+block.psize,y1,COLOR_WHITE);
 8002416:	b2b6      	uxth	r6, r6
	lcdDrawHLine(x,x+block.psize,y,COLOR_WHITE);
 8002418:	462a      	mov	r2, r5
 800241a:	4621      	mov	r1, r4
 800241c:	4638      	mov	r0, r7
 800241e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002422:	f7ff fb93 	bl	8001b4c <lcdDrawHLine>
	lcdDrawHLine(x,x+block.psize,y1,COLOR_WHITE);
 8002426:	4632      	mov	r2, r6
 8002428:	4621      	mov	r1, r4
 800242a:	4638      	mov	r0, r7
 800242c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002430:	f7ff fb8c 	bl	8001b4c <lcdDrawHLine>
	lcdDrawVLine(x,y,y1,COLOR_WHITE);
 8002434:	4632      	mov	r2, r6
 8002436:	4629      	mov	r1, r5
 8002438:	4638      	mov	r0, r7
 800243a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243e:	f7ff fbdd 	bl	8001bfc <lcdDrawVLine>
	lcdDrawVLine(x1,y,y1,COLOR_WHITE);
 8002442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002446:	4632      	mov	r2, r6
 8002448:	4629      	mov	r1, r5
 800244a:	4620      	mov	r0, r4
}
 800244c:	b003      	add	sp, #12
 800244e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002452:	b004      	add	sp, #16
	lcdDrawVLine(x1,y,y1,COLOR_WHITE);
 8002454:	f7ff bbd2 	b.w	8001bfc <lcdDrawVLine>

08002458 <drawTetrisBlock>:
	lcdDrawVLine(x,y,y1,COLOR_WHITE);
	lcdDrawVLine(x1,y,y1,COLOR_WHITE);
}


void drawTetrisBlock(tetrisBlockPropertiesTypeDef block){
 8002458:	b084      	sub	sp, #16
 800245a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800245e:	b087      	sub	sp, #28
 8002460:	ac10      	add	r4, sp, #64	; 0x40
 8002462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002466:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
 800246a:	f10b 0301 	add.w	r3, fp, #1
 800246e:	9303      	str	r3, [sp, #12]
		for(int c = 0; c < 5; c++)
		{
			if(block.shape.shape[r][c] == 1)
			{

				x = block.pos.x + (c)*(block.psize + 1);
 8002470:	2600      	movs	r6, #0
 8002472:	9305      	str	r3, [sp, #20]
				x1 = x + block.psize;
				y =  block.pos.y + (r)*(block.psize + 1);
				y1 =  y + block.psize;
				lcdFillRect(x,y,block.psize,block.psize,block.blockColor);
 8002474:	fa0f f38b 	sxth.w	r3, fp
				x = block.pos.x + (c)*(block.psize + 1);
 8002478:	9602      	str	r6, [sp, #8]
				lcdFillRect(x,y,block.psize,block.psize,block.blockColor);
 800247a:	9304      	str	r3, [sp, #16]
				x = block.pos.x + (c)*(block.psize + 1);
 800247c:	f04f 0a00 	mov.w	sl, #0
 8002480:	46d1      	mov	r9, sl
			if(block.shape.shape[r][c] == 1)
 8002482:	eb09 0306 	add.w	r3, r9, r6
 8002486:	aa10      	add	r2, sp, #64	; 0x40
 8002488:	4413      	add	r3, r2
 800248a:	7a5b      	ldrb	r3, [r3, #9]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d134      	bne.n	80024fa <drawTetrisBlock+0xa2>
				y =  block.pos.y + (r)*(block.psize + 1);
 8002490:	9b02      	ldr	r3, [sp, #8]
 8002492:	f8bd 4046 	ldrh.w	r4, [sp, #70]	; 0x46
				x = block.pos.x + (c)*(block.psize + 1);
 8002496:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
				y =  block.pos.y + (r)*(block.psize + 1);
 800249a:	441c      	add	r4, r3
				lcdFillRect(x,y,block.psize,block.psize,block.blockColor);
 800249c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80024a0:	9300      	str	r3, [sp, #0]
				x = block.pos.x + (c)*(block.psize + 1);
 80024a2:	4455      	add	r5, sl
				lcdFillRect(x,y,block.psize,block.psize,block.blockColor);
 80024a4:	9b04      	ldr	r3, [sp, #16]
				x1 = x + block.psize;
 80024a6:	eb0b 0705 	add.w	r7, fp, r5
				lcdFillRect(x,y,block.psize,block.psize,block.blockColor);
 80024aa:	461a      	mov	r2, r3
 80024ac:	b221      	sxth	r1, r4
 80024ae:	b228      	sxth	r0, r5
				lcdDrawHLine(x,x1,y,COLOR_WHITE);
 80024b0:	b2bf      	uxth	r7, r7
 80024b2:	b2ad      	uxth	r5, r5
				y1 =  y + block.psize;
 80024b4:	eb0b 0804 	add.w	r8, fp, r4
				lcdDrawHLine(x,x1,y,COLOR_WHITE);
 80024b8:	b2a4      	uxth	r4, r4
				lcdFillRect(x,y,block.psize,block.psize,block.blockColor);
 80024ba:	f7ff fb6f 	bl	8001b9c <lcdFillRect>
				lcdDrawHLine(x,x1,y1,COLOR_WHITE);
 80024be:	fa1f f888 	uxth.w	r8, r8
				lcdDrawHLine(x,x1,y,COLOR_WHITE);
 80024c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c6:	4622      	mov	r2, r4
 80024c8:	4639      	mov	r1, r7
 80024ca:	4628      	mov	r0, r5
 80024cc:	f7ff fb3e 	bl	8001b4c <lcdDrawHLine>
				lcdDrawHLine(x,x1,y1,COLOR_WHITE);
 80024d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d4:	4642      	mov	r2, r8
 80024d6:	4639      	mov	r1, r7
 80024d8:	4628      	mov	r0, r5
 80024da:	f7ff fb37 	bl	8001b4c <lcdDrawHLine>
				lcdDrawVLine(x,y,y1,COLOR_WHITE);
 80024de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e2:	4642      	mov	r2, r8
 80024e4:	4621      	mov	r1, r4
 80024e6:	4628      	mov	r0, r5
 80024e8:	f7ff fb88 	bl	8001bfc <lcdDrawVLine>
				lcdDrawVLine(x1,y,y1,COLOR_WHITE);
 80024ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f0:	4642      	mov	r2, r8
 80024f2:	4621      	mov	r1, r4
 80024f4:	4638      	mov	r0, r7
 80024f6:	f7ff fb81 	bl	8001bfc <lcdDrawVLine>
		for(int c = 0; c < 5; c++)
 80024fa:	f109 0901 	add.w	r9, r9, #1
 80024fe:	9b05      	ldr	r3, [sp, #20]
 8002500:	f1b9 0f05 	cmp.w	r9, #5
 8002504:	449a      	add	sl, r3
 8002506:	d1bc      	bne.n	8002482 <drawTetrisBlock+0x2a>
 8002508:	9b02      	ldr	r3, [sp, #8]
 800250a:	9a03      	ldr	r2, [sp, #12]
 800250c:	3605      	adds	r6, #5
 800250e:	4413      	add	r3, r2
	for(int r = 0; r < 5; r++)
 8002510:	2e19      	cmp	r6, #25
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	d1b2      	bne.n	800247c <drawTetrisBlock+0x24>

			}
		}
	}
}
 8002516:	b007      	add	sp, #28
 8002518:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800251c:	b004      	add	sp, #16
 800251e:	4770      	bx	lr

08002520 <deleteBlock>:

void deleteBlock(tetrisBlockPropertiesTypeDef block){
 8002520:	b084      	sub	sp, #16
 8002522:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002526:	ac0a      	add	r4, sp, #40	; 0x28
 8002528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800252c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
		for(int c = 0; c < 5; c++)
		{
			if(block.shape.shape[r][c] == 1)
			{

				x = block.pos.x + (c)*(block.psize + 1);
 8002530:	2400      	movs	r4, #0
 8002532:	f105 0901 	add.w	r9, r5, #1
 8002536:	46a0      	mov	r8, r4
				y =  block.pos.y + (r)*(block.psize + 1);
				lcdFillRect(x,y,block.psize,block.psize,COLOR_BLACK);
 8002538:	b22d      	sxth	r5, r5
 800253a:	46a2      	mov	sl, r4
				x = block.pos.x + (c)*(block.psize + 1);
 800253c:	2700      	movs	r7, #0
 800253e:	463e      	mov	r6, r7
			if(block.shape.shape[r][c] == 1)
 8002540:	1933      	adds	r3, r6, r4
 8002542:	aa0a      	add	r2, sp, #40	; 0x28
 8002544:	4413      	add	r3, r2
 8002546:	7a5b      	ldrb	r3, [r3, #9]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10d      	bne.n	8002568 <deleteBlock+0x48>
				y =  block.pos.y + (r)*(block.psize + 1);
 800254c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
				x = block.pos.x + (c)*(block.psize + 1);
 8002550:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
				lcdFillRect(x,y,block.psize,block.psize,COLOR_BLACK);
 8002554:	f8cd a000 	str.w	sl, [sp]
				y =  block.pos.y + (r)*(block.psize + 1);
 8002558:	4441      	add	r1, r8
				x = block.pos.x + (c)*(block.psize + 1);
 800255a:	4438      	add	r0, r7
				lcdFillRect(x,y,block.psize,block.psize,COLOR_BLACK);
 800255c:	462b      	mov	r3, r5
 800255e:	462a      	mov	r2, r5
 8002560:	b209      	sxth	r1, r1
 8002562:	b200      	sxth	r0, r0
 8002564:	f7ff fb1a 	bl	8001b9c <lcdFillRect>
		for(int c = 0; c < 5; c++)
 8002568:	3601      	adds	r6, #1
 800256a:	2e05      	cmp	r6, #5
 800256c:	444f      	add	r7, r9
 800256e:	d1e7      	bne.n	8002540 <deleteBlock+0x20>
 8002570:	3405      	adds	r4, #5
	for(int r = 0; r < 5; r++)
 8002572:	2c19      	cmp	r4, #25
 8002574:	44c8      	add	r8, r9
 8002576:	d1e1      	bne.n	800253c <deleteBlock+0x1c>
			}
		}
	}
}
 8002578:	b002      	add	sp, #8
 800257a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800257e:	b004      	add	sp, #16
 8002580:	4770      	bx	lr

08002582 <moveBlockDown>:


void moveBlockDown(int step,tetrisBlockPropertiesTypeDef* block){
 8002582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	deleteBlock(*block);
 8002586:	688a      	ldr	r2, [r1, #8]
 8002588:	f8d1 a000 	ldr.w	sl, [r1]
 800258c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002590:	68cb      	ldr	r3, [r1, #12]
void moveBlockDown(int step,tetrisBlockPropertiesTypeDef* block){
 8002592:	b08a      	sub	sp, #40	; 0x28
	deleteBlock(*block);
 8002594:	f101 0610 	add.w	r6, r1, #16
void moveBlockDown(int step,tetrisBlockPropertiesTypeDef* block){
 8002598:	4680      	mov	r8, r0
 800259a:	460c      	mov	r4, r1
	deleteBlock(*block);
 800259c:	46ee      	mov	lr, sp
 800259e:	f101 0730 	add.w	r7, r1, #48	; 0x30
 80025a2:	4635      	mov	r5, r6
 80025a4:	6830      	ldr	r0, [r6, #0]
 80025a6:	6871      	ldr	r1, [r6, #4]
 80025a8:	46f4      	mov	ip, lr
 80025aa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80025ae:	3608      	adds	r6, #8
 80025b0:	42be      	cmp	r6, r7
 80025b2:	46e6      	mov	lr, ip
 80025b4:	d1f6      	bne.n	80025a4 <moveBlockDown+0x22>
 80025b6:	8839      	ldrh	r1, [r7, #0]
 80025b8:	f8ac 1000 	strh.w	r1, [ip]
 80025bc:	4650      	mov	r0, sl
 80025be:	4649      	mov	r1, r9
 80025c0:	f7ff ffae 	bl	8002520 <deleteBlock>

	if(block->pos.y + step > ILI9341_PIXEL_HEIGHT){
 80025c4:	88e0      	ldrh	r0, [r4, #6]
	}else{
		block->pos.y+= step;
	}


	drawTetrisBlock(*block);
 80025c6:	f8d4 c000 	ldr.w	ip, [r4]
 80025ca:	68a2      	ldr	r2, [r4, #8]
	if(block->pos.y + step > ILI9341_PIXEL_HEIGHT){
 80025cc:	4440      	add	r0, r8
 80025ce:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
		block->pos.y = 0;
 80025d2:	bfc6      	itte	gt
 80025d4:	2300      	movgt	r3, #0
 80025d6:	80e3      	strhgt	r3, [r4, #6]
		block->pos.y+= step;
 80025d8:	80e0      	strhle	r0, [r4, #6]
	drawTetrisBlock(*block);
 80025da:	f8d4 e004 	ldr.w	lr, [r4, #4]
 80025de:	68e3      	ldr	r3, [r4, #12]
 80025e0:	462c      	mov	r4, r5
 80025e2:	466d      	mov	r5, sp
 80025e4:	6820      	ldr	r0, [r4, #0]
 80025e6:	6861      	ldr	r1, [r4, #4]
 80025e8:	462e      	mov	r6, r5
 80025ea:	c603      	stmia	r6!, {r0, r1}
 80025ec:	3408      	adds	r4, #8
 80025ee:	42bc      	cmp	r4, r7
 80025f0:	4635      	mov	r5, r6
 80025f2:	d1f7      	bne.n	80025e4 <moveBlockDown+0x62>
 80025f4:	8821      	ldrh	r1, [r4, #0]
 80025f6:	8031      	strh	r1, [r6, #0]
 80025f8:	4660      	mov	r0, ip
 80025fa:	4671      	mov	r1, lr
 80025fc:	f7ff ff2c 	bl	8002458 <drawTetrisBlock>
}
 8002600:	b00a      	add	sp, #40	; 0x28
 8002602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002606 <getNextOrientation>:
		}
	}

}

tetrisBlocksOrientationTypeDef getNextOrientation(tetrisBlockPropertiesTypeDef block){
 8002606:	b084      	sub	sp, #16
 8002608:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800260c:	f89d 3001 	ldrb.w	r3, [sp, #1]
	if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT){
 8002610:	b13b      	cbz	r3, 8002622 <getNextOrientation+0x1c>
		return BLOCK_ORIENTATION_LANDSCAPE;
	}else if(block.blockOrientation == BLOCK_ORIENTATION_LANDSCAPE){
 8002612:	2b01      	cmp	r3, #1
 8002614:	d007      	beq.n	8002626 <getNextOrientation+0x20>
		return BLOCK_ORIENTATION_PORTRAIT_MIRROR;
	}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT_MIRROR){
 8002616:	2b02      	cmp	r3, #2
 8002618:	d007      	beq.n	800262a <getNextOrientation+0x24>
		return BLOCK_ORIENTATION_LANSCAPE_MIRROR;
	}else if(block.blockOrientation == BLOCK_ORIENTATION_LANSCAPE_MIRROR){
 800261a:	2b03      	cmp	r3, #3
 800261c:	d007      	beq.n	800262e <getNextOrientation+0x28>
		return BLOCK_ORIENTATION_PORTRAIT;
	}
}
 800261e:	b004      	add	sp, #16
 8002620:	4770      	bx	lr
		return BLOCK_ORIENTATION_LANDSCAPE;
 8002622:	2001      	movs	r0, #1
 8002624:	e7fb      	b.n	800261e <getNextOrientation+0x18>
		return BLOCK_ORIENTATION_PORTRAIT_MIRROR;
 8002626:	2002      	movs	r0, #2
 8002628:	e7f9      	b.n	800261e <getNextOrientation+0x18>
		return BLOCK_ORIENTATION_LANSCAPE_MIRROR;
 800262a:	2003      	movs	r0, #3
 800262c:	e7f7      	b.n	800261e <getNextOrientation+0x18>
		return BLOCK_ORIENTATION_PORTRAIT;
 800262e:	2000      	movs	r0, #0
 8002630:	e7f5      	b.n	800261e <getNextOrientation+0x18>

08002632 <moveBlockRight>:
	block->blockOrientation = getNextOrientation(*block);
	copyBlockShape(&block->shape.shape,*block);
	drawTetrisBlock(*block);
}

void moveBlockRight(tetrisBlockPropertiesTypeDef* block){
 8002632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	deleteBlock(*block);
 8002636:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800263a:	f8d0 9000 	ldr.w	r9, [r0]
 800263e:	6882      	ldr	r2, [r0, #8]
 8002640:	68c3      	ldr	r3, [r0, #12]
void moveBlockRight(tetrisBlockPropertiesTypeDef* block){
 8002642:	b08b      	sub	sp, #44	; 0x2c
	deleteBlock(*block);
 8002644:	f100 0610 	add.w	r6, r0, #16
void moveBlockRight(tetrisBlockPropertiesTypeDef* block){
 8002648:	4604      	mov	r4, r0
	deleteBlock(*block);
 800264a:	466f      	mov	r7, sp
 800264c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002650:	4635      	mov	r5, r6
 8002652:	6830      	ldr	r0, [r6, #0]
 8002654:	6871      	ldr	r1, [r6, #4]
 8002656:	46be      	mov	lr, r7
 8002658:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800265c:	3608      	adds	r6, #8
 800265e:	4546      	cmp	r6, r8
 8002660:	4677      	mov	r7, lr
 8002662:	d1f6      	bne.n	8002652 <moveBlockRight+0x20>
 8002664:	f8b8 1000 	ldrh.w	r1, [r8]
 8002668:	f8ae 1000 	strh.w	r1, [lr]
 800266c:	4648      	mov	r0, r9
 800266e:	4661      	mov	r1, ip
 8002670:	f7ff ff56 	bl	8002520 <deleteBlock>
	block->pos.x+= block->psize+1;
 8002674:	88a3      	ldrh	r3, [r4, #4]
	drawTetrisBlock(*block);
 8002676:	f8d4 e000 	ldr.w	lr, [r4]
	block->pos.x+= block->psize+1;
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	7a23      	ldrb	r3, [r4, #8]
 800267e:	4413      	add	r3, r2
 8002680:	80a3      	strh	r3, [r4, #4]
	drawTetrisBlock(*block);
 8002682:	6867      	ldr	r7, [r4, #4]
 8002684:	68a2      	ldr	r2, [r4, #8]
 8002686:	68e3      	ldr	r3, [r4, #12]
 8002688:	462c      	mov	r4, r5
 800268a:	466d      	mov	r5, sp
 800268c:	6820      	ldr	r0, [r4, #0]
 800268e:	6861      	ldr	r1, [r4, #4]
 8002690:	462e      	mov	r6, r5
 8002692:	c603      	stmia	r6!, {r0, r1}
 8002694:	3408      	adds	r4, #8
 8002696:	4544      	cmp	r4, r8
 8002698:	4635      	mov	r5, r6
 800269a:	d1f7      	bne.n	800268c <moveBlockRight+0x5a>
 800269c:	8821      	ldrh	r1, [r4, #0]
 800269e:	8031      	strh	r1, [r6, #0]
 80026a0:	4670      	mov	r0, lr
 80026a2:	4639      	mov	r1, r7
 80026a4:	f7ff fed8 	bl	8002458 <drawTetrisBlock>
}
 80026a8:	b00b      	add	sp, #44	; 0x2c
 80026aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080026ae <moveBlockLeft>:
void moveBlockLeft(tetrisBlockPropertiesTypeDef* block){
 80026ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	deleteBlock(*block);
 80026b2:	6882      	ldr	r2, [r0, #8]
 80026b4:	f8d0 9000 	ldr.w	r9, [r0]
 80026b8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80026bc:	68c3      	ldr	r3, [r0, #12]
void moveBlockLeft(tetrisBlockPropertiesTypeDef* block){
 80026be:	b08b      	sub	sp, #44	; 0x2c
	deleteBlock(*block);
 80026c0:	f100 0610 	add.w	r6, r0, #16
void moveBlockLeft(tetrisBlockPropertiesTypeDef* block){
 80026c4:	4604      	mov	r4, r0
	deleteBlock(*block);
 80026c6:	46ee      	mov	lr, sp
 80026c8:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80026cc:	4635      	mov	r5, r6
 80026ce:	6830      	ldr	r0, [r6, #0]
 80026d0:	6871      	ldr	r1, [r6, #4]
 80026d2:	46f4      	mov	ip, lr
 80026d4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80026d8:	3608      	adds	r6, #8
 80026da:	42be      	cmp	r6, r7
 80026dc:	46e6      	mov	lr, ip
 80026de:	d1f6      	bne.n	80026ce <moveBlockLeft+0x20>
 80026e0:	8839      	ldrh	r1, [r7, #0]
 80026e2:	f8ac 1000 	strh.w	r1, [ip]
 80026e6:	4648      	mov	r0, r9
 80026e8:	4641      	mov	r1, r8
 80026ea:	f7ff ff19 	bl	8002520 <deleteBlock>
	block->pos.x-= (block->psize+1);
 80026ee:	88a3      	ldrh	r3, [r4, #4]
 80026f0:	7a22      	ldrb	r2, [r4, #8]
	drawTetrisBlock(*block);
 80026f2:	f8d4 c000 	ldr.w	ip, [r4]
	block->pos.x-= (block->psize+1);
 80026f6:	3b01      	subs	r3, #1
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	80a3      	strh	r3, [r4, #4]
	drawTetrisBlock(*block);
 80026fc:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8002700:	68a2      	ldr	r2, [r4, #8]
 8002702:	68e3      	ldr	r3, [r4, #12]
 8002704:	462c      	mov	r4, r5
 8002706:	466d      	mov	r5, sp
 8002708:	6820      	ldr	r0, [r4, #0]
 800270a:	6861      	ldr	r1, [r4, #4]
 800270c:	462e      	mov	r6, r5
 800270e:	c603      	stmia	r6!, {r0, r1}
 8002710:	3408      	adds	r4, #8
 8002712:	42bc      	cmp	r4, r7
 8002714:	4635      	mov	r5, r6
 8002716:	d1f7      	bne.n	8002708 <moveBlockLeft+0x5a>
 8002718:	8821      	ldrh	r1, [r4, #0]
 800271a:	8031      	strh	r1, [r6, #0]
 800271c:	4660      	mov	r0, ip
 800271e:	4671      	mov	r1, lr
 8002720:	f7ff fe9a 	bl	8002458 <drawTetrisBlock>
}
 8002724:	b00b      	add	sp, #44	; 0x2c
 8002726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800272c <copyBlockShape>:
void copyBlockShape(uint8_t * shape[], tetrisBlockPropertiesTypeDef block){
 800272c:	b084      	sub	sp, #16
 800272e:	b510      	push	{r4, lr}
 8002730:	ac03      	add	r4, sp, #12
 8002732:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8002736:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800273a:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if(block.blockType == BLOCK_I)
 800273e:	2a01      	cmp	r2, #1
 8002740:	d133      	bne.n	80027aa <copyBlockShape+0x7e>
	{
		if(block.blockOrientation == BLOCK_ORIENTATION_LANDSCAPE){
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10e      	bne.n	8002764 <copyBlockShape+0x38>
			memcpy(shape,I_BLOCK_SHAPES.landscape,25);
 8002746:	4bae      	ldr	r3, [pc, #696]	; (8002a00 <copyBlockShape+0x2d4>)
 8002748:	f103 0218 	add.w	r2, r3, #24
 800274c:	f853 1b04 	ldr.w	r1, [r3], #4
 8002750:	f840 1b04 	str.w	r1, [r0], #4
 8002754:	4293      	cmp	r3, r2
 8002756:	d1f9      	bne.n	800274c <copyBlockShape+0x20>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_LANSCAPE_MIRROR){
			memcpy(shape, T_BLOCK_SHAPES.landscape_mirror,25);
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT){
			memcpy(shape, T_BLOCK_SHAPES.portrait, 25);
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT_MIRROR){
			memcpy(shape, T_BLOCK_SHAPES.portrait_mirror, 25);
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	7003      	strb	r3, [r0, #0]
		}
	}
}
 800275c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002760:	b004      	add	sp, #16
 8002762:	4770      	bx	lr
		}else if(block.blockOrientation == BLOCK_ORIENTATION_LANSCAPE_MIRROR){
 8002764:	2b03      	cmp	r3, #3
 8002766:	d109      	bne.n	800277c <copyBlockShape+0x50>
			memcpy(shape, I_BLOCK_SHAPES.landscape_mirror,25);
 8002768:	4ba6      	ldr	r3, [pc, #664]	; (8002a04 <copyBlockShape+0x2d8>)
 800276a:	f103 0218 	add.w	r2, r3, #24
 800276e:	f853 1b04 	ldr.w	r1, [r3], #4
 8002772:	f840 1b04 	str.w	r1, [r0], #4
 8002776:	4293      	cmp	r3, r2
 8002778:	d1f9      	bne.n	800276e <copyBlockShape+0x42>
 800277a:	e7ed      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT){
 800277c:	b94b      	cbnz	r3, 8002792 <copyBlockShape+0x66>
			memcpy(shape, I_BLOCK_SHAPES.portrait, 25);
 800277e:	4ba2      	ldr	r3, [pc, #648]	; (8002a08 <copyBlockShape+0x2dc>)
 8002780:	f103 0218 	add.w	r2, r3, #24
 8002784:	f853 1b04 	ldr.w	r1, [r3], #4
 8002788:	f840 1b04 	str.w	r1, [r0], #4
 800278c:	4293      	cmp	r3, r2
 800278e:	d1f9      	bne.n	8002784 <copyBlockShape+0x58>
 8002790:	e7e2      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT_MIRROR){
 8002792:	2b02      	cmp	r3, #2
 8002794:	d1e2      	bne.n	800275c <copyBlockShape+0x30>
			memcpy(shape, I_BLOCK_SHAPES.portrait_mirror, 25);
 8002796:	4b9d      	ldr	r3, [pc, #628]	; (8002a0c <copyBlockShape+0x2e0>)
 8002798:	f103 0218 	add.w	r2, r3, #24
 800279c:	f853 1b04 	ldr.w	r1, [r3], #4
 80027a0:	f840 1b04 	str.w	r1, [r0], #4
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d1f9      	bne.n	800279c <copyBlockShape+0x70>
 80027a8:	e7d6      	b.n	8002758 <copyBlockShape+0x2c>
	}else if(block.blockType == BLOCK_J)
 80027aa:	2a02      	cmp	r2, #2
 80027ac:	d12e      	bne.n	800280c <copyBlockShape+0xe0>
		if(block.blockOrientation == BLOCK_ORIENTATION_LANDSCAPE){
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d109      	bne.n	80027c6 <copyBlockShape+0x9a>
			memcpy(shape, J_BLOCK_SHAPES.landscape,25);
 80027b2:	4b97      	ldr	r3, [pc, #604]	; (8002a10 <copyBlockShape+0x2e4>)
 80027b4:	f103 0218 	add.w	r2, r3, #24
 80027b8:	f853 1b04 	ldr.w	r1, [r3], #4
 80027bc:	f840 1b04 	str.w	r1, [r0], #4
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d1f9      	bne.n	80027b8 <copyBlockShape+0x8c>
 80027c4:	e7c8      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_LANSCAPE_MIRROR){
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d109      	bne.n	80027de <copyBlockShape+0xb2>
			memcpy(shape, J_BLOCK_SHAPES.landscape_mirror,25);
 80027ca:	4b92      	ldr	r3, [pc, #584]	; (8002a14 <copyBlockShape+0x2e8>)
 80027cc:	f103 0218 	add.w	r2, r3, #24
 80027d0:	f853 1b04 	ldr.w	r1, [r3], #4
 80027d4:	f840 1b04 	str.w	r1, [r0], #4
 80027d8:	4293      	cmp	r3, r2
 80027da:	d1f9      	bne.n	80027d0 <copyBlockShape+0xa4>
 80027dc:	e7bc      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT){
 80027de:	b94b      	cbnz	r3, 80027f4 <copyBlockShape+0xc8>
			memcpy(shape, J_BLOCK_SHAPES.portrait, 25);
 80027e0:	4b8d      	ldr	r3, [pc, #564]	; (8002a18 <copyBlockShape+0x2ec>)
 80027e2:	f103 0218 	add.w	r2, r3, #24
 80027e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80027ea:	f840 1b04 	str.w	r1, [r0], #4
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d1f9      	bne.n	80027e6 <copyBlockShape+0xba>
 80027f2:	e7b1      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT_MIRROR){
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d1b1      	bne.n	800275c <copyBlockShape+0x30>
			memcpy(shape, J_BLOCK_SHAPES.portrait_mirror, 25);
 80027f8:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <copyBlockShape+0x2f0>)
 80027fa:	f103 0218 	add.w	r2, r3, #24
 80027fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8002802:	f840 1b04 	str.w	r1, [r0], #4
 8002806:	4293      	cmp	r3, r2
 8002808:	d1f9      	bne.n	80027fe <copyBlockShape+0xd2>
 800280a:	e7a5      	b.n	8002758 <copyBlockShape+0x2c>
	}else if(block.blockType == BLOCK_L)
 800280c:	2a03      	cmp	r2, #3
 800280e:	d12e      	bne.n	800286e <copyBlockShape+0x142>
		if(block.blockOrientation == BLOCK_ORIENTATION_LANDSCAPE){
 8002810:	2b01      	cmp	r3, #1
 8002812:	d109      	bne.n	8002828 <copyBlockShape+0xfc>
			memcpy(shape, L_BLOCK_SHAPES.landscape,25);
 8002814:	4b82      	ldr	r3, [pc, #520]	; (8002a20 <copyBlockShape+0x2f4>)
 8002816:	f103 0218 	add.w	r2, r3, #24
 800281a:	f853 1b04 	ldr.w	r1, [r3], #4
 800281e:	f840 1b04 	str.w	r1, [r0], #4
 8002822:	4293      	cmp	r3, r2
 8002824:	d1f9      	bne.n	800281a <copyBlockShape+0xee>
 8002826:	e797      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_LANSCAPE_MIRROR){
 8002828:	2b03      	cmp	r3, #3
 800282a:	d109      	bne.n	8002840 <copyBlockShape+0x114>
			memcpy(shape, L_BLOCK_SHAPES.landscape_mirror,25);
 800282c:	4b7d      	ldr	r3, [pc, #500]	; (8002a24 <copyBlockShape+0x2f8>)
 800282e:	f103 0218 	add.w	r2, r3, #24
 8002832:	f853 1b04 	ldr.w	r1, [r3], #4
 8002836:	f840 1b04 	str.w	r1, [r0], #4
 800283a:	4293      	cmp	r3, r2
 800283c:	d1f9      	bne.n	8002832 <copyBlockShape+0x106>
 800283e:	e78b      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT){
 8002840:	b94b      	cbnz	r3, 8002856 <copyBlockShape+0x12a>
			memcpy(shape, L_BLOCK_SHAPES.portrait, 25);
 8002842:	4b79      	ldr	r3, [pc, #484]	; (8002a28 <copyBlockShape+0x2fc>)
 8002844:	f103 0218 	add.w	r2, r3, #24
 8002848:	f853 1b04 	ldr.w	r1, [r3], #4
 800284c:	f840 1b04 	str.w	r1, [r0], #4
 8002850:	4293      	cmp	r3, r2
 8002852:	d1f9      	bne.n	8002848 <copyBlockShape+0x11c>
 8002854:	e780      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT_MIRROR){
 8002856:	2b02      	cmp	r3, #2
 8002858:	d180      	bne.n	800275c <copyBlockShape+0x30>
			memcpy(shape, L_BLOCK_SHAPES.portrait_mirror, 25);
 800285a:	4b74      	ldr	r3, [pc, #464]	; (8002a2c <copyBlockShape+0x300>)
 800285c:	f103 0218 	add.w	r2, r3, #24
 8002860:	f853 1b04 	ldr.w	r1, [r3], #4
 8002864:	f840 1b04 	str.w	r1, [r0], #4
 8002868:	4293      	cmp	r3, r2
 800286a:	d1f9      	bne.n	8002860 <copyBlockShape+0x134>
 800286c:	e774      	b.n	8002758 <copyBlockShape+0x2c>
	}else if(block.blockType == BLOCK_O)
 800286e:	2a04      	cmp	r2, #4
 8002870:	d12f      	bne.n	80028d2 <copyBlockShape+0x1a6>
		if(block.blockOrientation == BLOCK_ORIENTATION_LANDSCAPE){
 8002872:	2b01      	cmp	r3, #1
 8002874:	d109      	bne.n	800288a <copyBlockShape+0x15e>
			memcpy(shape, O_BLOCK_SHAPES.landscape,25);
 8002876:	4b6e      	ldr	r3, [pc, #440]	; (8002a30 <copyBlockShape+0x304>)
 8002878:	f103 0218 	add.w	r2, r3, #24
 800287c:	f853 1b04 	ldr.w	r1, [r3], #4
 8002880:	f840 1b04 	str.w	r1, [r0], #4
 8002884:	4293      	cmp	r3, r2
 8002886:	d1f9      	bne.n	800287c <copyBlockShape+0x150>
 8002888:	e766      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_LANSCAPE_MIRROR){
 800288a:	2b03      	cmp	r3, #3
 800288c:	d109      	bne.n	80028a2 <copyBlockShape+0x176>
			memcpy(shape, O_BLOCK_SHAPES.landscape_mirror,25);
 800288e:	4b69      	ldr	r3, [pc, #420]	; (8002a34 <copyBlockShape+0x308>)
 8002890:	f103 0218 	add.w	r2, r3, #24
 8002894:	f853 1b04 	ldr.w	r1, [r3], #4
 8002898:	f840 1b04 	str.w	r1, [r0], #4
 800289c:	4293      	cmp	r3, r2
 800289e:	d1f9      	bne.n	8002894 <copyBlockShape+0x168>
 80028a0:	e75a      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT){
 80028a2:	b94b      	cbnz	r3, 80028b8 <copyBlockShape+0x18c>
			memcpy(shape, O_BLOCK_SHAPES.portrait, 25);
 80028a4:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <copyBlockShape+0x30c>)
 80028a6:	f103 0218 	add.w	r2, r3, #24
 80028aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80028ae:	f840 1b04 	str.w	r1, [r0], #4
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d1f9      	bne.n	80028aa <copyBlockShape+0x17e>
 80028b6:	e74f      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT_MIRROR){
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	f47f af4f 	bne.w	800275c <copyBlockShape+0x30>
			memcpy(shape, O_BLOCK_SHAPES.portrait_mirror, 25);
 80028be:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <copyBlockShape+0x310>)
 80028c0:	f103 0218 	add.w	r2, r3, #24
 80028c4:	f853 1b04 	ldr.w	r1, [r3], #4
 80028c8:	f840 1b04 	str.w	r1, [r0], #4
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d1f9      	bne.n	80028c4 <copyBlockShape+0x198>
 80028d0:	e742      	b.n	8002758 <copyBlockShape+0x2c>
	}else if(block.blockType == BLOCK_S)
 80028d2:	2a05      	cmp	r2, #5
 80028d4:	d12f      	bne.n	8002936 <copyBlockShape+0x20a>
		if(block.blockOrientation == BLOCK_ORIENTATION_LANDSCAPE){
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d109      	bne.n	80028ee <copyBlockShape+0x1c2>
			memcpy(shape, S_BLOCK_SHAPES.landscape,25);
 80028da:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <copyBlockShape+0x314>)
 80028dc:	f103 0218 	add.w	r2, r3, #24
 80028e0:	f853 1b04 	ldr.w	r1, [r3], #4
 80028e4:	f840 1b04 	str.w	r1, [r0], #4
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d1f9      	bne.n	80028e0 <copyBlockShape+0x1b4>
 80028ec:	e734      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_LANSCAPE_MIRROR){
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d109      	bne.n	8002906 <copyBlockShape+0x1da>
			memcpy(shape, S_BLOCK_SHAPES.landscape_mirror,25);
 80028f2:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <copyBlockShape+0x318>)
 80028f4:	f103 0218 	add.w	r2, r3, #24
 80028f8:	f853 1b04 	ldr.w	r1, [r3], #4
 80028fc:	f840 1b04 	str.w	r1, [r0], #4
 8002900:	4293      	cmp	r3, r2
 8002902:	d1f9      	bne.n	80028f8 <copyBlockShape+0x1cc>
 8002904:	e728      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT){
 8002906:	b94b      	cbnz	r3, 800291c <copyBlockShape+0x1f0>
			memcpy(shape, S_BLOCK_SHAPES.portrait, 25);
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <copyBlockShape+0x31c>)
 800290a:	f103 0218 	add.w	r2, r3, #24
 800290e:	f853 1b04 	ldr.w	r1, [r3], #4
 8002912:	f840 1b04 	str.w	r1, [r0], #4
 8002916:	4293      	cmp	r3, r2
 8002918:	d1f9      	bne.n	800290e <copyBlockShape+0x1e2>
 800291a:	e71d      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT_MIRROR){
 800291c:	2b02      	cmp	r3, #2
 800291e:	f47f af1d 	bne.w	800275c <copyBlockShape+0x30>
			memcpy(shape, S_BLOCK_SHAPES.portrait_mirror, 25);
 8002922:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <copyBlockShape+0x320>)
 8002924:	f103 0218 	add.w	r2, r3, #24
 8002928:	f853 1b04 	ldr.w	r1, [r3], #4
 800292c:	f840 1b04 	str.w	r1, [r0], #4
 8002930:	4293      	cmp	r3, r2
 8002932:	d1f9      	bne.n	8002928 <copyBlockShape+0x1fc>
 8002934:	e710      	b.n	8002758 <copyBlockShape+0x2c>
	}else if(block.blockType == BLOCK_Z)
 8002936:	2a07      	cmp	r2, #7
 8002938:	d12f      	bne.n	800299a <copyBlockShape+0x26e>
		if(block.blockOrientation == BLOCK_ORIENTATION_LANDSCAPE){
 800293a:	2b01      	cmp	r3, #1
 800293c:	d109      	bne.n	8002952 <copyBlockShape+0x226>
			memcpy(shape, Z_BLOCK_SHAPES.landscape,25);
 800293e:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <copyBlockShape+0x324>)
 8002940:	f103 0218 	add.w	r2, r3, #24
 8002944:	f853 1b04 	ldr.w	r1, [r3], #4
 8002948:	f840 1b04 	str.w	r1, [r0], #4
 800294c:	4293      	cmp	r3, r2
 800294e:	d1f9      	bne.n	8002944 <copyBlockShape+0x218>
 8002950:	e702      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_LANSCAPE_MIRROR){
 8002952:	2b03      	cmp	r3, #3
 8002954:	d109      	bne.n	800296a <copyBlockShape+0x23e>
			memcpy(shape, Z_BLOCK_SHAPES.landscape_mirror,25);
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <copyBlockShape+0x328>)
 8002958:	f103 0218 	add.w	r2, r3, #24
 800295c:	f853 1b04 	ldr.w	r1, [r3], #4
 8002960:	f840 1b04 	str.w	r1, [r0], #4
 8002964:	4293      	cmp	r3, r2
 8002966:	d1f9      	bne.n	800295c <copyBlockShape+0x230>
 8002968:	e6f6      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT){
 800296a:	b94b      	cbnz	r3, 8002980 <copyBlockShape+0x254>
			memcpy(shape, Z_BLOCK_SHAPES.portrait, 25);
 800296c:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <copyBlockShape+0x32c>)
 800296e:	f103 0218 	add.w	r2, r3, #24
 8002972:	f853 1b04 	ldr.w	r1, [r3], #4
 8002976:	f840 1b04 	str.w	r1, [r0], #4
 800297a:	4293      	cmp	r3, r2
 800297c:	d1f9      	bne.n	8002972 <copyBlockShape+0x246>
 800297e:	e6eb      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT_MIRROR){
 8002980:	2b02      	cmp	r3, #2
 8002982:	f47f aeeb 	bne.w	800275c <copyBlockShape+0x30>
			memcpy(shape, Z_BLOCK_SHAPES.portrait_mirror, 25);
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <copyBlockShape+0x330>)
 8002988:	f103 0218 	add.w	r2, r3, #24
 800298c:	f853 1b04 	ldr.w	r1, [r3], #4
 8002990:	f840 1b04 	str.w	r1, [r0], #4
 8002994:	4293      	cmp	r3, r2
 8002996:	d1f9      	bne.n	800298c <copyBlockShape+0x260>
 8002998:	e6de      	b.n	8002758 <copyBlockShape+0x2c>
	}else if(block.blockType == BLOCK_T)
 800299a:	2a06      	cmp	r2, #6
 800299c:	f47f aede 	bne.w	800275c <copyBlockShape+0x30>
		if(block.blockOrientation == BLOCK_ORIENTATION_LANDSCAPE){
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d109      	bne.n	80029b8 <copyBlockShape+0x28c>
			memcpy(shape, T_BLOCK_SHAPES.landscape,25);
 80029a4:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <copyBlockShape+0x334>)
 80029a6:	f103 0218 	add.w	r2, r3, #24
 80029aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80029ae:	f840 1b04 	str.w	r1, [r0], #4
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d1f9      	bne.n	80029aa <copyBlockShape+0x27e>
 80029b6:	e6cf      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_LANSCAPE_MIRROR){
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d109      	bne.n	80029d0 <copyBlockShape+0x2a4>
			memcpy(shape, T_BLOCK_SHAPES.landscape_mirror,25);
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <copyBlockShape+0x338>)
 80029be:	f103 0218 	add.w	r2, r3, #24
 80029c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80029c6:	f840 1b04 	str.w	r1, [r0], #4
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d1f9      	bne.n	80029c2 <copyBlockShape+0x296>
 80029ce:	e6c3      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT){
 80029d0:	b94b      	cbnz	r3, 80029e6 <copyBlockShape+0x2ba>
			memcpy(shape, T_BLOCK_SHAPES.portrait, 25);
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <copyBlockShape+0x33c>)
 80029d4:	f103 0218 	add.w	r2, r3, #24
 80029d8:	f853 1b04 	ldr.w	r1, [r3], #4
 80029dc:	f840 1b04 	str.w	r1, [r0], #4
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d1f9      	bne.n	80029d8 <copyBlockShape+0x2ac>
 80029e4:	e6b8      	b.n	8002758 <copyBlockShape+0x2c>
		}else if(block.blockOrientation == BLOCK_ORIENTATION_PORTRAIT_MIRROR){
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f47f aeb8 	bne.w	800275c <copyBlockShape+0x30>
			memcpy(shape, T_BLOCK_SHAPES.portrait_mirror, 25);
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <copyBlockShape+0x340>)
 80029ee:	f103 0218 	add.w	r2, r3, #24
 80029f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80029f6:	f840 1b04 	str.w	r1, [r0], #4
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d1f9      	bne.n	80029f2 <copyBlockShape+0x2c6>
 80029fe:	e6ab      	b.n	8002758 <copyBlockShape+0x2c>
 8002a00:	08004ad2 	.word	0x08004ad2
 8002a04:	08004b04 	.word	0x08004b04
 8002a08:	08004ab9 	.word	0x08004ab9
 8002a0c:	08004aeb 	.word	0x08004aeb
 8002a10:	08004b36 	.word	0x08004b36
 8002a14:	08004b68 	.word	0x08004b68
 8002a18:	08004b1d 	.word	0x08004b1d
 8002a1c:	08004b4f 	.word	0x08004b4f
 8002a20:	08004b9a 	.word	0x08004b9a
 8002a24:	08004bcc 	.word	0x08004bcc
 8002a28:	08004b81 	.word	0x08004b81
 8002a2c:	08004bb3 	.word	0x08004bb3
 8002a30:	08004bfe 	.word	0x08004bfe
 8002a34:	08004c30 	.word	0x08004c30
 8002a38:	08004be5 	.word	0x08004be5
 8002a3c:	08004c17 	.word	0x08004c17
 8002a40:	08004c62 	.word	0x08004c62
 8002a44:	08004c94 	.word	0x08004c94
 8002a48:	08004c49 	.word	0x08004c49
 8002a4c:	08004c7b 	.word	0x08004c7b
 8002a50:	08004d2a 	.word	0x08004d2a
 8002a54:	08004d5c 	.word	0x08004d5c
 8002a58:	08004d11 	.word	0x08004d11
 8002a5c:	08004d43 	.word	0x08004d43
 8002a60:	08004cc6 	.word	0x08004cc6
 8002a64:	08004cf8 	.word	0x08004cf8
 8002a68:	08004cad 	.word	0x08004cad
 8002a6c:	08004cdf 	.word	0x08004cdf

08002a70 <rotateBlock>:
void rotateBlock(tetrisBlockPropertiesTypeDef* block){
 8002a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	deleteBlock(*block);
 8002a74:	6882      	ldr	r2, [r0, #8]
 8002a76:	f8d0 9000 	ldr.w	r9, [r0]
 8002a7a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002a7e:	68c3      	ldr	r3, [r0, #12]
void rotateBlock(tetrisBlockPropertiesTypeDef* block){
 8002a80:	b08a      	sub	sp, #40	; 0x28
	deleteBlock(*block);
 8002a82:	f100 0610 	add.w	r6, r0, #16
void rotateBlock(tetrisBlockPropertiesTypeDef* block){
 8002a86:	4604      	mov	r4, r0
	deleteBlock(*block);
 8002a88:	46ee      	mov	lr, sp
 8002a8a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8002a8e:	4635      	mov	r5, r6
 8002a90:	6830      	ldr	r0, [r6, #0]
 8002a92:	6871      	ldr	r1, [r6, #4]
 8002a94:	46f4      	mov	ip, lr
 8002a96:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8002a9a:	3608      	adds	r6, #8
 8002a9c:	42be      	cmp	r6, r7
 8002a9e:	46e6      	mov	lr, ip
 8002aa0:	d1f6      	bne.n	8002a90 <rotateBlock+0x20>
 8002aa2:	8839      	ldrh	r1, [r7, #0]
 8002aa4:	f8ac 1000 	strh.w	r1, [ip]
 8002aa8:	4648      	mov	r0, r9
 8002aaa:	4641      	mov	r1, r8
 8002aac:	f7ff fd38 	bl	8002520 <deleteBlock>
	block->blockOrientation = getNextOrientation(*block);
 8002ab0:	f8d4 9000 	ldr.w	r9, [r4]
 8002ab4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002ab8:	68a2      	ldr	r2, [r4, #8]
 8002aba:	68e3      	ldr	r3, [r4, #12]
 8002abc:	462e      	mov	r6, r5
 8002abe:	46ee      	mov	lr, sp
 8002ac0:	6830      	ldr	r0, [r6, #0]
 8002ac2:	6871      	ldr	r1, [r6, #4]
 8002ac4:	46f4      	mov	ip, lr
 8002ac6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8002aca:	3608      	adds	r6, #8
 8002acc:	42be      	cmp	r6, r7
 8002ace:	46e6      	mov	lr, ip
 8002ad0:	d1f6      	bne.n	8002ac0 <rotateBlock+0x50>
 8002ad2:	8839      	ldrh	r1, [r7, #0]
 8002ad4:	f8ac 1000 	strh.w	r1, [ip]
 8002ad8:	4648      	mov	r0, r9
 8002ada:	4641      	mov	r1, r8
 8002adc:	f7ff fd93 	bl	8002606 <getNextOrientation>
 8002ae0:	7060      	strb	r0, [r4, #1]
	copyBlockShape(&block->shape.shape,*block);
 8002ae2:	f8d4 9000 	ldr.w	r9, [r4]
 8002ae6:	68a3      	ldr	r3, [r4, #8]
 8002ae8:	f104 0c09 	add.w	ip, r4, #9
 8002aec:	f104 020c 	add.w	r2, r4, #12
 8002af0:	466e      	mov	r6, sp
 8002af2:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
 8002af6:	6810      	ldr	r0, [r2, #0]
 8002af8:	6851      	ldr	r1, [r2, #4]
 8002afa:	46b6      	mov	lr, r6
 8002afc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8002b00:	3208      	adds	r2, #8
 8002b02:	4552      	cmp	r2, sl
 8002b04:	4676      	mov	r6, lr
 8002b06:	d1f6      	bne.n	8002af6 <rotateBlock+0x86>
 8002b08:	6810      	ldr	r0, [r2, #0]
 8002b0a:	f8ce 0000 	str.w	r0, [lr]
 8002b0e:	8892      	ldrh	r2, [r2, #4]
 8002b10:	f8ae 2004 	strh.w	r2, [lr, #4]
 8002b14:	4660      	mov	r0, ip
 8002b16:	4642      	mov	r2, r8
 8002b18:	4649      	mov	r1, r9
 8002b1a:	f7ff fe07 	bl	800272c <copyBlockShape>
	drawTetrisBlock(*block);
 8002b1e:	f8d4 c000 	ldr.w	ip, [r4]
 8002b22:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8002b26:	68a2      	ldr	r2, [r4, #8]
 8002b28:	68e3      	ldr	r3, [r4, #12]
 8002b2a:	462c      	mov	r4, r5
 8002b2c:	466d      	mov	r5, sp
 8002b2e:	6820      	ldr	r0, [r4, #0]
 8002b30:	6861      	ldr	r1, [r4, #4]
 8002b32:	462e      	mov	r6, r5
 8002b34:	c603      	stmia	r6!, {r0, r1}
 8002b36:	3408      	adds	r4, #8
 8002b38:	42bc      	cmp	r4, r7
 8002b3a:	4635      	mov	r5, r6
 8002b3c:	d1f7      	bne.n	8002b2e <rotateBlock+0xbe>
 8002b3e:	8821      	ldrh	r1, [r4, #0]
 8002b40:	8031      	strh	r1, [r6, #0]
 8002b42:	4660      	mov	r0, ip
 8002b44:	4671      	mov	r1, lr
 8002b46:	f7ff fc87 	bl	8002458 <drawTetrisBlock>
}
 8002b4a:	b00a      	add	sp, #40	; 0x28
 8002b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b50 <getNextShape>:

tetrisBlocksShapeTypeDef getNextShape(tetrisBlockPropertiesTypeDef block){
 8002b50:	b084      	sub	sp, #16
 8002b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b54:	b09f      	sub	sp, #124	; 0x7c
 8002b56:	ae25      	add	r6, sp, #148	; 0x94
	tetrisBlocksShapeTypeDef s;
	tetrisBlockPropertiesTypeDef b;
	b.blockOrientation = getNextOrientation(block);
 8002b58:	ad29      	add	r5, sp, #164	; 0xa4
tetrisBlocksShapeTypeDef getNextShape(tetrisBlockPropertiesTypeDef block){
 8002b5a:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8002b5e:	4607      	mov	r7, r0
	b.blockOrientation = getNextOrientation(block);
 8002b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b62:	466c      	mov	r4, sp
 8002b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	8023      	strh	r3, [r4, #0]
 8002b6e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b72:	f7ff fd48 	bl	8002606 <getNextOrientation>
	b.blockType = block.blockType;
	copyBlockShape(s.shape,b);
 8002b76:	ad14      	add	r5, sp, #80	; 0x50
	b.blockType = block.blockType;
 8002b78:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
	b.blockOrientation = getNextOrientation(block);
 8002b7c:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
	b.blockType = block.blockType;
 8002b80:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	copyBlockShape(s.shape,b);
 8002b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b86:	466c      	mov	r4, sp
 8002b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b92:	f844 0b04 	str.w	r0, [r4], #4
 8002b96:	ab11      	add	r3, sp, #68	; 0x44
 8002b98:	8021      	strh	r1, [r4, #0]
 8002b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9c:	a80a      	add	r0, sp, #40	; 0x28
 8002b9e:	f7ff fdc5 	bl	800272c <copyBlockShape>
	return s;
 8002ba2:	ad10      	add	r5, sp, #64	; 0x40
 8002ba4:	ab0a      	add	r3, sp, #40	; 0x28
 8002ba6:	463a      	mov	r2, r7
 8002ba8:	461c      	mov	r4, r3
 8002baa:	cc03      	ldmia	r4!, {r0, r1}
 8002bac:	42ac      	cmp	r4, r5
 8002bae:	6010      	str	r0, [r2, #0]
 8002bb0:	6051      	str	r1, [r2, #4]
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	f102 0208 	add.w	r2, r2, #8
 8002bb8:	d1f6      	bne.n	8002ba8 <getNextShape+0x58>
 8002bba:	7823      	ldrb	r3, [r4, #0]
 8002bbc:	7013      	strb	r3, [r2, #0]
}
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	b01f      	add	sp, #124	; 0x7c
 8002bc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002bc6:	b004      	add	sp, #16
 8002bc8:	4770      	bx	lr
	...

08002bcc <calculateScore>:

}

void calculateScore()
{
	if(gameT.tetrisSpeed == SPEED_NORMAL)
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <calculateScore+0x60>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <calculateScore+0x64>)
 8002bd2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002bd6:	d108      	bne.n	8002bea <calculateScore+0x1e>
	{
		gameS.gameScore+= 10*gameS.clearRowsFlag;
 8002bd8:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8002bdc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	}else if(gameT.tetrisSpeed == SPEED_MEDIUM){
		gameS.gameScore+= 10*(2*gameS.clearRowsFlag);
	}else if(gameT.tetrisSpeed == SPEED_HIGH){
		gameS.gameScore+= 10*(3*gameS.clearRowsFlag);
 8002be0:	f8b3 1164 	ldrh.w	r1, [r3, #356]	; 0x164
 8002be4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8002be8:	e00b      	b.n	8002c02 <calculateScore+0x36>
	}else if(gameT.tetrisSpeed == SPEED_MEDIUM){
 8002bea:	f240 21ee 	movw	r1, #750	; 0x2ee
 8002bee:	428a      	cmp	r2, r1
 8002bf0:	d10d      	bne.n	8002c0e <calculateScore+0x42>
		gameS.gameScore+= 10*(2*gameS.clearRowsFlag);
 8002bf2:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
 8002bf6:	f8b3 1164 	ldrh.w	r1, [r3, #356]	; 0x164
 8002bfa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002bfe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	}else{
		gameS.gameScore+= 10* (4*gameS.clearRowsFlag);
 8002c02:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	}
	tetrisUpdateScore(gameS.gameScore);
 8002c06:	f8b3 0164 	ldrh.w	r0, [r3, #356]	; 0x164
 8002c0a:	f000 bd4f 	b.w	80036ac <tetrisUpdateScore>
	}else if(gameT.tetrisSpeed == SPEED_HIGH){
 8002c0e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
		gameS.gameScore+= 10*(3*gameS.clearRowsFlag);
 8002c12:	f893 21cc 	ldrb.w	r2, [r3, #460]	; 0x1cc
	}else if(gameT.tetrisSpeed == SPEED_HIGH){
 8002c16:	d102      	bne.n	8002c1e <calculateScore+0x52>
		gameS.gameScore+= 10*(3*gameS.clearRowsFlag);
 8002c18:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002c1c:	e7e0      	b.n	8002be0 <calculateScore+0x14>
		gameS.gameScore+= 10* (4*gameS.clearRowsFlag);
 8002c1e:	f8b3 1164 	ldrh.w	r1, [r3, #356]	; 0x164
 8002c22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8002c2a:	e7ea      	b.n	8002c02 <calculateScore+0x36>
 8002c2c:	20000290 	.word	0x20000290
 8002c30:	200002b0 	.word	0x200002b0

08002c34 <readSignals>:
}

void readSignals(uint8_t swap, uint8_t right,uint8_t left,uint8_t down)
{
 8002c34:	b510      	push	{r4, lr}
	gameSignals.swap = swap;
 8002c36:	4c03      	ldr	r4, [pc, #12]	; (8002c44 <readSignals+0x10>)
 8002c38:	7020      	strb	r0, [r4, #0]
	gameSignals.right = right;
 8002c3a:	7061      	strb	r1, [r4, #1]
	gameSignals.left = left;
 8002c3c:	70a2      	strb	r2, [r4, #2]
	gameSignals.down = down;
 8002c3e:	70e3      	strb	r3, [r4, #3]
 8002c40:	bd10      	pop	{r4, pc}
 8002c42:	bf00      	nop
 8002c44:	20000490 	.word	0x20000490

08002c48 <updateGameBoard>:
		col = 0;
		for(int j =  gameP.column; j < gameP.column  + 5; j++)
		{
			if( gameS.gameBlock.shape.shape[row][col] == 1)
			{
				gameS.gameBoard[i][j] = gameS.gameBlock.blockType;
 8002c48:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <updateGameBoard+0x44>)
	for(int i= gameP.row ; i < gameP.row + 5; i++)
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <updateGameBoard+0x48>)
void updateGameBoard() {
 8002c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
				gameS.gameBoard[i][j] = gameS.gameBlock.blockType;
 8002c4e:	f892 7166 	ldrb.w	r7, [r2, #358]	; 0x166
	for(int i= gameP.row ; i < gameP.row + 5; i++)
 8002c52:	881d      	ldrh	r5, [r3, #0]
		for(int j =  gameP.column; j < gameP.column  + 5; j++)
 8002c54:	885e      	ldrh	r6, [r3, #2]
 8002c56:	f04f 0e0e 	mov.w	lr, #14
	int row = 0,col = 0;
 8002c5a:	2300      	movs	r3, #0
	for(int i= gameP.row ; i < gameP.row + 5; i++)
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d100      	bne.n	8002c62 <updateGameBoard+0x1a>
			col++;
		}

		row++;
	}
}
 8002c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c62:	18e8      	adds	r0, r5, r3
 8002c64:	fb0e 6000 	mla	r0, lr, r0, r6
 8002c68:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8002c6c:	4410      	add	r0, r2
		col = 0;
 8002c6e:	2100      	movs	r1, #0
		for(int j =  gameP.column; j < gameP.column  + 5; j++)
 8002c70:	2905      	cmp	r1, #5
 8002c72:	d101      	bne.n	8002c78 <updateGameBoard+0x30>
		row++;
 8002c74:	3301      	adds	r3, #1
 8002c76:	e7f1      	b.n	8002c5c <updateGameBoard+0x14>
			if( gameS.gameBlock.shape.shape[row][col] == 1)
 8002c78:	eb01 040c 	add.w	r4, r1, ip
 8002c7c:	4414      	add	r4, r2
 8002c7e:	f894 416f 	ldrb.w	r4, [r4, #367]	; 0x16f
 8002c82:	2c01      	cmp	r4, #1
				gameS.gameBoard[i][j] = gameS.gameBlock.blockType;
 8002c84:	bf08      	it	eq
 8002c86:	5447      	strbeq	r7, [r0, r1]
			col++;
 8002c88:	3101      	adds	r1, #1
 8002c8a:	e7f1      	b.n	8002c70 <updateGameBoard+0x28>
 8002c8c:	200002b0 	.word	0x200002b0
 8002c90:	200004a0 	.word	0x200004a0

08002c94 <drawGameBoard>:


void drawGameBoard(){
 8002c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c98:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <drawGameBoard+0xfc>)
 8002c9a:	f46f 7299 	mvn.w	r2, #306	; 0x132
 8002c9e:	eb03 0802 	add.w	r8, r3, r2
 8002ca2:	b099      	sub	sp, #100	; 0x64
 8002ca4:	f103 0514 	add.w	r5, r3, #20
 8002ca8:	4641      	mov	r1, r8
	for(int i = GAME_BOARD_BLOCKS_ROWS_OFFSET; i < GAME_BOARD_BLOCKS_ROWS - GAME_BOARD_BLOCKS_ROWS_OFFSET;i++)
	{
		if(gameS.gameCompleteRows[i-GAME_BOARD_BLOCKS_ROWS_OFFSET] == 1)
		{
			for(int j = GAME_BOARD_BLOCKS_COLS_OFFSET; j < GAME_BOARD_BLOCKS_COLS - GAME_BOARD_BLOCKS_COLS_OFFSET;j++ ){
				gameS.gameBoard[i][j] = 0;
 8002caa:	2400      	movs	r4, #0
		if(gameS.gameCompleteRows[i-GAME_BOARD_BLOCKS_ROWS_OFFSET] == 1)
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	2a01      	cmp	r2, #1
 8002cb0:	d114      	bne.n	8002cdc <drawGameBoard+0x48>
 8002cb2:	2202      	movs	r2, #2
				gameS.gameBoard[i][j] = 0;
 8002cb4:	1e48      	subs	r0, r1, #1
 8002cb6:	5484      	strb	r4, [r0, r2]
			for(int j = GAME_BOARD_BLOCKS_COLS_OFFSET; j < GAME_BOARD_BLOCKS_COLS - GAME_BOARD_BLOCKS_COLS_OFFSET;j++ ){
 8002cb8:	3201      	adds	r2, #1
 8002cba:	2a0c      	cmp	r2, #12
 8002cbc:	d1fb      	bne.n	8002cb6 <drawGameBoard+0x22>
 8002cbe:	460a      	mov	r2, r1
			}

			for(int r = i; r > GAME_BOARD_BLOCKS_ROWS_OFFSET; r--){
 8002cc0:	4542      	cmp	r2, r8
 8002cc2:	d00a      	beq.n	8002cda <drawGameBoard+0x46>
 8002cc4:	f102 060a 	add.w	r6, r2, #10
 8002cc8:	4610      	mov	r0, r2
				for(int j = GAME_BOARD_BLOCKS_COLS_OFFSET; j < GAME_BOARD_BLOCKS_COLS - GAME_BOARD_BLOCKS_COLS_OFFSET;j++ ){
					gameS.gameBoard[r][j] = gameS.gameBoard[r-1][j];
 8002cca:	f810 7c0d 	ldrb.w	r7, [r0, #-13]
 8002cce:	f800 7f01 	strb.w	r7, [r0, #1]!
				for(int j = GAME_BOARD_BLOCKS_COLS_OFFSET; j < GAME_BOARD_BLOCKS_COLS - GAME_BOARD_BLOCKS_COLS_OFFSET;j++ ){
 8002cd2:	42b0      	cmp	r0, r6
 8002cd4:	d1f9      	bne.n	8002cca <drawGameBoard+0x36>
 8002cd6:	3a0e      	subs	r2, #14
 8002cd8:	e7f2      	b.n	8002cc0 <drawGameBoard+0x2c>
				}
			}
		 gameS.gameCompleteRows[i-GAME_BOARD_BLOCKS_ROWS_OFFSET] = 0;
 8002cda:	701c      	strb	r4, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
	for(int i = GAME_BOARD_BLOCKS_ROWS_OFFSET; i < GAME_BOARD_BLOCKS_ROWS - GAME_BOARD_BLOCKS_ROWS_OFFSET;i++)
 8002cde:	42ab      	cmp	r3, r5
 8002ce0:	f101 010e 	add.w	r1, r1, #14
 8002ce4:	d1e2      	bne.n	8002cac <drawGameBoard+0x18>
		}
	}

	lcdFillRect(GAME_BOARD_START_X,GAME_BOARD_START_Y,GAME_BOARD_WIDTH-1,GAME_BOARD_HEIGHT-1,COLOR_BLACK);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	2281      	movs	r2, #129	; 0x81
 8002cec:	f240 1303 	movw	r3, #259	; 0x103
 8002cf0:	2128      	movs	r1, #40	; 0x28
 8002cf2:	201e      	movs	r0, #30
 8002cf4:	f7fe ff52 	bl	8001b9c <lcdFillRect>
		for(int c = GAME_BOARD_BLOCKS_COLS_OFFSET; c < GAME_BOARD_BLOCKS_COLS - GAME_BOARD_BLOCKS_COLS_OFFSET;c++ )
		{
			if(gameS.gameBoard[r][c] > 0)
			{

				tb.blockColor = BLOCK_COLORS[gameS.gameBoard[r][c]];
 8002cf8:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8002d98 <drawGameBoard+0x104>
	tb.psize = GAME_BOARD_BLOCK_SIZE;
 8002cfc:	230c      	movs	r3, #12
 8002cfe:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8002d02:	2728      	movs	r7, #40	; 0x28
 8002d04:	46c2      	mov	sl, r8
 8002d06:	261e      	movs	r6, #30
				tb.pos.x = GAME_BOARD_START_X + (c-GAME_BOARD_BLOCKS_COLS_OFFSET)*(GAME_BOARD_BLOCK_SIZE + 1);
				tb.pos.y = GAME_BOARD_START_Y + (r-GAME_BOARD_BLOCKS_ROWS_OFFSET)*(GAME_BOARD_BLOCK_SIZE + 1);

				drawBlock(tb);
 8002d08:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			if(gameS.gameBoard[r][c] > 0)
 8002d0c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8002d10:	b19b      	cbz	r3, 8002d3a <drawGameBoard+0xa6>
				tb.blockColor = BLOCK_COLORS[gameS.gameBoard[r][c]];
 8002d12:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
 8002d16:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
				drawBlock(tb);
 8002d1a:	ad0f      	add	r5, sp, #60	; 0x3c
 8002d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d1e:	466c      	mov	r4, sp
				tb.pos.x = GAME_BOARD_START_X + (c-GAME_BOARD_BLOCKS_COLS_OFFSET)*(GAME_BOARD_BLOCK_SIZE + 1);
 8002d20:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
				tb.pos.y = GAME_BOARD_START_Y + (r-GAME_BOARD_BLOCKS_ROWS_OFFSET)*(GAME_BOARD_BLOCK_SIZE + 1);
 8002d24:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
				drawBlock(tb);
 8002d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2e:	682b      	ldr	r3, [r5, #0]
 8002d30:	8023      	strh	r3, [r4, #0]
 8002d32:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8002d36:	f7ff fb57 	bl	80023e8 <drawBlock>
 8002d3a:	360d      	adds	r6, #13
 8002d3c:	b2b6      	uxth	r6, r6
		for(int c = GAME_BOARD_BLOCKS_COLS_OFFSET; c < GAME_BOARD_BLOCKS_COLS - GAME_BOARD_BLOCKS_COLS_OFFSET;c++ )
 8002d3e:	2ea0      	cmp	r6, #160	; 0xa0
 8002d40:	d1e4      	bne.n	8002d0c <drawGameBoard+0x78>
 8002d42:	370d      	adds	r7, #13
 8002d44:	b2bf      	uxth	r7, r7
	for(int r = GAME_BOARD_BLOCKS_ROWS_OFFSET; r < GAME_BOARD_BLOCKS_ROWS - GAME_BOARD_BLOCKS_ROWS_OFFSET; r++)
 8002d46:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
 8002d4a:	f108 080e 	add.w	r8, r8, #14
 8002d4e:	d1d9      	bne.n	8002d04 <drawGameBoard+0x70>
			}
		}
	}
	drawTetrisBlock(gameS.gameBlock);
 8002d50:	4c10      	ldr	r4, [pc, #64]	; (8002d94 <drawGameBoard+0x100>)
 8002d52:	466e      	mov	r6, sp
 8002d54:	f8d4 c166 	ldr.w	ip, [r4, #358]	; 0x166
 8002d58:	f8d4 e16a 	ldr.w	lr, [r4, #362]	; 0x16a
 8002d5c:	f8d4 216e 	ldr.w	r2, [r4, #366]	; 0x16e
 8002d60:	f8d4 3172 	ldr.w	r3, [r4, #370]	; 0x172
 8002d64:	f504 75bb 	add.w	r5, r4, #374	; 0x176
 8002d68:	f504 74cb 	add.w	r4, r4, #406	; 0x196
 8002d6c:	6828      	ldr	r0, [r5, #0]
 8002d6e:	6869      	ldr	r1, [r5, #4]
 8002d70:	4637      	mov	r7, r6
 8002d72:	c703      	stmia	r7!, {r0, r1}
 8002d74:	3508      	adds	r5, #8
 8002d76:	42a5      	cmp	r5, r4
 8002d78:	463e      	mov	r6, r7
 8002d7a:	d1f7      	bne.n	8002d6c <drawGameBoard+0xd8>
 8002d7c:	8829      	ldrh	r1, [r5, #0]
 8002d7e:	8039      	strh	r1, [r7, #0]
 8002d80:	4660      	mov	r0, ip
 8002d82:	4671      	mov	r1, lr
 8002d84:	f7ff fb68 	bl	8002458 <drawTetrisBlock>
}
 8002d88:	b019      	add	sp, #100	; 0x64
 8002d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000400 	.word	0x20000400
 8002d94:	200002b0 	.word	0x200002b0
 8002d98:	08004d76 	.word	0x08004d76

08002d9c <detectCompleteRows>:


uint8_t detectCompleteRows(){
 8002d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9e:	4c10      	ldr	r4, [pc, #64]	; (8002de0 <detectCompleteRows+0x44>)
	int row = 0;
	int sum = 0;
	uint8_t complete = 0;
	for(int i = GAME_BOARD_BLOCKS_ROWS_OFFSET; i < GAME_BOARD_BLOCKS_ROWS-GAME_BOARD_BLOCKS_ROWS_OFFSET; i++){
 8002da0:	2302      	movs	r3, #2
	uint8_t complete = 0;
 8002da2:	2000      	movs	r0, #0
 8002da4:	260e      	movs	r6, #14
 8002da6:	4627      	mov	r7, r4
			}
		}

		if(sum == (GAME_BOARD_BLOCKS_COLS - 2*GAME_BOARD_BLOCKS_COLS_OFFSET))
		{
			gameS.gameCompleteRows[row] = 1;
 8002da8:	f04f 0e01 	mov.w	lr, #1
 8002dac:	fb06 4503 	mla	r5, r6, r3, r4
uint8_t detectCompleteRows(){
 8002db0:	2202      	movs	r2, #2
 8002db2:	2100      	movs	r1, #0
			if(gameS.gameBoard[i][j] > 0){
 8002db4:	f815 c002 	ldrb.w	ip, [r5, r2]
 8002db8:	f1bc 0f00 	cmp.w	ip, #0
 8002dbc:	d000      	beq.n	8002dc0 <detectCompleteRows+0x24>
				sum++;
 8002dbe:	3101      	adds	r1, #1
		for(int j = GAME_BOARD_BLOCKS_COLS_OFFSET; j < GAME_BOARD_BLOCKS_COLS - GAME_BOARD_BLOCKS_COLS_OFFSET;j++ ){
 8002dc0:	3201      	adds	r2, #1
 8002dc2:	2a0c      	cmp	r2, #12
 8002dc4:	d1f6      	bne.n	8002db4 <detectCompleteRows+0x18>
		if(sum == (GAME_BOARD_BLOCKS_COLS - 2*GAME_BOARD_BLOCKS_COLS_OFFSET))
 8002dc6:	290a      	cmp	r1, #10
			gameS.gameCompleteRows[row] = 1;
 8002dc8:	bf04      	itt	eq
 8002dca:	18fa      	addeq	r2, r7, r3
			complete++;
 8002dcc:	3001      	addeq	r0, #1
	for(int i = GAME_BOARD_BLOCKS_ROWS_OFFSET; i < GAME_BOARD_BLOCKS_ROWS-GAME_BOARD_BLOCKS_ROWS_OFFSET; i++){
 8002dce:	f103 0301 	add.w	r3, r3, #1
			gameS.gameCompleteRows[row] = 1;
 8002dd2:	bf04      	itt	eq
 8002dd4:	f882 e14e 	strbeq.w	lr, [r2, #334]	; 0x14e
			complete++;
 8002dd8:	b2c0      	uxtbeq	r0, r0
	for(int i = GAME_BOARD_BLOCKS_ROWS_OFFSET; i < GAME_BOARD_BLOCKS_ROWS-GAME_BOARD_BLOCKS_ROWS_OFFSET; i++){
 8002dda:	2b16      	cmp	r3, #22
 8002ddc:	d1e6      	bne.n	8002dac <detectCompleteRows+0x10>
		}
		row++;
	}
	return complete;
}
 8002dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de0:	200002b0 	.word	0x200002b0

08002de4 <shapePositionValid>:

uint8_t shapePositionValid(tetrisBlocksShapeTypeDef shape, int xoffset, int yoffset){
 8002de4:	b084      	sub	sp, #16
 8002de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de8:	ac05      	add	r4, sp, #20
 8002dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t valid = 1;
	int row = 0,col = 0;
	for(int i= gameP.row + yoffset; i < gameP.row + yoffset + 5; i++)
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <shapePositionValid+0x64>)
 8002df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002df2:	881c      	ldrh	r4, [r3, #0]
	{
		col = 0;
		for(int j =  gameP.column + xoffset; j < gameP.column + xoffset + 5; j++)
 8002df4:	885d      	ldrh	r5, [r3, #2]
 8002df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002df8:	f8df e050 	ldr.w	lr, [pc, #80]	; 8002e4c <shapePositionValid+0x68>
 8002dfc:	441d      	add	r5, r3
	for(int i= gameP.row + yoffset; i < gameP.row + yoffset + 5; i++)
 8002dfe:	4414      	add	r4, r2
	int row = 0,col = 0;
 8002e00:	2300      	movs	r3, #0
	uint8_t valid = 1;
 8002e02:	2001      	movs	r0, #1
 8002e04:	270e      	movs	r7, #14
	for(int i= gameP.row + yoffset; i < gameP.row + yoffset + 5; i++)
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d103      	bne.n	8002e12 <shapePositionValid+0x2e>
		}

		row++;
	}
	return valid;
}
 8002e0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8002e0e:	b004      	add	sp, #16
 8002e10:	4770      	bx	lr
 8002e12:	18e1      	adds	r1, r4, r3
 8002e14:	aa05      	add	r2, sp, #20
 8002e16:	fb07 5101 	mla	r1, r7, r1, r5
 8002e1a:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8002e1e:	4416      	add	r6, r2
 8002e20:	4471      	add	r1, lr
		col = 0;
 8002e22:	2200      	movs	r2, #0
		for(int j =  gameP.column + xoffset; j < gameP.column + xoffset + 5; j++)
 8002e24:	2a05      	cmp	r2, #5
 8002e26:	d101      	bne.n	8002e2c <shapePositionValid+0x48>
		row++;
 8002e28:	3301      	adds	r3, #1
 8002e2a:	e7ec      	b.n	8002e06 <shapePositionValid+0x22>
			if(gameS.gameBoard[i][j] > 0 && shape.shape[row][col] == 1)
 8002e2c:	f811 c002 	ldrb.w	ip, [r1, r2]
 8002e30:	f1bc 0f00 	cmp.w	ip, #0
 8002e34:	d005      	beq.n	8002e42 <shapePositionValid+0x5e>
 8002e36:	f816 c002 	ldrb.w	ip, [r6, r2]
				valid = 0;
 8002e3a:	f1bc 0f01 	cmp.w	ip, #1
 8002e3e:	bf08      	it	eq
 8002e40:	2000      	moveq	r0, #0
			col++;
 8002e42:	3201      	adds	r2, #1
 8002e44:	e7ee      	b.n	8002e24 <shapePositionValid+0x40>
 8002e46:	bf00      	nop
 8002e48:	200004a0 	.word	0x200004a0
 8002e4c:	200002b0 	.word	0x200002b0

08002e50 <positionValid>:
uint8_t positionValid(int xoffset, int yoffset)
{
	uint8_t valid = 1;
	int row = 0,col = 0;

	for(int i= gameP.row + yoffset; i < gameP.row + yoffset + 5; i++)
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <positionValid+0x78>)
 8002e52:	8813      	ldrh	r3, [r2, #0]
 8002e54:	4419      	add	r1, r3
					valid = 0;
				}
				col++;
			}
		}else{
			for(int j =  gameP.column + xoffset; j < gameP.column + xoffset + 5; j++)
 8002e56:	8853      	ldrh	r3, [r2, #2]
{
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	4c1c      	ldr	r4, [pc, #112]	; (8002ecc <positionValid+0x7c>)
 8002e5c:	220e      	movs	r2, #14
			for(int j =  gameP.column + xoffset; j < gameP.column + xoffset + 5; j++)
 8002e5e:	4403      	add	r3, r0
 8002e60:	fb02 3101 	mla	r1, r2, r1, r3
	for(int i= gameP.row + yoffset; i < gameP.row + yoffset + 5; i++)
 8002e64:	2600      	movs	r6, #0
	uint8_t valid = 1;
 8002e66:	2201      	movs	r2, #1
 8002e68:	4627      	mov	r7, r4
	for(int i= gameP.row + yoffset; i < gameP.row + yoffset + 5; i++)
 8002e6a:	2e46      	cmp	r6, #70	; 0x46
 8002e6c:	d101      	bne.n	8002e72 <positionValid+0x22>
		}

		row++;
	}
	return valid;
}
 8002e6e:	4610      	mov	r0, r2
 8002e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e72:	1873      	adds	r3, r6, r1
		if(xoffset < 0)
 8002e74:	2800      	cmp	r0, #0
 8002e76:	443b      	add	r3, r7
		col = 0;
 8002e78:	f04f 0500 	mov.w	r5, #0
		if(xoffset < 0)
 8002e7c:	da21      	bge.n	8002ec2 <positionValid+0x72>
			for(int j =  gameP.column - (-xoffset); j < gameP.column - (-xoffset) + 5; j++)
 8002e7e:	2d05      	cmp	r5, #5
 8002e80:	d102      	bne.n	8002e88 <positionValid+0x38>
 8002e82:	3405      	adds	r4, #5
 8002e84:	360e      	adds	r6, #14
 8002e86:	e7f0      	b.n	8002e6a <positionValid+0x1a>
				if(gameS.gameBoard[i][j] > 0 && gameS.gameBlock.shape.shape[row][col] == 1)
 8002e88:	f813 e005 	ldrb.w	lr, [r3, r5]
 8002e8c:	f1be 0f00 	cmp.w	lr, #0
 8002e90:	d007      	beq.n	8002ea2 <positionValid+0x52>
 8002e92:	eb04 0e05 	add.w	lr, r4, r5
 8002e96:	f89e e16f 	ldrb.w	lr, [lr, #367]	; 0x16f
					valid = 0;
 8002e9a:	f1be 0f01 	cmp.w	lr, #1
 8002e9e:	bf08      	it	eq
 8002ea0:	2200      	moveq	r2, #0
				col++;
 8002ea2:	3501      	adds	r5, #1
 8002ea4:	e7eb      	b.n	8002e7e <positionValid+0x2e>
				if(gameS.gameBoard[i][j] > 0 && gameS.gameBlock.shape.shape[row][col] == 1)
 8002ea6:	f813 e005 	ldrb.w	lr, [r3, r5]
 8002eaa:	f1be 0f00 	cmp.w	lr, #0
 8002eae:	d007      	beq.n	8002ec0 <positionValid+0x70>
 8002eb0:	eb04 0e05 	add.w	lr, r4, r5
 8002eb4:	f89e e16f 	ldrb.w	lr, [lr, #367]	; 0x16f
					valid = 0;
 8002eb8:	f1be 0f01 	cmp.w	lr, #1
 8002ebc:	bf08      	it	eq
 8002ebe:	2200      	moveq	r2, #0
				col++;
 8002ec0:	3501      	adds	r5, #1
			for(int j =  gameP.column + xoffset; j < gameP.column + xoffset + 5; j++)
 8002ec2:	2d05      	cmp	r5, #5
 8002ec4:	d1ef      	bne.n	8002ea6 <positionValid+0x56>
 8002ec6:	e7dc      	b.n	8002e82 <positionValid+0x32>
 8002ec8:	200004a0 	.word	0x200004a0
 8002ecc:	200002b0 	.word	0x200002b0

08002ed0 <nextRowPositionValid>:

uint8_t nextRowPositionValid(){
	return positionValid(0,1);
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7ff bfbc 	b.w	8002e50 <positionValid>

08002ed8 <nextLeftPositionValid>:
}

uint8_t nextLeftPositionValid(){
	return positionValid(-1,0);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f04f 30ff 	mov.w	r0, #4294967295
 8002ede:	f7ff bfb7 	b.w	8002e50 <positionValid>

08002ee2 <nextRightPositionValid>:
}

uint8_t nextRightPositionValid()
{
	return positionValid(1,0);
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7ff bfb3 	b.w	8002e50 <positionValid>

08002eea <tetrisBlockPositionsToBoard>:
}

tetrisBoardPositionsTypeDef tetrisBlockPositionsToBoard(tetrisBlockPropertiesTypeDef block)
{
 8002eea:	b084      	sub	sp, #16
 8002eec:	b507      	push	{r0, r1, r2, lr}
 8002eee:	f10d 0e10 	add.w	lr, sp, #16
 8002ef2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	tetrisBoardPositionsTypeDef pb;


	pb.column = GAME_BOARD_BLOCKS_COLS_OFFSET + (block.pos.x - GAME_BOARD_START_X )/(block.psize + 1);
 8002ef6:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002efa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8002efe:	1c51      	adds	r1, r2, #1
	pb.row = GAME_BOARD_BLOCKS_ROWS_OFFSET + (block.pos.y - GAME_BOARD_START_Y )/(block.psize + 1) ;
 8002f00:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8002f04:	3a28      	subs	r2, #40	; 0x28
 8002f06:	fb92 f2f1 	sdiv	r2, r2, r1


	return pb;
 8002f0a:	3202      	adds	r2, #2
 8002f0c:	b292      	uxth	r2, r2
	pb.column = GAME_BOARD_BLOCKS_COLS_OFFSET + (block.pos.x - GAME_BOARD_START_X )/(block.psize + 1);
 8002f0e:	3b1e      	subs	r3, #30
	return pb;
 8002f10:	2000      	movs	r0, #0
	pb.column = GAME_BOARD_BLOCKS_COLS_OFFSET + (block.pos.x - GAME_BOARD_START_X )/(block.psize + 1);
 8002f12:	fb93 f3f1 	sdiv	r3, r3, r1
	return pb;
 8002f16:	3302      	adds	r3, #2
 8002f18:	f362 000f 	bfi	r0, r2, #0, #16
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002f22:	b003      	add	sp, #12
 8002f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f28:	b004      	add	sp, #16
 8002f2a:	4770      	bx	lr

08002f2c <pickRandomBlock>:
}
uint8_t blockLimitPositionReached(tetrisBlockPropertiesTypeDef block){

}

void pickRandomBlock(tetrisBlockPropertiesTypeDef* block, tetrisBlockSizesTypeDef s){
 8002f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_RNG_GenerateRandomNumber(&hrng,&randomNumberBlockType);
 8002f30:	4d24      	ldr	r5, [pc, #144]	; (8002fc4 <pickRandomBlock+0x98>)
void pickRandomBlock(tetrisBlockPropertiesTypeDef* block, tetrisBlockSizesTypeDef s){
 8002f32:	4604      	mov	r4, r0
 8002f34:	b08b      	sub	sp, #44	; 0x2c
 8002f36:	460f      	mov	r7, r1
	HAL_RNG_GenerateRandomNumber(&hrng,&randomNumberBlockType);
 8002f38:	4823      	ldr	r0, [pc, #140]	; (8002fc8 <pickRandomBlock+0x9c>)
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	f7fd ff5a 	bl	8000df4 <HAL_RNG_GenerateRandomNumber>
	uint32_t n = (randomNumberBlockType & 0x00FFFFFF)/2396745;
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <pickRandomBlock+0xa0>)

	block->blockType = (n == 0)? 1: n;
	block->blockOrientation = BLOCK_ORIENTATION_PORTRAIT;
	block->psize = s;
 8002f44:	7227      	strb	r7, [r4, #8]
	uint32_t n = (randomNumberBlockType & 0x00FFFFFF)/2396745;
 8002f46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f4a:	fbb3 f3f2 	udiv	r3, r3, r2
	block->blockOrientation = BLOCK_ORIENTATION_PORTRAIT;
 8002f4e:	2200      	movs	r2, #0
	block->blockType = (n == 0)? 1: n;
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf08      	it	eq
 8002f54:	2301      	moveq	r3, #1
	block->blockOrientation = BLOCK_ORIENTATION_PORTRAIT;
 8002f56:	7062      	strb	r2, [r4, #1]
	block->blockColor = BLOCK_COLORS[block->blockType];
 8002f58:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <pickRandomBlock+0xa4>)
	block->blockType = (n == 0)? 1: n;
 8002f5a:	7023      	strb	r3, [r4, #0]
	block->blockColor = BLOCK_COLORS[block->blockType];
 8002f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f60:	8063      	strh	r3, [r4, #2]
	copyBlockShape(&(block->shape.shape),*block);
 8002f62:	f8d4 8000 	ldr.w	r8, [r4]
 8002f66:	6862      	ldr	r2, [r4, #4]
 8002f68:	68a3      	ldr	r3, [r4, #8]
 8002f6a:	f104 0c09 	add.w	ip, r4, #9
 8002f6e:	f104 050c 	add.w	r5, r4, #12
 8002f72:	466e      	mov	r6, sp
 8002f74:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8002f78:	6828      	ldr	r0, [r5, #0]
 8002f7a:	6869      	ldr	r1, [r5, #4]
 8002f7c:	46b6      	mov	lr, r6
 8002f7e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8002f82:	3508      	adds	r5, #8
 8002f84:	454d      	cmp	r5, r9
 8002f86:	4676      	mov	r6, lr
 8002f88:	d1f6      	bne.n	8002f78 <pickRandomBlock+0x4c>
 8002f8a:	6828      	ldr	r0, [r5, #0]
 8002f8c:	f8ce 0000 	str.w	r0, [lr]
 8002f90:	88a9      	ldrh	r1, [r5, #4]
 8002f92:	f8ae 1004 	strh.w	r1, [lr, #4]
 8002f96:	4660      	mov	r0, ip
 8002f98:	4641      	mov	r1, r8
 8002f9a:	f7ff fbc7 	bl	800272c <copyBlockShape>
	if(s == BLOCK_SIZE_HUGE)
 8002f9e:	2f0c      	cmp	r7, #12
 8002fa0:	d106      	bne.n	8002fb0 <pickRandomBlock+0x84>
	{
		block->pos.x = GAME_BOARD_START_X + GAME_BOARD_WIDTH/2 - 2*(GAME_BOARD_BLOCK_SIZE+1);
 8002fa2:	2345      	movs	r3, #69	; 0x45
 8002fa4:	80a3      	strh	r3, [r4, #4]
		block->pos.y  = GAME_BOARD_START_Y;
 8002fa6:	2328      	movs	r3, #40	; 0x28
	}else if(s == BLOCK_SIZE_SMALL)
	{
		block->pos.x = NEXT_BLOCK_POS_X;
		block->pos.y = NEXT_BLOCK_POS_Y + 3;
 8002fa8:	80e3      	strh	r3, [r4, #6]
		block->pos.x = NEXT_BLOCK_POS_X;
		block->pos.y = NEXT_BLOCK_POS_Y + 3;
	}


}
 8002faa:	b00b      	add	sp, #44	; 0x2c
 8002fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}else if(s == BLOCK_SIZE_SMALL)
 8002fb0:	2f05      	cmp	r7, #5
 8002fb2:	d103      	bne.n	8002fbc <pickRandomBlock+0x90>
		block->pos.x = NEXT_BLOCK_POS_X;
 8002fb4:	23b4      	movs	r3, #180	; 0xb4
 8002fb6:	80a3      	strh	r3, [r4, #4]
		block->pos.y = NEXT_BLOCK_POS_Y + 3;
 8002fb8:	2385      	movs	r3, #133	; 0x85
 8002fba:	e7f5      	b.n	8002fa8 <pickRandomBlock+0x7c>
	}else if(s == BLOCK_SIZE_MEDIUM)
 8002fbc:	2f08      	cmp	r7, #8
 8002fbe:	d1f4      	bne.n	8002faa <pickRandomBlock+0x7e>
 8002fc0:	e7f8      	b.n	8002fb4 <pickRandomBlock+0x88>
 8002fc2:	bf00      	nop
 8002fc4:	200002ac 	.word	0x200002ac
 8002fc8:	20000480 	.word	0x20000480
 8002fcc:	00249249 	.word	0x00249249
 8002fd0:	08004d76 	.word	0x08004d76

08002fd4 <updateGameBlock>:

void updateGameBlock(tetrisBlockPropertiesTypeDef* block, tetrisBlockPropertiesTypeDef* _block, uint8_t t){
 8002fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fd8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8002fdc:	f8d0 8000 	ldr.w	r8, [r0]
 8002fe0:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002fe4:	68c3      	ldr	r3, [r0, #12]
 8002fe6:	460d      	mov	r5, r1
 8002fe8:	b08b      	sub	sp, #44	; 0x2c
 8002fea:	4604      	mov	r4, r0
 8002fec:	f100 0110 	add.w	r1, r0, #16
	if(t == 0) // copy
 8002ff0:	bb7a      	cbnz	r2, 8003052 <updateGameBlock+0x7e>
	{
		deleteBlock(*block);
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	466e      	mov	r6, sp
 8002ff6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002ffa:	6810      	ldr	r0, [r2, #0]
 8002ffc:	6851      	ldr	r1, [r2, #4]
 8002ffe:	4637      	mov	r7, r6
 8003000:	c703      	stmia	r7!, {r0, r1}
 8003002:	3208      	adds	r2, #8
 8003004:	454a      	cmp	r2, r9
 8003006:	463e      	mov	r6, r7
 8003008:	d1f7      	bne.n	8002ffa <updateGameBlock+0x26>
 800300a:	8812      	ldrh	r2, [r2, #0]
 800300c:	803a      	strh	r2, [r7, #0]
 800300e:	4661      	mov	r1, ip
 8003010:	4672      	mov	r2, lr
 8003012:	4640      	mov	r0, r8
 8003014:	f7ff fa84 	bl	8002520 <deleteBlock>
		_block->blockColor = block->blockColor;
 8003018:	8863      	ldrh	r3, [r4, #2]
 800301a:	806b      	strh	r3, [r5, #2]
		_block->blockOrientation = block->blockOrientation;
 800301c:	7863      	ldrb	r3, [r4, #1]
 800301e:	706b      	strb	r3, [r5, #1]
		_block->blockType = block->blockType;
 8003020:	4623      	mov	r3, r4
 8003022:	462a      	mov	r2, r5
 8003024:	f813 1b09 	ldrb.w	r1, [r3], #9
 8003028:	f802 1b09 	strb.w	r1, [r2], #9
		_block->shape = block->shape;
 800302c:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8003030:	f853 0b04 	ldr.w	r0, [r3], #4
 8003034:	f842 0b04 	str.w	r0, [r2], #4
 8003038:	428b      	cmp	r3, r1
 800303a:	d1f9      	bne.n	8003030 <updateGameBlock+0x5c>
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	7013      	strb	r3, [r2, #0]
		_block->psize = block->psize;
 8003040:	7a23      	ldrb	r3, [r4, #8]
 8003042:	722b      	strb	r3, [r5, #8]
		_block->pos.x = block->pos.x;
 8003044:	88a3      	ldrh	r3, [r4, #4]
 8003046:	80ab      	strh	r3, [r5, #4]
		_block->pos.y = block->pos.y;
 8003048:	88e3      	ldrh	r3, [r4, #6]
		_block->blockOrientation = block->blockOrientation;
		_block->blockType = block->blockType;
		_block->shape = block->shape;
		_block->psize = BLOCK_SIZE_HUGE;
		_block->pos.x = GAME_BOARD_START_X + GAME_BOARD_WIDTH/2 - 2*(GAME_BOARD_BLOCK_SIZE+1);
		_block->pos.y = GAME_BOARD_START_Y;
 800304a:	80eb      	strh	r3, [r5, #6]
	}
}
 800304c:	b00b      	add	sp, #44	; 0x2c
 800304e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		deleteBlock(*block);
 8003052:	460a      	mov	r2, r1
 8003054:	466e      	mov	r6, sp
 8003056:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800305a:	6810      	ldr	r0, [r2, #0]
 800305c:	6851      	ldr	r1, [r2, #4]
 800305e:	4637      	mov	r7, r6
 8003060:	c703      	stmia	r7!, {r0, r1}
 8003062:	3208      	adds	r2, #8
 8003064:	454a      	cmp	r2, r9
 8003066:	463e      	mov	r6, r7
 8003068:	d1f7      	bne.n	800305a <updateGameBlock+0x86>
 800306a:	8812      	ldrh	r2, [r2, #0]
 800306c:	803a      	strh	r2, [r7, #0]
 800306e:	4661      	mov	r1, ip
 8003070:	4672      	mov	r2, lr
 8003072:	4640      	mov	r0, r8
 8003074:	f7ff fa54 	bl	8002520 <deleteBlock>
		_block->blockColor = block->blockColor;
 8003078:	8863      	ldrh	r3, [r4, #2]
 800307a:	806b      	strh	r3, [r5, #2]
		_block->blockOrientation = block->blockOrientation;
 800307c:	7863      	ldrb	r3, [r4, #1]
 800307e:	706b      	strb	r3, [r5, #1]
		_block->blockType = block->blockType;
 8003080:	4623      	mov	r3, r4
 8003082:	462a      	mov	r2, r5
 8003084:	f813 1b09 	ldrb.w	r1, [r3], #9
 8003088:	f802 1b09 	strb.w	r1, [r2], #9
		_block->shape = block->shape;
 800308c:	3421      	adds	r4, #33	; 0x21
 800308e:	f853 1b04 	ldr.w	r1, [r3], #4
 8003092:	f842 1b04 	str.w	r1, [r2], #4
 8003096:	42a3      	cmp	r3, r4
 8003098:	d1f9      	bne.n	800308e <updateGameBlock+0xba>
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	7013      	strb	r3, [r2, #0]
		_block->psize = BLOCK_SIZE_HUGE;
 800309e:	230c      	movs	r3, #12
 80030a0:	722b      	strb	r3, [r5, #8]
		_block->pos.x = GAME_BOARD_START_X + GAME_BOARD_WIDTH/2 - 2*(GAME_BOARD_BLOCK_SIZE+1);
 80030a2:	2345      	movs	r3, #69	; 0x45
 80030a4:	80ab      	strh	r3, [r5, #4]
		_block->pos.y = GAME_BOARD_START_Y;
 80030a6:	2328      	movs	r3, #40	; 0x28
 80030a8:	e7cf      	b.n	800304a <updateGameBlock+0x76>
	...

080030ac <calculateNextLevel>:


void calculateNextLevel()
{
	if(gameT.tetrisCurrentTime >= ultraTimeLimit || gameS.gameScore >= ultraScoreLimit)
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <calculateNextLevel+0x4c>)
 80030ae:	4a13      	ldr	r2, [pc, #76]	; (80030fc <calculateNextLevel+0x50>)
 80030b0:	6858      	ldr	r0, [r3, #4]
 80030b2:	4290      	cmp	r0, r2
{
 80030b4:	b510      	push	{r4, lr}
 80030b6:	461a      	mov	r2, r3
	if(gameT.tetrisCurrentTime >= ultraTimeLimit || gameS.gameScore >= ultraScoreLimit)
 80030b8:	d805      	bhi.n	80030c6 <calculateNextLevel+0x1a>
 80030ba:	4911      	ldr	r1, [pc, #68]	; (8003100 <calculateNextLevel+0x54>)
 80030bc:	f8b1 1164 	ldrh.w	r1, [r1, #356]	; 0x164
 80030c0:	f5b1 6f61 	cmp.w	r1, #3600	; 0xe10
 80030c4:	d302      	bcc.n	80030cc <calculateNextLevel+0x20>
	{
		gameT.tetrisSpeed = SPEED_VERY_HIGH;
 80030c6:	23fa      	movs	r3, #250	; 0xfa

	}else if(gameT.tetrisCurrentTime >= highTimeLimit || gameS.gameScore >= highScoreLimit)
	{
		gameT.tetrisSpeed = SPEED_HIGH;
	}else if(gameT.tetrisCurrentTime >= mediumTimeLimit || gameS.gameScore >= mediumScoreLimit){
		gameT.tetrisSpeed = SPEED_MEDIUM;
 80030c8:	60d3      	str	r3, [r2, #12]
 80030ca:	bd10      	pop	{r4, pc}
	}else if(gameT.tetrisCurrentTime >= highTimeLimit || gameS.gameScore >= highScoreLimit)
 80030cc:	4c0d      	ldr	r4, [pc, #52]	; (8003104 <calculateNextLevel+0x58>)
 80030ce:	42a0      	cmp	r0, r4
 80030d0:	d802      	bhi.n	80030d8 <calculateNextLevel+0x2c>
 80030d2:	f5b1 7f61 	cmp.w	r1, #900	; 0x384
 80030d6:	d302      	bcc.n	80030de <calculateNextLevel+0x32>
		gameT.tetrisSpeed = SPEED_HIGH;
 80030d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030dc:	e7f4      	b.n	80030c8 <calculateNextLevel+0x1c>
	}else if(gameT.tetrisCurrentTime >= mediumTimeLimit || gameS.gameScore >= mediumScoreLimit){
 80030de:	4c0a      	ldr	r4, [pc, #40]	; (8003108 <calculateNextLevel+0x5c>)
 80030e0:	42a0      	cmp	r0, r4
 80030e2:	d802      	bhi.n	80030ea <calculateNextLevel+0x3e>
 80030e4:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
 80030e8:	d302      	bcc.n	80030f0 <calculateNextLevel+0x44>
		gameT.tetrisSpeed = SPEED_MEDIUM;
 80030ea:	f240 23ee 	movw	r3, #750	; 0x2ee
 80030ee:	e7eb      	b.n	80030c8 <calculateNextLevel+0x1c>

	}else{
		gameT.tetrisSpeed = SPEED_NORMAL;
 80030f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	bd10      	pop	{r4, pc}
 80030f8:	20000290 	.word	0x20000290
 80030fc:	0007a11f 	.word	0x0007a11f
 8003100:	200002b0 	.word	0x200002b0
 8003104:	00041eaf 	.word	0x00041eaf
 8003108:	0001d4bf 	.word	0x0001d4bf

0800310c <startGame>:
{
 800310c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003110:	b08b      	sub	sp, #44	; 0x2c
	tetrisDrawStatus();
 8003112:	f000 fb17 	bl	8003744 <tetrisDrawStatus>
	gameS.gameScore = 0;
 8003116:	4c49      	ldr	r4, [pc, #292]	; (800323c <startGame+0x130>)
    tetrisDrawGameBoard();
 8003118:	f000 fa2c 	bl	8003574 <tetrisDrawGameBoard>
	gameTouchSignals.reset = 0;
 800311c:	4a48      	ldr	r2, [pc, #288]	; (8003240 <startGame+0x134>)
	gameS.gameScore = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	gameS.gameOverFlag = 0;
 8003124:	f884 31ca 	strb.w	r3, [r4, #458]	; 0x1ca
	gameS.gameOverDrawFlag = 0;
 8003128:	f884 31cb 	strb.w	r3, [r4, #459]	; 0x1cb
	gameS.clearRowsFlag = 0;
 800312c:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
	gameTouchSignals.reset = 0;
 8003130:	7053      	strb	r3, [r2, #1]
	gameTouchSignals.start = 0;
 8003132:	7093      	strb	r3, [r2, #2]
 8003134:	f06f 0001 	mvn.w	r0, #1
 8003138:	260e      	movs	r6, #14
				gameS.gameBoard[i][k] = 0x01;
 800313a:	2501      	movs	r5, #1
 800313c:	fb06 4200 	mla	r2, r6, r0, r4
 8003140:	321c      	adds	r2, #28
{
 8003142:	f06f 0101 	mvn.w	r1, #1
			if((i < 2 || i >= (GAME_BOARD_BLOCKS_ROWS - 2)))
 8003146:	2813      	cmp	r0, #19
 8003148:	d974      	bls.n	8003234 <startGame+0x128>
				gameS.gameBoard[i][k] = 0x01;
 800314a:	7015      	strb	r5, [r2, #0]
 800314c:	3101      	adds	r1, #1
		for(int k = 0; k < GAME_BOARD_BLOCKS_COLS; k++){
 800314e:	290c      	cmp	r1, #12
 8003150:	f102 0201 	add.w	r2, r2, #1
 8003154:	d1f7      	bne.n	8003146 <startGame+0x3a>
 8003156:	3001      	adds	r0, #1
	for(int i = 0; i < GAME_BOARD_BLOCKS_ROWS; i++)
 8003158:	2816      	cmp	r0, #22
 800315a:	d1ef      	bne.n	800313c <startGame+0x30>
	pickRandomBlock(&gameS.gameBlock,BLOCK_SIZE_HUGE);
 800315c:	4839      	ldr	r0, [pc, #228]	; (8003244 <startGame+0x138>)
	gameT.tetrisReactionTime = HAL_GetTick();
 800315e:	4d3a      	ldr	r5, [pc, #232]	; (8003248 <startGame+0x13c>)
	pickRandomBlock(&gameS.gameBlock,BLOCK_SIZE_HUGE);
 8003160:	f7ff fee4 	bl	8002f2c <pickRandomBlock>
	pickRandomBlock(&gameS.nextGameBlock,BLOCK_SIZE_MEDIUM);
 8003164:	2108      	movs	r1, #8
 8003166:	4839      	ldr	r0, [pc, #228]	; (800324c <startGame+0x140>)
 8003168:	f7ff fee0 	bl	8002f2c <pickRandomBlock>
	gameT.tetrisReactionTime = HAL_GetTick();
 800316c:	f7fd fa52 	bl	8000614 <HAL_GetTick>
 8003170:	60a8      	str	r0, [r5, #8]
	gameT.tetrisCurrtenTimeStart = HAL_GetTick();
 8003172:	f7fd fa4f 	bl	8000614 <HAL_GetTick>
	gameT.tetrisCurrentTime = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	606b      	str	r3, [r5, #4]
	gameT.tetrisFrequency = SPEED_FREQ;
 800317a:	2396      	movs	r3, #150	; 0x96
 800317c:	612b      	str	r3, [r5, #16]
	gameT.tetrisSpeed =  SPEED_NORMAL;
 800317e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003182:	60eb      	str	r3, [r5, #12]
	gameT.tetrisCurrtenTimeStart = HAL_GetTick();
 8003184:	6028      	str	r0, [r5, #0]
	gameP = tetrisBlockPositionsToBoard(gameS.gameBlock);
 8003186:	4d32      	ldr	r5, [pc, #200]	; (8003250 <startGame+0x144>)
	calculateNextLevel();
 8003188:	f7ff ff90 	bl	80030ac <calculateNextLevel>
	gameP = tetrisBlockPositionsToBoard(gameS.gameBlock);
 800318c:	f105 0e20 	add.w	lr, r5, #32
 8003190:	f8d4 9166 	ldr.w	r9, [r4, #358]	; 0x166
 8003194:	f8d4 c16a 	ldr.w	ip, [r4, #362]	; 0x16a
 8003198:	f8d4 216e 	ldr.w	r2, [r4, #366]	; 0x16e
 800319c:	f8d4 3172 	ldr.w	r3, [r4, #370]	; 0x172
 80031a0:	466e      	mov	r6, sp
 80031a2:	46f0      	mov	r8, lr
 80031a4:	6828      	ldr	r0, [r5, #0]
 80031a6:	6869      	ldr	r1, [r5, #4]
 80031a8:	4637      	mov	r7, r6
 80031aa:	c703      	stmia	r7!, {r0, r1}
 80031ac:	3508      	adds	r5, #8
 80031ae:	4575      	cmp	r5, lr
 80031b0:	463e      	mov	r6, r7
 80031b2:	d1f7      	bne.n	80031a4 <startGame+0x98>
 80031b4:	8829      	ldrh	r1, [r5, #0]
 80031b6:	8039      	strh	r1, [r7, #0]
 80031b8:	4648      	mov	r0, r9
 80031ba:	4661      	mov	r1, ip
 80031bc:	f7ff fe95 	bl	8002eea <tetrisBlockPositionsToBoard>
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <startGame+0x148>)
	drawTetrisBlock(gameS.gameBlock);
 80031c2:	f8d4 c166 	ldr.w	ip, [r4, #358]	; 0x166
	gameP = tetrisBlockPositionsToBoard(gameS.gameBlock);
 80031c6:	8018      	strh	r0, [r3, #0]
 80031c8:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80031cc:	8058      	strh	r0, [r3, #2]
	drawTetrisBlock(gameS.gameBlock);
 80031ce:	f8d4 e16a 	ldr.w	lr, [r4, #362]	; 0x16a
 80031d2:	f8d4 216e 	ldr.w	r2, [r4, #366]	; 0x16e
 80031d6:	f8d4 3172 	ldr.w	r3, [r4, #370]	; 0x172
 80031da:	4d1d      	ldr	r5, [pc, #116]	; (8003250 <startGame+0x144>)
 80031dc:	466e      	mov	r6, sp
 80031de:	6828      	ldr	r0, [r5, #0]
 80031e0:	6869      	ldr	r1, [r5, #4]
 80031e2:	4637      	mov	r7, r6
 80031e4:	c703      	stmia	r7!, {r0, r1}
 80031e6:	3508      	adds	r5, #8
 80031e8:	4545      	cmp	r5, r8
 80031ea:	463e      	mov	r6, r7
 80031ec:	d1f7      	bne.n	80031de <startGame+0xd2>
 80031ee:	8829      	ldrh	r1, [r5, #0]
 80031f0:	8039      	strh	r1, [r7, #0]
 80031f2:	4660      	mov	r0, ip
 80031f4:	4671      	mov	r1, lr
 80031f6:	f7ff f92f 	bl	8002458 <drawTetrisBlock>
	drawTetrisBlock(gameS.nextGameBlock);
 80031fa:	f8d4 e198 	ldr.w	lr, [r4, #408]	; 0x198
 80031fe:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
 8003202:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 8003206:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800320a:	4c13      	ldr	r4, [pc, #76]	; (8003258 <startGame+0x14c>)
 800320c:	466d      	mov	r5, sp
 800320e:	f104 0c20 	add.w	ip, r4, #32
 8003212:	6820      	ldr	r0, [r4, #0]
 8003214:	6861      	ldr	r1, [r4, #4]
 8003216:	462e      	mov	r6, r5
 8003218:	c603      	stmia	r6!, {r0, r1}
 800321a:	3408      	adds	r4, #8
 800321c:	4564      	cmp	r4, ip
 800321e:	4635      	mov	r5, r6
 8003220:	d1f7      	bne.n	8003212 <startGame+0x106>
 8003222:	8821      	ldrh	r1, [r4, #0]
 8003224:	8031      	strh	r1, [r6, #0]
 8003226:	4670      	mov	r0, lr
 8003228:	4639      	mov	r1, r7
 800322a:	f7ff f915 	bl	8002458 <drawTetrisBlock>
}
 800322e:	b00b      	add	sp, #44	; 0x2c
 8003230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			}else if(k < 2 || k >= (GAME_BOARD_BLOCKS_COLS - 2)){
 8003234:	2909      	cmp	r1, #9
 8003236:	d888      	bhi.n	800314a <startGame+0x3e>
				gameS.gameBoard[i][k] = 0x00;
 8003238:	7013      	strb	r3, [r2, #0]
 800323a:	e787      	b.n	800314c <startGame+0x40>
 800323c:	200002b0 	.word	0x200002b0
 8003240:	20000236 	.word	0x20000236
 8003244:	20000416 	.word	0x20000416
 8003248:	20000290 	.word	0x20000290
 800324c:	20000448 	.word	0x20000448
 8003250:	20000426 	.word	0x20000426
 8003254:	200004a0 	.word	0x200004a0
 8003258:	20000458 	.word	0x20000458

0800325c <runGame>:
{
 800325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(gameS.gameOverFlag == 0){
 8003260:	4ca5      	ldr	r4, [pc, #660]	; (80034f8 <runGame+0x29c>)
 8003262:	f894 31ca 	ldrb.w	r3, [r4, #458]	; 0x1ca
{
 8003266:	b095      	sub	sp, #84	; 0x54
	if(gameS.gameOverFlag == 0){
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 811a 	bne.w	80034a2 <runGame+0x246>
		gameP = tetrisBlockPositionsToBoard(gameS.gameBlock);
 800326e:	f504 7ecb 	add.w	lr, r4, #406	; 0x196
 8003272:	f8d4 8166 	ldr.w	r8, [r4, #358]	; 0x166
 8003276:	f8d4 c16a 	ldr.w	ip, [r4, #362]	; 0x16a
 800327a:	f8d4 216e 	ldr.w	r2, [r4, #366]	; 0x16e
 800327e:	f8d4 3172 	ldr.w	r3, [r4, #370]	; 0x172
 8003282:	f504 75bb 	add.w	r5, r4, #374	; 0x176
 8003286:	466e      	mov	r6, sp
 8003288:	46f1      	mov	r9, lr
 800328a:	6828      	ldr	r0, [r5, #0]
 800328c:	6869      	ldr	r1, [r5, #4]
 800328e:	4637      	mov	r7, r6
 8003290:	c703      	stmia	r7!, {r0, r1}
 8003292:	3508      	adds	r5, #8
 8003294:	4575      	cmp	r5, lr
 8003296:	463e      	mov	r6, r7
 8003298:	d1f7      	bne.n	800328a <runGame+0x2e>
 800329a:	8829      	ldrh	r1, [r5, #0]
 800329c:	8039      	strh	r1, [r7, #0]
 800329e:	4640      	mov	r0, r8
 80032a0:	4661      	mov	r1, ip
 80032a2:	f7ff fe22 	bl	8002eea <tetrisBlockPositionsToBoard>
 80032a6:	4d95      	ldr	r5, [pc, #596]	; (80034fc <runGame+0x2a0>)
		if(gameTouchSignals.down)
 80032a8:	4e95      	ldr	r6, [pc, #596]	; (8003500 <runGame+0x2a4>)
		gameP = tetrisBlockPositionsToBoard(gameS.gameBlock);
 80032aa:	8028      	strh	r0, [r5, #0]
 80032ac:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80032b0:	8068      	strh	r0, [r5, #2]
		uint8_t validationDown = nextRowPositionValid();
 80032b2:	f7ff fe0d 	bl	8002ed0 <nextRowPositionValid>
 80032b6:	4680      	mov	r8, r0
		uint8_t validationRight = nextRightPositionValid();
 80032b8:	f7ff fe13 	bl	8002ee2 <nextRightPositionValid>
 80032bc:	4607      	mov	r7, r0
		uint8_t validationLeft = nextLeftPositionValid();
 80032be:	f7ff fe0b 	bl	8002ed8 <nextLeftPositionValid>
 80032c2:	4682      	mov	sl, r0
		calculateNextLevel();
 80032c4:	f7ff fef2 	bl	80030ac <calculateNextLevel>
		if(gameTouchSignals.down)
 80032c8:	7833      	ldrb	r3, [r6, #0]
 80032ca:	950b      	str	r5, [sp, #44]	; 0x2c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d076      	beq.n	80033be <runGame+0x162>
			tetrisUpdateDownButton(DOWN_BUTTON_PRESSED_COLOR);
 80032d0:	f64a 70e5 	movw	r0, #45029	; 0xafe5
			tetrisUpdateDownButton(DOWN_BUTTON_COLOR);
 80032d4:	f000 faa2 	bl	800381c <tetrisUpdateDownButton>
		if(gameS.clearRowsFlag > 0)
 80032d8:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
 80032dc:	b133      	cbz	r3, 80032ec <runGame+0x90>
			calculateScore();
 80032de:	f7ff fc75 	bl	8002bcc <calculateScore>
			drawGameBoard();
 80032e2:	f7ff fcd7 	bl	8002c94 <drawGameBoard>
			gameS.clearRowsFlag = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f884 31cc 	strb.w	r3, [r4, #460]	; 0x1cc
		if(gameT.tetrisReactionTime + gameT.tetrisFrequency < HAL_GetTick())
 80032ec:	4d85      	ldr	r5, [pc, #532]	; (8003504 <runGame+0x2a8>)
 80032ee:	68ab      	ldr	r3, [r5, #8]
 80032f0:	692a      	ldr	r2, [r5, #16]
 80032f2:	eb03 0b02 	add.w	fp, r3, r2
 80032f6:	f7fd f98d 	bl	8000614 <HAL_GetTick>
 80032fa:	4583      	cmp	fp, r0
 80032fc:	d237      	bcs.n	800336e <runGame+0x112>
			if(gameSignals.swap == 1)
 80032fe:	4b82      	ldr	r3, [pc, #520]	; (8003508 <runGame+0x2ac>)
 8003300:	781a      	ldrb	r2, [r3, #0]
 8003302:	2a01      	cmp	r2, #1
 8003304:	461a      	mov	r2, r3
 8003306:	d15d      	bne.n	80033c4 <runGame+0x168>
				tetrisBlocksShapeTypeDef s = getNextShape(gameS.gameBlock);
 8003308:	4e80      	ldr	r6, [pc, #512]	; (800350c <runGame+0x2b0>)
 800330a:	f8d4 a166 	ldr.w	sl, [r4, #358]	; 0x166
 800330e:	f8d4 216a 	ldr.w	r2, [r4, #362]	; 0x16a
 8003312:	f8d4 316e 	ldr.w	r3, [r4, #366]	; 0x16e
 8003316:	af0d      	add	r7, sp, #52	; 0x34
 8003318:	46ee      	mov	lr, sp
 800331a:	f106 0b20 	add.w	fp, r6, #32
 800331e:	6830      	ldr	r0, [r6, #0]
 8003320:	6871      	ldr	r1, [r6, #4]
 8003322:	46f4      	mov	ip, lr
 8003324:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8003328:	3608      	adds	r6, #8
 800332a:	455e      	cmp	r6, fp
 800332c:	46e6      	mov	lr, ip
 800332e:	d1f6      	bne.n	800331e <runGame+0xc2>
 8003330:	6830      	ldr	r0, [r6, #0]
 8003332:	f8cc 0000 	str.w	r0, [ip]
 8003336:	88b1      	ldrh	r1, [r6, #4]
 8003338:	f8ac 1004 	strh.w	r1, [ip, #4]
 800333c:	4638      	mov	r0, r7
 800333e:	4651      	mov	r1, sl
 8003340:	f7ff fc06 	bl	8002b50 <getNextShape>
				if(shapePositionValid(s,0,0) == 1){
 8003344:	2300      	movs	r3, #0
 8003346:	9304      	str	r3, [sp, #16]
 8003348:	9303      	str	r3, [sp, #12]
 800334a:	aa14      	add	r2, sp, #80	; 0x50
 800334c:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8003350:	466b      	mov	r3, sp
 8003352:	c303      	stmia	r3!, {r0, r1}
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800335a:	f7ff fd43 	bl	8002de4 <shapePositionValid>
 800335e:	2801      	cmp	r0, #1
 8003360:	d102      	bne.n	8003368 <runGame+0x10c>
					rotateBlock(&gameS.gameBlock);
 8003362:	486b      	ldr	r0, [pc, #428]	; (8003510 <runGame+0x2b4>)
 8003364:	f7ff fb84 	bl	8002a70 <rotateBlock>
			gameT.tetrisReactionTime = HAL_GetTick();
 8003368:	f7fd f954 	bl	8000614 <HAL_GetTick>
 800336c:	60a8      	str	r0, [r5, #8]
		if(gameT.tetrisCurrentTime + gameT.tetrisSpeed  + gameT.tetrisCurrtenTimeStart < HAL_GetTick() || validationDown == 0 )
 800336e:	68ee      	ldr	r6, [r5, #12]
 8003370:	686b      	ldr	r3, [r5, #4]
 8003372:	4433      	add	r3, r6
 8003374:	682e      	ldr	r6, [r5, #0]
 8003376:	441e      	add	r6, r3
 8003378:	f7fd f94c 	bl	8000614 <HAL_GetTick>
 800337c:	4286      	cmp	r6, r0
 800337e:	d303      	bcc.n	8003388 <runGame+0x12c>
 8003380:	f1b8 0f00 	cmp.w	r8, #0
 8003384:	f040 809c 	bne.w	80034c0 <runGame+0x264>
			boardColor = gameS.gameBlock.blockColor;
 8003388:	4b62      	ldr	r3, [pc, #392]	; (8003514 <runGame+0x2b8>)
 800338a:	f8b4 2168 	ldrh.w	r2, [r4, #360]	; 0x168
 800338e:	801a      	strh	r2, [r3, #0]
			tetrisDrawGameBoard();
 8003390:	f000 f8f0 	bl	8003574 <tetrisDrawGameBoard>
			if(validationDown == 1)
 8003394:	f1b8 0f01 	cmp.w	r8, #1
 8003398:	d135      	bne.n	8003406 <runGame+0x1aa>
				moveBlockDown(GAME_BOARD_BLOCK_SIZE + 1, &gameS.gameBlock);
 800339a:	495d      	ldr	r1, [pc, #372]	; (8003510 <runGame+0x2b4>)
 800339c:	200d      	movs	r0, #13
 800339e:	f7ff f8f0 	bl	8002582 <moveBlockDown>
			gameT.tetrisCurrentTime = HAL_GetTick() - gameT.tetrisCurrtenTimeStart;
 80033a2:	f7fd f937 	bl	8000614 <HAL_GetTick>
 80033a6:	682b      	ldr	r3, [r5, #0]
 80033a8:	1ac0      	subs	r0, r0, r3
			tetrisUpdateTime(gameT.tetrisCurrentTime/1000);
 80033aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
			gameT.tetrisCurrentTime = HAL_GetTick() - gameT.tetrisCurrtenTimeStart;
 80033ae:	6068      	str	r0, [r5, #4]
			tetrisUpdateTime(gameT.tetrisCurrentTime/1000);
 80033b0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80033b4:	b015      	add	sp, #84	; 0x54
 80033b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			tetrisUpdateTime(gameT.tetrisCurrentTime/1000);
 80033ba:	f000 b989 	b.w	80036d0 <tetrisUpdateTime>
			tetrisUpdateDownButton(DOWN_BUTTON_COLOR);
 80033be:	f248 4010 	movw	r0, #33808	; 0x8410
 80033c2:	e787      	b.n	80032d4 <runGame+0x78>
			}else if(gameSignals.left == 1 && validationLeft == 1){
 80033c4:	789b      	ldrb	r3, [r3, #2]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d106      	bne.n	80033d8 <runGame+0x17c>
 80033ca:	f1ba 0f01 	cmp.w	sl, #1
 80033ce:	d103      	bne.n	80033d8 <runGame+0x17c>
				moveBlockLeft(&gameS.gameBlock);
 80033d0:	484f      	ldr	r0, [pc, #316]	; (8003510 <runGame+0x2b4>)
 80033d2:	f7ff f96c 	bl	80026ae <moveBlockLeft>
 80033d6:	e7c7      	b.n	8003368 <runGame+0x10c>
			}else if(gameSignals.right == 1 && validationRight == 1){
 80033d8:	7853      	ldrb	r3, [r2, #1]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <runGame+0x18e>
 80033de:	2f01      	cmp	r7, #1
 80033e0:	d103      	bne.n	80033ea <runGame+0x18e>
				moveBlockRight(&gameS.gameBlock);
 80033e2:	484b      	ldr	r0, [pc, #300]	; (8003510 <runGame+0x2b4>)
 80033e4:	f7ff f925 	bl	8002632 <moveBlockRight>
 80033e8:	e7be      	b.n	8003368 <runGame+0x10c>
			}else if((gameSignals.down == 1 || gameTouchSignals.down) && validationDown == 1){
 80033ea:	78d3      	ldrb	r3, [r2, #3]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d002      	beq.n	80033f6 <runGame+0x19a>
 80033f0:	7833      	ldrb	r3, [r6, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0b8      	beq.n	8003368 <runGame+0x10c>
 80033f6:	f1b8 0f01 	cmp.w	r8, #1
 80033fa:	d1b5      	bne.n	8003368 <runGame+0x10c>
				moveBlockDown(GAME_BOARD_BLOCK_SIZE + 1,&gameS.gameBlock);
 80033fc:	4944      	ldr	r1, [pc, #272]	; (8003510 <runGame+0x2b4>)
 80033fe:	200d      	movs	r0, #13
 8003400:	f7ff f8bf 	bl	8002582 <moveBlockDown>
 8003404:	e7b0      	b.n	8003368 <runGame+0x10c>
				updateGameBoard();
 8003406:	f7ff fc1f 	bl	8002c48 <updateGameBoard>
				updateGameBlock(&gameS.nextGameBlock,&gameS.gameBlock,1);
 800340a:	4941      	ldr	r1, [pc, #260]	; (8003510 <runGame+0x2b4>)
				drawTetrisBlock(gameS.gameBlock);
 800340c:	4e42      	ldr	r6, [pc, #264]	; (8003518 <runGame+0x2bc>)
				updateGameBlock(&gameS.nextGameBlock,&gameS.gameBlock,1);
 800340e:	2201      	movs	r2, #1
 8003410:	f101 0032 	add.w	r0, r1, #50	; 0x32
 8003414:	f7ff fdde 	bl	8002fd4 <updateGameBlock>
				pickRandomBlock(&gameS.nextGameBlock,BLOCK_SIZE_MEDIUM);
 8003418:	2108      	movs	r1, #8
 800341a:	4840      	ldr	r0, [pc, #256]	; (800351c <runGame+0x2c0>)
 800341c:	f7ff fd86 	bl	8002f2c <pickRandomBlock>
				drawTetrisBlock(gameS.gameBlock);
 8003420:	f8d4 8166 	ldr.w	r8, [r4, #358]	; 0x166
 8003424:	f8d4 c16a 	ldr.w	ip, [r4, #362]	; 0x16a
 8003428:	f8d4 216e 	ldr.w	r2, [r4, #366]	; 0x16e
 800342c:	f8d4 3172 	ldr.w	r3, [r4, #370]	; 0x172
 8003430:	466f      	mov	r7, sp
 8003432:	6830      	ldr	r0, [r6, #0]
 8003434:	6871      	ldr	r1, [r6, #4]
 8003436:	46be      	mov	lr, r7
 8003438:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800343c:	3608      	adds	r6, #8
 800343e:	454e      	cmp	r6, r9
 8003440:	4677      	mov	r7, lr
 8003442:	d1f6      	bne.n	8003432 <runGame+0x1d6>
 8003444:	8831      	ldrh	r1, [r6, #0]
 8003446:	f8ae 1000 	strh.w	r1, [lr]
 800344a:	4640      	mov	r0, r8
 800344c:	4661      	mov	r1, ip
				drawTetrisBlock(gameS.nextGameBlock);
 800344e:	4e34      	ldr	r6, [pc, #208]	; (8003520 <runGame+0x2c4>)
				drawTetrisBlock(gameS.gameBlock);
 8003450:	f7ff f802 	bl	8002458 <drawTetrisBlock>
				drawTetrisBlock(gameS.nextGameBlock);
 8003454:	f8d4 8198 	ldr.w	r8, [r4, #408]	; 0x198
 8003458:	f8d4 c19c 	ldr.w	ip, [r4, #412]	; 0x19c
 800345c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 8003460:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8003464:	466f      	mov	r7, sp
 8003466:	f106 0920 	add.w	r9, r6, #32
 800346a:	6830      	ldr	r0, [r6, #0]
 800346c:	6871      	ldr	r1, [r6, #4]
 800346e:	46be      	mov	lr, r7
 8003470:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8003474:	3608      	adds	r6, #8
 8003476:	454e      	cmp	r6, r9
 8003478:	4677      	mov	r7, lr
 800347a:	d1f6      	bne.n	800346a <runGame+0x20e>
 800347c:	8831      	ldrh	r1, [r6, #0]
 800347e:	f8ae 1000 	strh.w	r1, [lr]
 8003482:	4640      	mov	r0, r8
 8003484:	4661      	mov	r1, ip
 8003486:	f7fe ffe7 	bl	8002458 <drawTetrisBlock>
				gameS.clearRowsFlag = detectCompleteRows();
 800348a:	f7ff fc87 	bl	8002d9c <detectCompleteRows>
				if(gameP.row <= 3)
 800348e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				gameS.clearRowsFlag = detectCompleteRows();
 8003490:	f884 01cc 	strb.w	r0, [r4, #460]	; 0x1cc
				if(gameP.row <= 3)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	2b03      	cmp	r3, #3
					gameS.gameOverFlag = 1;
 8003498:	bf9c      	itt	ls
 800349a:	2301      	movls	r3, #1
 800349c:	f884 31ca 	strbls.w	r3, [r4, #458]	; 0x1ca
 80034a0:	e77f      	b.n	80033a2 <runGame+0x146>
		if(gameTouchSignals.reset)
 80034a2:	4d17      	ldr	r5, [pc, #92]	; (8003500 <runGame+0x2a4>)
 80034a4:	786a      	ldrb	r2, [r5, #1]
 80034a6:	b11a      	cbz	r2, 80034b0 <runGame+0x254>
			tetrisUpdateStartButton(START_BUTTON_PRESSED_COLOR);
 80034a8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80034ac:	f000 fa12 	bl	80038d4 <tetrisUpdateStartButton>
		if(gameS.gameOverDrawFlag == 0){
 80034b0:	f894 31cb 	ldrb.w	r3, [r4, #459]	; 0x1cb
 80034b4:	b93b      	cbnz	r3, 80034c6 <runGame+0x26a>
			tetrisDrawGameOver();
 80034b6:	f000 f9e5 	bl	8003884 <tetrisDrawGameOver>
			gameS.gameOverDrawFlag = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f884 31cb 	strb.w	r3, [r4, #459]	; 0x1cb
}
 80034c0:	b015      	add	sp, #84	; 0x54
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}else if(gameSignals.swap == 1)
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <runGame+0x2ac>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10d      	bne.n	80034ea <runGame+0x28e>
			lcdFillRect(GAME_BOARD_START_X,GAME_BOARD_START_Y,GAME_BOARD_WIDTH-1,GAME_BOARD_HEIGHT-1,COLOR_BLACK);
 80034ce:	2300      	movs	r3, #0
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2281      	movs	r2, #129	; 0x81
 80034d4:	f240 1303 	movw	r3, #259	; 0x103
 80034d8:	2128      	movs	r1, #40	; 0x28
 80034da:	201e      	movs	r0, #30
 80034dc:	f7fe fb5e 	bl	8001b9c <lcdFillRect>
}
 80034e0:	b015      	add	sp, #84	; 0x54
 80034e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			startGame();
 80034e6:	f7ff be11 	b.w	800310c <startGame>
		}else if(gameTouchSignals.start == 1)
 80034ea:	78ab      	ldrb	r3, [r5, #2]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d1e7      	bne.n	80034c0 <runGame+0x264>
			HAL_Delay(100);
 80034f0:	2064      	movs	r0, #100	; 0x64
 80034f2:	f7fd f895 	bl	8000620 <HAL_Delay>
 80034f6:	e7ea      	b.n	80034ce <runGame+0x272>
 80034f8:	200002b0 	.word	0x200002b0
 80034fc:	200004a0 	.word	0x200004a0
 8003500:	20000236 	.word	0x20000236
 8003504:	20000290 	.word	0x20000290
 8003508:	20000490 	.word	0x20000490
 800350c:	20000422 	.word	0x20000422
 8003510:	20000416 	.word	0x20000416
 8003514:	20000234 	.word	0x20000234
 8003518:	20000426 	.word	0x20000426
 800351c:	20000448 	.word	0x20000448
 8003520:	20000458 	.word	0x20000458

08003524 <readTouch>:
	}
}

void readTouch(uint16_t x, uint16_t y, uint8_t pressed)
{
	if(pressed)
 8003524:	b1c2      	cbz	r2, 8003558 <readTouch+0x34>
	{
		if((x >= DOWN_BUTTON_X - DOWN_BUTTON_RADIUS) && x <= DOWN_BUTTON_X + DOWN_BUTTON_RADIUS)
 8003526:	f1a0 03bb 	sub.w	r3, r0, #187	; 0xbb
 800352a:	2b24      	cmp	r3, #36	; 0x24
 800352c:	d806      	bhi.n	800353c <readTouch+0x18>
		{
			if(y >= DOWN_BUTTON_Y-DOWN_BUTTON_RADIUS && y <= DOWN_BUTTON_Y + DOWN_BUTTON_RADIUS)
 800352e:	f1a1 03fc 	sub.w	r3, r1, #252	; 0xfc
 8003532:	2b24      	cmp	r3, #36	; 0x24
			{
				gameTouchSignals.down = 1;
 8003534:	bf9e      	ittt	ls
 8003536:	4b0d      	ldrls	r3, [pc, #52]	; (800356c <readTouch+0x48>)
 8003538:	2201      	movls	r2, #1
 800353a:	701a      	strbls	r2, [r3, #0]
			}
		}

		if(gameS.gameOverFlag == 1)
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <readTouch+0x4c>)
 800353e:	f893 31ca 	ldrb.w	r3, [r3, #458]	; 0x1ca
 8003542:	2b01      	cmp	r3, #1
 8003544:	d110      	bne.n	8003568 <readTouch+0x44>
		{
			if(x >= START_BUTTON_X - START_BUTTON_RADIUS && x <= START_BUTTON_X + START_BUTTON_RADIUS)
 8003546:	3840      	subs	r0, #64	; 0x40
 8003548:	283c      	cmp	r0, #60	; 0x3c
 800354a:	d80d      	bhi.n	8003568 <readTouch+0x44>
			{
				if(y >= START_BUTTON_Y - START_BUTTON_RADIUS && y <= START_BUTTON_Y + START_BUTTON_RADIUS)
 800354c:	399b      	subs	r1, #155	; 0x9b
 800354e:	293c      	cmp	r1, #60	; 0x3c
 8003550:	d80a      	bhi.n	8003568 <readTouch+0x44>
				{
					gameTouchSignals.reset = 1;
 8003552:	4a06      	ldr	r2, [pc, #24]	; (800356c <readTouch+0x48>)
 8003554:	7053      	strb	r3, [r2, #1]
 8003556:	4770      	bx	lr
			}
		}

	}else
	{
		if(gameTouchSignals.reset == 1)
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <readTouch+0x48>)
 800355a:	785a      	ldrb	r2, [r3, #1]
 800355c:	2a01      	cmp	r2, #1
		{
			gameTouchSignals.start = 1;
 800355e:	bf08      	it	eq
 8003560:	709a      	strbeq	r2, [r3, #2]
		}
		gameTouchSignals.down = 0;
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
		gameTouchSignals.reset = 0;
 8003566:	705a      	strb	r2, [r3, #1]
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000236 	.word	0x20000236
 8003570:	200002b0 	.word	0x200002b0

08003574 <tetrisDrawGameBoard>:
	lcdPrintf("OVER");
	tetrisDrawStartButton(START_BUTTON_X,START_BUTTON_Y,startButtonColor);
}
/* GAME BOARDS OF 120 X 240*/
void tetrisDrawGameBoard()
{
 8003574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	tetrisBlockPropertiesTypeDef tb;
	tb.blockColor = boardColor;
 8003578:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <tetrisDrawGameBoard+0x134>)
{
 800357a:	b098      	sub	sp, #96	; 0x60
	tb.blockColor = boardColor;
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	tb.pos.x = GAME_BOARD_START_X - GAME_BOARD_BLOCK_SIZE  -1;
	tb.pos.y = GAME_BOARD_START_Y -  GAME_BOARD_BLOCK_SIZE -1;
	tb.psize = GAME_BOARD_BLOCK_SIZE;
 8003582:	230c      	movs	r3, #12
 8003584:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	tb.pos.y = GAME_BOARD_START_Y -  GAME_BOARD_BLOCK_SIZE -1;
 8003588:	241b      	movs	r4, #27
	tb.pos.x = GAME_BOARD_START_X - GAME_BOARD_BLOCK_SIZE  -1;
 800358a:	2511      	movs	r5, #17

	for(int i = 0; i < 12; i++)
 800358c:	f04f 0800 	mov.w	r8, #0
	{
		drawBlock(tb);
 8003590:	ae0b      	add	r6, sp, #44	; 0x2c
 8003592:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 8003596:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800359a:	466f      	mov	r7, sp
 800359c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 80035a0:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
 80035a4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80035a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80035aa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80035ac:	f8de 3000 	ldr.w	r3, [lr]
 80035b0:	803b      	strh	r3, [r7, #0]
 80035b2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035b6:	f7fe ff17 	bl	80023e8 <drawBlock>
		if(i != 11){
 80035ba:	f1b8 0f0b 	cmp.w	r8, #11
			tb.pos.x+=GAME_BOARD_BLOCK_SIZE +1;
 80035be:	bf14      	ite	ne
 80035c0:	350d      	addne	r5, #13
		}else{
			tb.pos.y+=GAME_BOARD_BLOCK_SIZE +1;
 80035c2:	340d      	addeq	r4, #13
	for(int i = 0; i < 12; i++)
 80035c4:	f108 0801 	add.w	r8, r8, #1
			tb.pos.x+=GAME_BOARD_BLOCK_SIZE +1;
 80035c8:	bf14      	ite	ne
 80035ca:	b2ad      	uxthne	r5, r5
			tb.pos.y+=GAME_BOARD_BLOCK_SIZE +1;
 80035cc:	b2a4      	uxtheq	r4, r4
	for(int i = 0; i < 12; i++)
 80035ce:	f1b8 0f0c 	cmp.w	r8, #12
 80035d2:	d1de      	bne.n	8003592 <tetrisDrawGameBoard+0x1e>
 80035d4:	f04f 0801 	mov.w	r8, #1

	}

	for(int i = 1; i < 22; i++)
	{
		drawBlock(tb);
 80035d8:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 80035dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80035e0:	466f      	mov	r7, sp
 80035e2:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 80035e6:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
 80035ea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80035ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80035f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80035f2:	f8de 3000 	ldr.w	r3, [lr]
 80035f6:	803b      	strh	r3, [r7, #0]
 80035f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80035fc:	f7fe fef4 	bl	80023e8 <drawBlock>
		if(i != 21){
 8003600:	f1b8 0f15 	cmp.w	r8, #21
			tb.pos.y+=GAME_BOARD_BLOCK_SIZE+1;
 8003604:	bf14      	ite	ne
 8003606:	340d      	addne	r4, #13
		}else{
			tb.pos.x-=(GAME_BOARD_BLOCK_SIZE+1);
 8003608:	3d0d      	subeq	r5, #13
	for(int i = 1; i < 22; i++)
 800360a:	f108 0801 	add.w	r8, r8, #1
			tb.pos.y+=GAME_BOARD_BLOCK_SIZE+1;
 800360e:	bf14      	ite	ne
 8003610:	b2a4      	uxthne	r4, r4
			tb.pos.x-=(GAME_BOARD_BLOCK_SIZE+1);
 8003612:	b2ad      	uxtheq	r5, r5
	for(int i = 1; i < 22; i++)
 8003614:	f1b8 0f16 	cmp.w	r8, #22
 8003618:	d1de      	bne.n	80035d8 <tetrisDrawGameBoard+0x64>
 800361a:	f04f 0801 	mov.w	r8, #1

	}

	for(int i = 1; i < 12; i++)
	{
		drawBlock(tb);
 800361e:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 8003622:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003626:	466f      	mov	r7, sp
 8003628:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800362c:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
 8003630:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003632:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003636:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003638:	f8de 3000 	ldr.w	r3, [lr]
 800363c:	803b      	strh	r3, [r7, #0]
 800363e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003642:	f7fe fed1 	bl	80023e8 <drawBlock>
		if(i != 11){
 8003646:	f1b8 0f0b 	cmp.w	r8, #11
			tb.pos.x-=(GAME_BOARD_BLOCK_SIZE+1);
 800364a:	bf14      	ite	ne
 800364c:	3d0d      	subne	r5, #13
		}else{
			tb.pos.y-=(GAME_BOARD_BLOCK_SIZE+1);
 800364e:	3c0d      	subeq	r4, #13
	for(int i = 1; i < 12; i++)
 8003650:	f108 0801 	add.w	r8, r8, #1
			tb.pos.x-=(GAME_BOARD_BLOCK_SIZE+1);
 8003654:	bf14      	ite	ne
 8003656:	b2ad      	uxthne	r5, r5
			tb.pos.y-=(GAME_BOARD_BLOCK_SIZE+1);
 8003658:	b2a4      	uxtheq	r4, r4
	for(int i = 1; i < 12; i++)
 800365a:	f1b8 0f0c 	cmp.w	r8, #12
 800365e:	d1de      	bne.n	800361e <tetrisDrawGameBoard+0xaa>
 8003660:	f04f 0801 	mov.w	r8, #1

	}

	for(int i = 1; i < 22; i++)
	{
		drawBlock(tb);
 8003664:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 8003668:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800366c:	466f      	mov	r7, sp
 800366e:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
 8003672:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 8003676:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003678:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800367c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800367e:	f8de 3000 	ldr.w	r3, [lr]
 8003682:	803b      	strh	r3, [r7, #0]
 8003684:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003688:	f7fe feae 	bl	80023e8 <drawBlock>
		if(i != 21){
 800368c:	f1b8 0f15 	cmp.w	r8, #21
			tb.pos.y-=(GAME_BOARD_BLOCK_SIZE+1);
 8003690:	bf18      	it	ne
 8003692:	3c0d      	subne	r4, #13
	for(int i = 1; i < 22; i++)
 8003694:	f108 0801 	add.w	r8, r8, #1
			tb.pos.y-=(GAME_BOARD_BLOCK_SIZE+1);
 8003698:	bf18      	it	ne
 800369a:	b2a4      	uxthne	r4, r4
	for(int i = 1; i < 22; i++)
 800369c:	f1b8 0f16 	cmp.w	r8, #22
 80036a0:	d1e0      	bne.n	8003664 <tetrisDrawGameBoard+0xf0>
		}

	}

}
 80036a2:	b018      	add	sp, #96	; 0x60
 80036a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036a8:	20000234 	.word	0x20000234

080036ac <tetrisUpdateScore>:

void tetrisUpdateScore(int totalScore)
{
 80036ac:	b507      	push	{r0, r1, r2, lr}
	char score[4];
	sprintf(score,"%06i",totalScore);
 80036ae:	4602      	mov	r2, r0
 80036b0:	4906      	ldr	r1, [pc, #24]	; (80036cc <tetrisUpdateScore+0x20>)
 80036b2:	a801      	add	r0, sp, #4
 80036b4:	f000 fb68 	bl	8003d88 <siprintf>
	lcdSetCursor(SCORE_X,SCORE_Y);
 80036b8:	210a      	movs	r1, #10
 80036ba:	20b4      	movs	r0, #180	; 0xb4
 80036bc:	f7fe fbfa 	bl	8001eb4 <lcdSetCursor>
	lcdPrintf(score);
 80036c0:	a801      	add	r0, sp, #4
 80036c2:	f7fe f9eb 	bl	8001a9c <lcdPrintf>
}
 80036c6:	b003      	add	sp, #12
 80036c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80036cc:	08004a96 	.word	0x08004a96

080036d0 <tetrisUpdateTime>:

void tetrisUpdateTime(int time)
{
 80036d0:	b507      	push	{r0, r1, r2, lr}
	char score[4];
	sprintf(score,"%04i",time);
 80036d2:	4602      	mov	r2, r0
 80036d4:	4906      	ldr	r1, [pc, #24]	; (80036f0 <tetrisUpdateTime+0x20>)
 80036d6:	a801      	add	r0, sp, #4
 80036d8:	f000 fb56 	bl	8003d88 <siprintf>
	lcdSetCursor(GAME_TIME_X,GAME_TIME_Y);
 80036dc:	210a      	movs	r1, #10
 80036de:	203c      	movs	r0, #60	; 0x3c
 80036e0:	f7fe fbe8 	bl	8001eb4 <lcdSetCursor>
	lcdPrintf(score);
 80036e4:	a801      	add	r0, sp, #4
 80036e6:	f7fe f9d9 	bl	8001a9c <lcdPrintf>
}
 80036ea:	b003      	add	sp, #12
 80036ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80036f0:	08004db0 	.word	0x08004db0

080036f4 <tetrisDrawDownButton>:

void tetrisDrawDownButton(uint16_t x, uint16_t y, uint16_t color)
{
 80036f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	lcdDrawCircle(x,y,DOWN_BUTTON_RADIUS-3,color);
 80036f8:	b206      	sxth	r6, r0
 80036fa:	fa0f f881 	sxth.w	r8, r1
{
 80036fe:	4605      	mov	r5, r0
 8003700:	4617      	mov	r7, r2
 8003702:	460c      	mov	r4, r1
	lcdDrawCircle(x,y,DOWN_BUTTON_RADIUS-3,color);
 8003704:	4613      	mov	r3, r2
 8003706:	4641      	mov	r1, r8
 8003708:	4630      	mov	r0, r6
 800370a:	220f      	movs	r2, #15
 800370c:	f7fe f8c1 	bl	8001892 <lcdDrawCircle>
	lcdDrawCircle(x,y,DOWN_BUTTON_RADIUS,color);
 8003710:	463b      	mov	r3, r7
 8003712:	4641      	mov	r1, r8
 8003714:	4630      	mov	r0, r6
 8003716:	2212      	movs	r2, #18
 8003718:	f7fe f8bb 	bl	8001892 <lcdDrawCircle>
	lcdDrawTriangle(x-10,y-5,x+10,y-5,x,y+5,color);
 800371c:	1f63      	subs	r3, r4, #5
 800371e:	3405      	adds	r4, #5
 8003720:	b21b      	sxth	r3, r3
 8003722:	f105 020a 	add.w	r2, r5, #10
 8003726:	f1a5 000a 	sub.w	r0, r5, #10
 800372a:	b224      	sxth	r4, r4
 800372c:	9702      	str	r7, [sp, #8]
 800372e:	9401      	str	r4, [sp, #4]
 8003730:	9600      	str	r6, [sp, #0]
 8003732:	b212      	sxth	r2, r2
 8003734:	4619      	mov	r1, r3
 8003736:	b200      	sxth	r0, r0
 8003738:	f7fd ffe4 	bl	8001704 <lcdDrawTriangle>

}
 800373c:	b004      	add	sp, #16
 800373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003744 <tetrisDrawStatus>:
{
 8003744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	boardColor = COLOR_DARKGREY;
 8003746:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <tetrisDrawStatus+0xb8>)
	downButtonColor = DOWN_BUTTON_COLOR;
 8003748:	4e2d      	ldr	r6, [pc, #180]	; (8003800 <tetrisDrawStatus+0xbc>)
	boardColor = COLOR_DARKGREY;
 800374a:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800374e:	801a      	strh	r2, [r3, #0]
	downButtonColor = DOWN_BUTTON_COLOR;
 8003750:	f248 4310 	movw	r3, #33808	; 0x8410
 8003754:	8033      	strh	r3, [r6, #0]
	startButtonColor = START_BUTTON_COLOR;
 8003756:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <tetrisDrawStatus+0xc0>)
	lcdFillRect(0,0,ILI9341_PIXEL_WIDTH,ILI9341_PIXEL_HEIGHT,COLOR_BLACK);
 8003758:	2500      	movs	r5, #0
	startButtonColor = START_BUTTON_COLOR;
 800375a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
	lcdSetTextColor(DEFAULT_TEXT_COLOR,DEFAULT_BACKGROUND_COLOR);
 800375e:	2100      	movs	r1, #0
 8003760:	f64f 70e0 	movw	r0, #65504	; 0xffe0
	lcdDrawRoundRect(0,0,ILI9341_PIXEL_WIDTH,ILI9341_PIXEL_HEIGHT,10,COLOR_WHITE);
 8003764:	240a      	movs	r4, #10
	startButtonColor = START_BUTTON_COLOR;
 8003766:	801a      	strh	r2, [r3, #0]
	lcdDrawRoundRect(0,0,ILI9341_PIXEL_WIDTH,ILI9341_PIXEL_HEIGHT,10,COLOR_WHITE);
 8003768:	f64f 77ff 	movw	r7, #65535	; 0xffff
	lcdSetTextColor(DEFAULT_TEXT_COLOR,DEFAULT_BACKGROUND_COLOR);
 800376c:	f7fd ff36 	bl	80015dc <lcdSetTextColor>
	lcdFillRect(0,0,ILI9341_PIXEL_WIDTH,ILI9341_PIXEL_HEIGHT,COLOR_BLACK);
 8003770:	4629      	mov	r1, r5
 8003772:	4628      	mov	r0, r5
 8003774:	9500      	str	r5, [sp, #0]
 8003776:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800377a:	22f0      	movs	r2, #240	; 0xf0
 800377c:	f7fe fa0e 	bl	8001b9c <lcdFillRect>
	lcdDrawRoundRect(0,0,ILI9341_PIXEL_WIDTH,ILI9341_PIXEL_HEIGHT,10,COLOR_WHITE);
 8003780:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003784:	22f0      	movs	r2, #240	; 0xf0
 8003786:	4629      	mov	r1, r5
 8003788:	4628      	mov	r0, r5
 800378a:	e88d 0090 	stmia.w	sp, {r4, r7}
 800378e:	f7fe fa63 	bl	8001c58 <lcdDrawRoundRect>
	lcdSetCursor(GAME_TIME_TEXT_X,GAME_TIME_TEXT_Y);
 8003792:	4621      	mov	r1, r4
 8003794:	2014      	movs	r0, #20
 8003796:	f7fe fb8d 	bl	8001eb4 <lcdSetCursor>
	lcdPrintf("TIME:");
 800379a:	481b      	ldr	r0, [pc, #108]	; (8003808 <tetrisDrawStatus+0xc4>)
 800379c:	f7fe f97e 	bl	8001a9c <lcdPrintf>
	lcdSetCursor(GAME_TIME_X,GAME_TIME_Y);
 80037a0:	4621      	mov	r1, r4
 80037a2:	203c      	movs	r0, #60	; 0x3c
 80037a4:	f7fe fb86 	bl	8001eb4 <lcdSetCursor>
	lcdPrintf("0000");
 80037a8:	4818      	ldr	r0, [pc, #96]	; (800380c <tetrisDrawStatus+0xc8>)
 80037aa:	f7fe f977 	bl	8001a9c <lcdPrintf>
	lcdSetCursor(SCORE_TEXT_X,SCORE_TEXT_Y);
 80037ae:	4621      	mov	r1, r4
 80037b0:	2078      	movs	r0, #120	; 0x78
 80037b2:	f7fe fb7f 	bl	8001eb4 <lcdSetCursor>
	lcdPrintf("SCORE:");
 80037b6:	4816      	ldr	r0, [pc, #88]	; (8003810 <tetrisDrawStatus+0xcc>)
 80037b8:	f7fe f970 	bl	8001a9c <lcdPrintf>
	lcdSetCursor(SCORE_X,SCORE_Y);
 80037bc:	4621      	mov	r1, r4
 80037be:	20b4      	movs	r0, #180	; 0xb4
 80037c0:	f7fe fb78 	bl	8001eb4 <lcdSetCursor>
	lcdPrintf("000000");
 80037c4:	4813      	ldr	r0, [pc, #76]	; (8003814 <tetrisDrawStatus+0xd0>)
 80037c6:	f7fe f969 	bl	8001a9c <lcdPrintf>
	lcdSetCursor(NEXT_BLOCK_TEXT_POS_X,NEXT_BLOCK_TEXT_POS_Y);
 80037ca:	2164      	movs	r1, #100	; 0x64
 80037cc:	20b4      	movs	r0, #180	; 0xb4
 80037ce:	f7fe fb71 	bl	8001eb4 <lcdSetCursor>
	lcdPrintf("NEXT:");
 80037d2:	4811      	ldr	r0, [pc, #68]	; (8003818 <tetrisDrawStatus+0xd4>)
 80037d4:	f7fe f962 	bl	8001a9c <lcdPrintf>
	lcdDrawRoundRect(NEXT_BLOCK_POS_X,NEXT_BLOCK_POS_Y,6*NEXT_BLOCK_SIZE,6*NEXT_BLOCK_SIZE,5,COLOR_WHITE);
 80037d8:	2305      	movs	r3, #5
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	2330      	movs	r3, #48	; 0x30
 80037de:	461a      	mov	r2, r3
 80037e0:	9701      	str	r7, [sp, #4]
 80037e2:	2182      	movs	r1, #130	; 0x82
 80037e4:	20b4      	movs	r0, #180	; 0xb4
 80037e6:	f7fe fa37 	bl	8001c58 <lcdDrawRoundRect>
	tetrisDrawDownButton(DOWN_BUTTON_X, DOWN_BUTTON_Y, downButtonColor);
 80037ea:	8832      	ldrh	r2, [r6, #0]
 80037ec:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80037f0:	20cd      	movs	r0, #205	; 0xcd
}
 80037f2:	b003      	add	sp, #12
 80037f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	tetrisDrawDownButton(DOWN_BUTTON_X, DOWN_BUTTON_Y, downButtonColor);
 80037f8:	f7ff bf7c 	b.w	80036f4 <tetrisDrawDownButton>
 80037fc:	20000234 	.word	0x20000234
 8003800:	2000049a 	.word	0x2000049a
 8003804:	2000022a 	.word	0x2000022a
 8003808:	08004d96 	.word	0x08004d96
 800380c:	08004da5 	.word	0x08004da5
 8003810:	08004d9c 	.word	0x08004d9c
 8003814:	08004da3 	.word	0x08004da3
 8003818:	08004daa 	.word	0x08004daa

0800381c <tetrisUpdateDownButton>:

void tetrisUpdateDownButton(uint16_t color)
{
	if(downButtonColor != color)
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <tetrisUpdateDownButton+0x18>)
 800381e:	8819      	ldrh	r1, [r3, #0]
 8003820:	4281      	cmp	r1, r0
{
 8003822:	4602      	mov	r2, r0
	if(downButtonColor != color)
 8003824:	d005      	beq.n	8003832 <tetrisUpdateDownButton+0x16>
	{
		downButtonColor = color;
 8003826:	8018      	strh	r0, [r3, #0]
		tetrisDrawDownButton(DOWN_BUTTON_X,DOWN_BUTTON_Y,downButtonColor);
 8003828:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800382c:	20cd      	movs	r0, #205	; 0xcd
 800382e:	f7ff bf61 	b.w	80036f4 <tetrisDrawDownButton>
 8003832:	4770      	bx	lr
 8003834:	2000049a 	.word	0x2000049a

08003838 <tetrisDrawStartButton>:
	}
}

void tetrisDrawStartButton(uint16_t x, uint16_t y, uint16_t color)
{
 8003838:	b570      	push	{r4, r5, r6, lr}

	lcdFillCircle(x,y,START_BUTTON_RADIUS,START_BUTTON_COLOR_BORDER);
 800383a:	b205      	sxth	r5, r0
 800383c:	b20e      	sxth	r6, r1
{
 800383e:	4614      	mov	r4, r2
	lcdFillCircle(x,y,START_BUTTON_RADIUS,START_BUTTON_COLOR_BORDER);
 8003840:	4631      	mov	r1, r6
 8003842:	4628      	mov	r0, r5
 8003844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003848:	221e      	movs	r2, #30
 800384a:	f7fe fae1 	bl	8001e10 <lcdFillCircle>
	lcdFillCircle(x,y,START_BUTTON_RADIUS-2,color);
 800384e:	4623      	mov	r3, r4
 8003850:	221c      	movs	r2, #28
 8003852:	4631      	mov	r1, r6
 8003854:	4628      	mov	r0, r5
 8003856:	f7fe fadb 	bl	8001e10 <lcdFillCircle>
	lcdSetCursor(START_BUTTON_TEXT_X,START_BUTTON_TEXT_Y);
 800385a:	21b4      	movs	r1, #180	; 0xb4
 800385c:	204d      	movs	r0, #77	; 0x4d
 800385e:	f7fe fb29 	bl	8001eb4 <lcdSetCursor>
	lcdSetTextColor(START_BUTTON_TEXT_COLOR,color);
 8003862:	4621      	mov	r1, r4
 8003864:	2000      	movs	r0, #0
 8003866:	f7fd feb9 	bl	80015dc <lcdSetTextColor>
	lcdPrintf("START");
 800386a:	4805      	ldr	r0, [pc, #20]	; (8003880 <tetrisDrawStartButton+0x48>)
 800386c:	f7fe f916 	bl	8001a9c <lcdPrintf>
	lcdSetTextColor(DEFAULT_TEXT_COLOR,DEFAULT_BACKGROUND_COLOR);
 8003870:	2100      	movs	r1, #0
 8003872:	f64f 70e0 	movw	r0, #65504	; 0xffe0
}
 8003876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lcdSetTextColor(DEFAULT_TEXT_COLOR,DEFAULT_BACKGROUND_COLOR);
 800387a:	f7fd beaf 	b.w	80015dc <lcdSetTextColor>
 800387e:	bf00      	nop
 8003880:	08004d90 	.word	0x08004d90

08003884 <tetrisDrawGameOver>:
{
 8003884:	b507      	push	{r0, r1, r2, lr}
	lcdFillRect(GAME_OVER_X,GAME_OVER_Y,GAME_BOARD_WIDTH/2,GAME_BOARD_HEIGHT/2,COLOR_CYAN);
 8003886:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800388a:	2241      	movs	r2, #65	; 0x41
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	2169      	movs	r1, #105	; 0x69
 8003890:	2382      	movs	r3, #130	; 0x82
 8003892:	203e      	movs	r0, #62	; 0x3e
 8003894:	f7fe f982 	bl	8001b9c <lcdFillRect>
	lcdSetCursor(GAME_OVER_TEXT_X,GAME_OVER_TEXT_Y);
 8003898:	217d      	movs	r1, #125	; 0x7d
 800389a:	2052      	movs	r0, #82	; 0x52
 800389c:	f7fe fb0a 	bl	8001eb4 <lcdSetCursor>
	lcdPrintf("GAME");
 80038a0:	4809      	ldr	r0, [pc, #36]	; (80038c8 <tetrisDrawGameOver+0x44>)
 80038a2:	f7fe f8fb 	bl	8001a9c <lcdPrintf>
	lcdSetCursor(GAME_OVER_TEXT_X,GAME_OVER_TEXT_Y + 15);
 80038a6:	218c      	movs	r1, #140	; 0x8c
 80038a8:	2052      	movs	r0, #82	; 0x52
 80038aa:	f7fe fb03 	bl	8001eb4 <lcdSetCursor>
	lcdPrintf("OVER");
 80038ae:	4807      	ldr	r0, [pc, #28]	; (80038cc <tetrisDrawGameOver+0x48>)
 80038b0:	f7fe f8f4 	bl	8001a9c <lcdPrintf>
	tetrisDrawStartButton(START_BUTTON_X,START_BUTTON_Y,startButtonColor);
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <tetrisDrawGameOver+0x4c>)
 80038b6:	881a      	ldrh	r2, [r3, #0]
 80038b8:	21b9      	movs	r1, #185	; 0xb9
 80038ba:	205e      	movs	r0, #94	; 0x5e
}
 80038bc:	b003      	add	sp, #12
 80038be:	f85d eb04 	ldr.w	lr, [sp], #4
	tetrisDrawStartButton(START_BUTTON_X,START_BUTTON_Y,startButtonColor);
 80038c2:	f7ff bfb9 	b.w	8003838 <tetrisDrawStartButton>
 80038c6:	bf00      	nop
 80038c8:	08004d86 	.word	0x08004d86
 80038cc:	08004d8b 	.word	0x08004d8b
 80038d0:	2000022a 	.word	0x2000022a

080038d4 <tetrisUpdateStartButton>:

void tetrisUpdateStartButton(uint16_t color)
{
	if(downButtonColor != color)
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <tetrisUpdateStartButton+0x18>)
 80038d6:	8819      	ldrh	r1, [r3, #0]
 80038d8:	4281      	cmp	r1, r0
{
 80038da:	4602      	mov	r2, r0
	if(downButtonColor != color)
 80038dc:	d004      	beq.n	80038e8 <tetrisUpdateStartButton+0x14>
	{
		downButtonColor = color;
 80038de:	8018      	strh	r0, [r3, #0]
		tetrisDrawStartButton(START_BUTTON_X,START_BUTTON_Y,downButtonColor);
 80038e0:	21b9      	movs	r1, #185	; 0xb9
 80038e2:	205e      	movs	r0, #94	; 0x5e
 80038e4:	f7ff bfa8 	b.w	8003838 <tetrisDrawStartButton>
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	2000049a 	.word	0x2000049a

080038f0 <xpt2046_orientation>:
}


void xpt2046_orientation(TouchScreen_OrientationTypeDef orientation_)
{
	ts_Orientation = orientation_;
 80038f0:	4b01      	ldr	r3, [pc, #4]	; (80038f8 <xpt2046_orientation+0x8>)
 80038f2:	7018      	strb	r0, [r3, #0]
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000498 	.word	0x20000498

080038fc <xpt2046_set_size>:
 80038fc:	4b01      	ldr	r3, [pc, #4]	; (8003904 <xpt2046_set_size+0x8>)
 80038fe:	8018      	strh	r0, [r3, #0]
 8003900:	8059      	strh	r1, [r3, #2]
 8003902:	4770      	bx	lr
 8003904:	2000049c 	.word	0x2000049c

08003908 <xpt2046_zthreshold>:
	ts_Penirq_Pin = penirq_pin;
}

uint16_t xpt2046_zthreshold()
{
	if(ts_ControlByte.bitMode == XPT2046_8BIT_MODE)
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <xpt2046_zthreshold+0x10>)
 800390a:	789b      	ldrb	r3, [r3, #2]
 800390c:	2b08      	cmp	r3, #8
		return Z_THRESHOLD_08BIT;
	}else
	{
		return Z_THRESHOLD_12BIT;
	}
}
 800390e:	bf0c      	ite	eq
 8003910:	2007      	moveq	r0, #7
 8003912:	2028      	movne	r0, #40	; 0x28
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	200004a4 	.word	0x200004a4

0800391c <xpt2046_select>:
void xpt2046_select()
{
	HAL_GPIO_WritePin(ts_Cs_Port,ts_Cs_Pin,GPIO_PIN_RESET);
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <xpt2046_select+0x10>)
 800391e:	8819      	ldrh	r1, [r3, #0]
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <xpt2046_select+0x14>)
 8003922:	2200      	movs	r2, #0
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	f7fc bfd1 	b.w	80008cc <HAL_GPIO_WritePin>
 800392a:	bf00      	nop
 800392c:	20000228 	.word	0x20000228
 8003930:	20000224 	.word	0x20000224

08003934 <xpt2046_unselect>:
	//HAL_GPIO_WritePin(XPT2046_CS_Port,XPT2046_CS_Pin,GPIO_PIN_RESET);
}

void xpt2046_unselect()
{
	HAL_GPIO_WritePin(ts_Cs_Port,ts_Cs_Pin,GPIO_PIN_SET);
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <xpt2046_unselect+0x10>)
 8003936:	8819      	ldrh	r1, [r3, #0]
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <xpt2046_unselect+0x14>)
 800393a:	2201      	movs	r2, #1
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	f7fc bfc5 	b.w	80008cc <HAL_GPIO_WritePin>
 8003942:	bf00      	nop
 8003944:	20000228 	.word	0x20000228
 8003948:	20000224 	.word	0x20000224

0800394c <xpt2046_init>:
	ts_ControlByte.bitMode = XPT2046_12BIT_MODE;
 800394c:	4b13      	ldr	r3, [pc, #76]	; (800399c <xpt2046_init+0x50>)
 800394e:	2100      	movs	r1, #0
 8003950:	7099      	strb	r1, [r3, #2]
	ts_ControlByte.reference = XPT2046_DFR_MODE;
 8003952:	70d9      	strb	r1, [r3, #3]
	ts_ControlByte.channel = XPT2046_DFR_X; //by default
 8003954:	2150      	movs	r1, #80	; 0x50
 8003956:	7059      	strb	r1, [r3, #1]
	ts_ControlByte.powerMode = XPT2046_REFERENCE_OFF_ADC_ON;
 8003958:	2201      	movs	r2, #1
	ts_ControlByte.startBit = XPT2046_START;
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	7019      	strb	r1, [r3, #0]
	ts_ControlByte.powerMode = XPT2046_REFERENCE_OFF_ADC_ON;
 800395e:	711a      	strb	r2, [r3, #4]
	ts_Orientation = XPT2046_ORIENTATION_LANDSCAPE;
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <xpt2046_init+0x54>)
 8003962:	701a      	strb	r2, [r3, #0]
	ts_Size.width = XPT2046_WIDTH;
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <xpt2046_init+0x58>)
 8003966:	22f0      	movs	r2, #240	; 0xf0
 8003968:	801a      	strh	r2, [r3, #0]
	ts_Size.height = XPT2046_HEIGHT;
 800396a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800396e:	805a      	strh	r2, [r3, #2]
	ts_Cs_Pin = XPT2046_CS_Pin;
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <xpt2046_init+0x5c>)
 8003972:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003976:	801a      	strh	r2, [r3, #0]
	ts_Cs_Port = XPT2046_CS_Port;
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <xpt2046_init+0x60>)
 800397a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800397e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8003982:	601a      	str	r2, [r3, #0]
	ts_Penirq_Pin = XPT2046_PENIRQ_Pin;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <xpt2046_init+0x64>)
 8003986:	2220      	movs	r2, #32
 8003988:	801a      	strh	r2, [r3, #0]
	ts_Penirq_Port = XPT2046_PENIRQ_Port;
 800398a:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <xpt2046_init+0x68>)
 800398c:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <xpt2046_init+0x6c>)
 800398e:	601a      	str	r2, [r3, #0]
	command = ts_ControlByte.bitMode |  ts_ControlByte.powerMode |ts_ControlByte.reference |ts_ControlByte.channel |ts_ControlByte.startBit;
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <xpt2046_init+0x70>)
 8003992:	22d1      	movs	r2, #209	; 0xd1
 8003994:	701a      	strb	r2, [r3, #0]
	xpt2046_unselect();
 8003996:	f7ff bfcd 	b.w	8003934 <xpt2046_unselect>
 800399a:	bf00      	nop
 800399c:	200004a4 	.word	0x200004a4
 80039a0:	20000498 	.word	0x20000498
 80039a4:	2000049c 	.word	0x2000049c
 80039a8:	20000228 	.word	0x20000228
 80039ac:	20000224 	.word	0x20000224
 80039b0:	2000023a 	.word	0x2000023a
 80039b4:	20000494 	.word	0x20000494
 80039b8:	40020800 	.word	0x40020800
 80039bc:	2000023c 	.word	0x2000023c

080039c0 <xpt2046_interrupt>:
	//HAL_GPIO_WritePin(XPT2046_CS_Port,XPT2046_CS_Pin,GPIO_PIN_SET);
}

uint8_t xpt2046_interrupt()
{
 80039c0:	b508      	push	{r3, lr}
	return HAL_GPIO_ReadPin(ts_Penirq_Port,ts_Penirq_Pin) == GPIO_PIN_RESET; //Means touchScreen was pressed
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <xpt2046_interrupt+0x18>)
 80039c4:	8819      	ldrh	r1, [r3, #0]
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <xpt2046_interrupt+0x1c>)
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f7fc ff79 	bl	80008c0 <HAL_GPIO_ReadPin>
}
 80039ce:	fab0 f080 	clz	r0, r0
 80039d2:	0940      	lsrs	r0, r0, #5
 80039d4:	bd08      	pop	{r3, pc}
 80039d6:	bf00      	nop
 80039d8:	2000023a 	.word	0x2000023a
 80039dc:	20000494 	.word	0x20000494

080039e0 <xpt2046_interruptions_activated>:
	}
}

uint8_t xpt2046_interruptions_activated()
{
	return (ts_ControlByte.powerMode == XPT2046_POWER_DOWN || ts_ControlByte.powerMode == XPT2046_REFERENCE_ON_ADC_OFF);
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <xpt2046_interruptions_activated+0x14>)
 80039e2:	7918      	ldrb	r0, [r3, #4]
 80039e4:	b118      	cbz	r0, 80039ee <xpt2046_interruptions_activated+0xe>
 80039e6:	1e83      	subs	r3, r0, #2
 80039e8:	4258      	negs	r0, r3
 80039ea:	4158      	adcs	r0, r3
 80039ec:	4770      	bx	lr
 80039ee:	2001      	movs	r0, #1
}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200004a4 	.word	0x200004a4

080039f8 <xpt2046_pressed>:
{
 80039f8:	b508      	push	{r3, lr}
	if(xpt2046_interruptions_activated())
 80039fa:	f7ff fff1 	bl	80039e0 <xpt2046_interruptions_activated>
 80039fe:	b118      	cbz	r0, 8003a08 <xpt2046_pressed+0x10>
}
 8003a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return xpt2046_interrupt();
 8003a04:	f7ff bfdc 	b.w	80039c0 <xpt2046_interrupt>
		uint16_t zt =  xpt2046_zthreshold();
 8003a08:	f7ff ff7e 	bl	8003908 <xpt2046_zthreshold>
		return (ts_CoordinatesRaw.z1 > zt );
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <xpt2046_pressed+0x24>)
 8003a0e:	889b      	ldrh	r3, [r3, #4]
}
 8003a10:	4283      	cmp	r3, r0
 8003a12:	bf94      	ite	ls
 8003a14:	2000      	movls	r0, #0
 8003a16:	2001      	movhi	r0, #1
 8003a18:	bd08      	pop	{r3, pc}
 8003a1a:	bf00      	nop
 8003a1c:	2000022c 	.word	0x2000022c

08003a20 <xpt2046_control_byte_update>:
/**
 * Generate control byte
 */
void xpt2046_control_byte_update()
{
	command =  ts_ControlByte.startBit |  ts_ControlByte.channel | ts_ControlByte.bitMode | ts_ControlByte.reference | ts_ControlByte.powerMode  ;
 8003a20:	4a06      	ldr	r2, [pc, #24]	; (8003a3c <xpt2046_control_byte_update+0x1c>)
 8003a22:	7813      	ldrb	r3, [r2, #0]
 8003a24:	7851      	ldrb	r1, [r2, #1]
 8003a26:	430b      	orrs	r3, r1
 8003a28:	7891      	ldrb	r1, [r2, #2]
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	78d1      	ldrb	r1, [r2, #3]
 8003a2e:	7912      	ldrb	r2, [r2, #4]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <xpt2046_control_byte_update+0x20>)
 8003a36:	7013      	strb	r3, [r2, #0]
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	200004a4 	.word	0x200004a4
 8003a40:	2000023c 	.word	0x2000023c

08003a44 <xpt2046_max_measurement>:

/**
 * Return max value depending on bit mode.
 */
uint16_t xpt2046_max_measurement(){
	if(ts_ControlByte.bitMode == XPT2046_8BIT_MODE)
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <xpt2046_max_measurement+0x10>)
 8003a46:	789b      	ldrb	r3, [r3, #2]
 8003a48:	2b08      	cmp	r3, #8
		return 120; //This must be calibrated
	}else
	{
		return 1900; // this value must be calibrated on your on touch screen
	}
}
 8003a4a:	f240 706c 	movw	r0, #1900	; 0x76c
 8003a4e:	bf08      	it	eq
 8003a50:	2078      	moveq	r0, #120	; 0x78
 8003a52:	4770      	bx	lr
 8003a54:	200004a4 	.word	0x200004a4

08003a58 <xpt2046_spi>:
/**
 *  Set internal SPI to user defined SPI port
 */
void xpt2046_spi(SPI_HandleTypeDef* spi)
{
	spiPort =  spi;
 8003a58:	4b01      	ldr	r3, [pc, #4]	; (8003a60 <xpt2046_spi+0x8>)
 8003a5a:	6018      	str	r0, [r3, #0]
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	200001c8 	.word	0x200001c8

08003a64 <xpt2046_update>:


/**
 * Update X,Y,Z values of touchScreen
 */
void xpt2046_update(){
 8003a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a68:	b08b      	sub	sp, #44	; 0x2c
	xpt2046_select();
 8003a6a:	f7ff ff57 	bl	800391c <xpt2046_select>

	if(xpt2046_interruptions_activated())
 8003a6e:	f7ff ffb7 	bl	80039e0 <xpt2046_interruptions_activated>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	f040 80b9 	bne.w	8003bea <xpt2046_update+0x186>
		}


	}

	uint8_t zeros[2] = { 0x00,0x00};
 8003a78:	2600      	movs	r6, #0
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	f88d 6014 	strb.w	r6, [sp, #20]
 8003a80:	f88d 6015 	strb.w	r6, [sp, #21]
 8003a84:	9303      	str	r3, [sp, #12]
	uint32_t x_avg = 0, y_avg = 0,z1_avg=0,z2_avg=0;
 8003a86:	4637      	mov	r7, r6
 8003a88:	4635      	mov	r5, r6
 8003a8a:	4634      	mov	r4, r6
		ts_ControlByte.channel = XPT2046_DFR_X;
		xpt2046_control_byte_update();

		uint8_t receiveByteX[2] = {0x00,0x00};

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003a8c:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8003ca0 <xpt2046_update+0x23c>
		ts_ControlByte.channel = XPT2046_DFR_X;
 8003a90:	f8df b210 	ldr.w	fp, [pc, #528]	; 8003ca4 <xpt2046_update+0x240>
 8003a94:	2350      	movs	r3, #80	; 0x50
		uint8_t receiveByteX[2] = {0x00,0x00};
 8003a96:	f04f 0900 	mov.w	r9, #0
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteX,sizeof(receiveByteX),HAL_MAX_DELAY);
 8003a9a:	f04f 3aff 	mov.w	sl, #4294967295
		ts_ControlByte.channel = XPT2046_DFR_X;
 8003a9e:	f88b 3001 	strb.w	r3, [fp, #1]
		xpt2046_control_byte_update();
 8003aa2:	f7ff ffbd 	bl	8003a20 <xpt2046_control_byte_update>
		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4977      	ldr	r1, [pc, #476]	; (8003c8c <xpt2046_update+0x228>)
 8003aae:	f8d8 0000 	ldr.w	r0, [r8]
		uint8_t receiveByteX[2] = {0x00,0x00};
 8003ab2:	f88d 9018 	strb.w	r9, [sp, #24]
 8003ab6:	f88d 9019 	strb.w	r9, [sp, #25]
		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003aba:	f7fd fa70 	bl	8000f9e <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteX,sizeof(receiveByteX),HAL_MAX_DELAY);
 8003abe:	aa06      	add	r2, sp, #24
 8003ac0:	a905      	add	r1, sp, #20
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	f8cd a000 	str.w	sl, [sp]
 8003ac8:	f8d8 0000 	ldr.w	r0, [r8]
 8003acc:	f7fd fb0f 	bl	80010ee <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Y;
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	f88b 3001 	strb.w	r3, [fp, #1]
		xpt2046_control_byte_update();
 8003ad6:	f7ff ffa3 	bl	8003a20 <xpt2046_control_byte_update>

		uint8_t receiveByteY[2] = {0x00,0x00};
		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003ada:	4653      	mov	r3, sl
 8003adc:	2201      	movs	r2, #1
 8003ade:	496b      	ldr	r1, [pc, #428]	; (8003c8c <xpt2046_update+0x228>)
 8003ae0:	f8d8 0000 	ldr.w	r0, [r8]
		uint8_t receiveByteY[2] = {0x00,0x00};
 8003ae4:	f88d 901c 	strb.w	r9, [sp, #28]
 8003ae8:	f88d 901d 	strb.w	r9, [sp, #29]
		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003aec:	f7fd fa57 	bl	8000f9e <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteY,sizeof(receiveByteY),HAL_MAX_DELAY);
 8003af0:	aa07      	add	r2, sp, #28
 8003af2:	a905      	add	r1, sp, #20
 8003af4:	2302      	movs	r3, #2
 8003af6:	f8cd a000 	str.w	sl, [sp]
 8003afa:	f8d8 0000 	ldr.w	r0, [r8]
 8003afe:	f7fd faf6 	bl	80010ee <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Z1;
 8003b02:	2330      	movs	r3, #48	; 0x30
 8003b04:	f88b 3001 	strb.w	r3, [fp, #1]
		xpt2046_control_byte_update();
 8003b08:	f7ff ff8a 	bl	8003a20 <xpt2046_control_byte_update>
		uint8_t receiveByteZ1[2] = {0x00,0x00};

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003b0c:	4653      	mov	r3, sl
 8003b0e:	2201      	movs	r2, #1
 8003b10:	495e      	ldr	r1, [pc, #376]	; (8003c8c <xpt2046_update+0x228>)
 8003b12:	f8d8 0000 	ldr.w	r0, [r8]
		uint8_t receiveByteZ1[2] = {0x00,0x00};
 8003b16:	f88d 9020 	strb.w	r9, [sp, #32]
 8003b1a:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003b1e:	f7fd fa3e 	bl	8000f9e <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteZ1,sizeof(receiveByteZ1),HAL_MAX_DELAY);
 8003b22:	aa08      	add	r2, sp, #32
 8003b24:	a905      	add	r1, sp, #20
 8003b26:	2302      	movs	r3, #2
 8003b28:	f8cd a000 	str.w	sl, [sp]
 8003b2c:	f8d8 0000 	ldr.w	r0, [r8]
 8003b30:	f7fd fadd 	bl	80010ee <HAL_SPI_TransmitReceive>


		ts_ControlByte.channel = XPT2046_DFR_Z2;
 8003b34:	2340      	movs	r3, #64	; 0x40
 8003b36:	f88b 3001 	strb.w	r3, [fp, #1]
		xpt2046_control_byte_update();
 8003b3a:	f7ff ff71 	bl	8003a20 <xpt2046_control_byte_update>
		uint8_t receiveByteZ2[2] = {0x00,0x00};

		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003b3e:	4653      	mov	r3, sl
 8003b40:	2201      	movs	r2, #1
 8003b42:	4952      	ldr	r1, [pc, #328]	; (8003c8c <xpt2046_update+0x228>)
 8003b44:	f8d8 0000 	ldr.w	r0, [r8]
		uint8_t receiveByteZ2[2] = {0x00,0x00};
 8003b48:	f88d 9024 	strb.w	r9, [sp, #36]	; 0x24
 8003b4c:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
		HAL_SPI_Transmit(spiPort,&command,sizeof(command),HAL_MAX_DELAY);
 8003b50:	f7fd fa25 	bl	8000f9e <HAL_SPI_Transmit>
		HAL_SPI_TransmitReceive(spiPort,(uint8_t*)zeros,receiveByteZ2,sizeof(receiveByteZ2),HAL_MAX_DELAY);
 8003b54:	2302      	movs	r3, #2
 8003b56:	aa09      	add	r2, sp, #36	; 0x24
 8003b58:	a905      	add	r1, sp, #20
 8003b5a:	f8cd a000 	str.w	sl, [sp]
 8003b5e:	f8d8 0000 	ldr.w	r0, [r8]
 8003b62:	f7fd fac4 	bl	80010ee <HAL_SPI_TransmitReceive>
		if(ts_ControlByte.bitMode == XPT2046_12BIT_MODE)
 8003b66:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8003b6a:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8003b6e:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8003b72:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
 8003b76:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d13d      	bne.n	8003bfa <xpt2046_update+0x196>
		{
			x_avg+= 	(receiveByteX[1] 	<< 4) | (receiveByteX[0] 	>> 4);
 8003b7e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
			y_avg+= 	(receiveByteY[1] 	<< 4) | (receiveByteY[0] 	>> 4);
 8003b88:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8003b8c:	0909      	lsrs	r1, r1, #4
 8003b8e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
			x_avg+= 	(receiveByteX[1] 	<< 4) | (receiveByteX[0] 	>> 4);
 8003b92:	441c      	add	r4, r3
			z1_avg+= 	(receiveByteZ1[1] 	<< 4) | (receiveByteZ1[0] 	>> 4);
 8003b94:	f89d 2020 	ldrb.w	r2, [sp, #32]
			z2_avg+= 	(receiveByteZ2[1] 	<< 4) | (receiveByteZ2[0] 	>> 4);
 8003b98:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
			z1_avg+= 	(receiveByteZ1[1] 	<< 4) | (receiveByteZ1[0] 	>> 4);
 8003b9c:	0912      	lsrs	r2, r2, #4
			z2_avg+= 	(receiveByteZ2[1] 	<< 4) | (receiveByteZ2[0] 	>> 4);
 8003b9e:	091b      	lsrs	r3, r3, #4
			z1_avg+= 	(receiveByteZ1[1] 	<< 4) | (receiveByteZ1[0] 	>> 4);
 8003ba0:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
			z2_avg+= 	(receiveByteZ2[1] 	<< 4) | (receiveByteZ2[0] 	>> 4);
 8003ba4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
			y_avg+= 	(receiveByteY[1] 	<< 4) | (receiveByteY[0] 	>> 4);
 8003ba8:	440d      	add	r5, r1
			z1_avg+= 	(receiveByteZ1[1] 	<< 4) | (receiveByteZ1[0] 	>> 4);
 8003baa:	4417      	add	r7, r2
			z2_avg+= 	(receiveByteZ2[1] 	<< 4) | (receiveByteZ2[0] 	>> 4);
 8003bac:	441e      	add	r6, r3
	for(int i = 0; i < AVERAGE_POINTS; i++)
 8003bae:	9b03      	ldr	r3, [sp, #12]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	9303      	str	r3, [sp, #12]
 8003bb4:	f47f af6a 	bne.w	8003a8c <xpt2046_update+0x28>
			z2_avg+= 	(receiveByteZ2[1]);
		}

	}

	ts_CoordinatesRaw.x = x_avg/AVERAGE_POINTS;
 8003bb8:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <xpt2046_update+0x22c>)
 8003bba:	220a      	movs	r2, #10
	ts_CoordinatesRaw.y = y_avg/AVERAGE_POINTS;
	ts_CoordinatesRaw.z1 = z1_avg/AVERAGE_POINTS;
 8003bbc:	fbb7 f7f2 	udiv	r7, r7, r2
 8003bc0:	b2bf      	uxth	r7, r7
	ts_CoordinatesRaw.x = x_avg/AVERAGE_POINTS;
 8003bc2:	fbb4 f4f2 	udiv	r4, r4, r2
	ts_CoordinatesRaw.y = y_avg/AVERAGE_POINTS;
 8003bc6:	fbb5 f5f2 	udiv	r5, r5, r2
	ts_CoordinatesRaw.x = x_avg/AVERAGE_POINTS;
 8003bca:	801c      	strh	r4, [r3, #0]
	ts_CoordinatesRaw.y = y_avg/AVERAGE_POINTS;
 8003bcc:	805d      	strh	r5, [r3, #2]
	ts_CoordinatesRaw.z1 = z1_avg/AVERAGE_POINTS;
 8003bce:	809f      	strh	r7, [r3, #4]
	ts_CoordinatesRaw.z2 = z2_avg/AVERAGE_POINTS;
 8003bd0:	fbb6 f6f2 	udiv	r6, r6, r2
 8003bd4:	80de      	strh	r6, [r3, #6]
	uint16_t max = xpt2046_max_measurement();
 8003bd6:	f7ff ff35 	bl	8003a44 <xpt2046_max_measurement>
	/* Consider (0,0) as the top left point of the screen */
	switch(ts_Orientation)
 8003bda:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <xpt2046_update+0x230>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d833      	bhi.n	8003c4a <xpt2046_update+0x1e6>
 8003be2:	e8df f003 	tbb	[pc, r3]
 8003be6:	210f      	.short	0x210f
 8003be8:	4235      	.short	0x4235
		if(!xpt2046_interrupt())
 8003bea:	f7ff fee9 	bl	80039c0 <xpt2046_interrupt>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	f47f af42 	bne.w	8003a78 <xpt2046_update+0x14>
		}
	}


	xpt2046_unselect();
}
 8003bf4:	b00b      	add	sp, #44	; 0x2c
 8003bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			x_avg+= 	(receiveByteX[1]);
 8003bfa:	440c      	add	r4, r1
			y_avg+= 	(receiveByteY[1]) ;
 8003bfc:	4415      	add	r5, r2
			z1_avg+= 	(receiveByteZ1[1]);
 8003bfe:	4477      	add	r7, lr
			z2_avg+= 	(receiveByteZ2[1]);
 8003c00:	4406      	add	r6, r0
 8003c02:	e7d4      	b.n	8003bae <xpt2046_update+0x14a>
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c04:	4924      	ldr	r1, [pc, #144]	; (8003c98 <xpt2046_update+0x234>)
 8003c06:	4a25      	ldr	r2, [pc, #148]	; (8003c9c <xpt2046_update+0x238>)
 8003c08:	880b      	ldrh	r3, [r1, #0]
 8003c0a:	b2a4      	uxth	r4, r4
 8003c0c:	1b04      	subs	r4, r0, r4
 8003c0e:	4363      	muls	r3, r4
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c10:	884c      	ldrh	r4, [r1, #2]
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c12:	fb93 f3f0 	sdiv	r3, r3, r0
 8003c16:	3b0a      	subs	r3, #10
 8003c18:	8013      	strh	r3, [r2, #0]
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c1a:	b2ad      	uxth	r5, r5
			ts_Coordinates.y = (ts_Size.height * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c1c:	436c      	muls	r4, r5
 8003c1e:	fb94 f4f0 	sdiv	r4, r4, r0
			ts_Coordinates.y = (ts_Size.height * (max- ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c22:	8054      	strh	r4, [r2, #2]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8003c24:	8097      	strh	r7, [r2, #4]
			break;
 8003c26:	e010      	b.n	8003c4a <xpt2046_update+0x1e6>
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c28:	491b      	ldr	r1, [pc, #108]	; (8003c98 <xpt2046_update+0x234>)
 8003c2a:	4b1c      	ldr	r3, [pc, #112]	; (8003c9c <xpt2046_update+0x238>)
 8003c2c:	b2ad      	uxth	r5, r5
 8003c2e:	1b42      	subs	r2, r0, r5
 8003c30:	880d      	ldrh	r5, [r1, #0]
			ts_Coordinates.z = ts_CoordinatesRaw.z1;
 8003c32:	809f      	strh	r7, [r3, #4]
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c34:	4355      	muls	r5, r2
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c36:	884a      	ldrh	r2, [r1, #2]
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c38:	fb95 f5f0 	sdiv	r5, r5, r0
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c3c:	b2a4      	uxth	r4, r4
 8003c3e:	4354      	muls	r4, r2
 8003c40:	fb94 f4f0 	sdiv	r4, r4, r0
 8003c44:	3c0a      	subs	r4, #10
			ts_Coordinates.x = (ts_Size.width * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c46:	801d      	strh	r5, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c48:	805c      	strh	r4, [r3, #2]
	xpt2046_unselect();
 8003c4a:	f7ff fe73 	bl	8003934 <xpt2046_unselect>
 8003c4e:	e7d1      	b.n	8003bf4 <xpt2046_update+0x190>
			ts_Coordinates.x = (ts_Size.width * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c50:	4911      	ldr	r1, [pc, #68]	; (8003c98 <xpt2046_update+0x234>)
 8003c52:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <xpt2046_update+0x238>)
 8003c54:	880e      	ldrh	r6, [r1, #0]
 8003c56:	b2a3      	uxth	r3, r4
 8003c58:	4373      	muls	r3, r6
			ts_Coordinates.y = (ts_Size.height * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c5a:	b2ad      	uxth	r5, r5
			ts_Coordinates.x = (ts_Size.width * (ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c5c:	fb93 f3f0 	sdiv	r3, r3, r0
 8003c60:	3b0a      	subs	r3, #10
 8003c62:	8013      	strh	r3, [r2, #0]
			ts_Coordinates.y = (ts_Size.height * (max - ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c64:	1b45      	subs	r5, r0, r5
 8003c66:	884c      	ldrh	r4, [r1, #2]
 8003c68:	e7d8      	b.n	8003c1c <xpt2046_update+0x1b8>
			ts_Coordinates.x = (ts_Size.width *  (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <xpt2046_update+0x234>)
 8003c6c:	4a0b      	ldr	r2, [pc, #44]	; (8003c9c <xpt2046_update+0x238>)
 8003c6e:	8819      	ldrh	r1, [r3, #0]
			ts_Coordinates.y = (ts_Size.height * (max- ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c70:	885b      	ldrh	r3, [r3, #2]
 8003c72:	b2a4      	uxth	r4, r4
			ts_Coordinates.x = (ts_Size.width *  (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c74:	b2ad      	uxth	r5, r5
			ts_Coordinates.y = (ts_Size.height * (max- ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c76:	1b04      	subs	r4, r0, r4
			ts_Coordinates.x = (ts_Size.width *  (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c78:	434d      	muls	r5, r1
			ts_Coordinates.y = (ts_Size.height * (max- ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c7a:	435c      	muls	r4, r3
			ts_Coordinates.x = (ts_Size.width *  (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c7c:	fb95 f5f0 	sdiv	r5, r5, r0
			ts_Coordinates.y = (ts_Size.height * (max- ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c80:	fb94 f4f0 	sdiv	r4, r4, r0
			ts_Coordinates.x = (ts_Size.width *  (ts_CoordinatesRaw.y))/max - XPT2046_Y_OFFSET;
 8003c84:	8015      	strh	r5, [r2, #0]
			ts_Coordinates.y = (ts_Size.height * (max- ts_CoordinatesRaw.x))/max - XPT2046_X_OFFSET;
 8003c86:	3c0a      	subs	r4, #10
 8003c88:	e7cb      	b.n	8003c22 <xpt2046_update+0x1be>
 8003c8a:	bf00      	nop
 8003c8c:	2000023c 	.word	0x2000023c
 8003c90:	2000022c 	.word	0x2000022c
 8003c94:	20000498 	.word	0x20000498
 8003c98:	2000049c 	.word	0x2000049c
 8003c9c:	200002a4 	.word	0x200002a4
 8003ca0:	200001c8 	.word	0x200001c8
 8003ca4:	200004a4 	.word	0x200004a4

08003ca8 <xpt2046_read_position>:

/* by default return 0,0 if the screen isn't pressed*/
void xpt2046_read_position(uint16_t* x, uint16_t* y)
{
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	4605      	mov	r5, r0
 8003cac:	460c      	mov	r4, r1
	xpt2046_update();
 8003cae:	f7ff fed9 	bl	8003a64 <xpt2046_update>
	if(xpt2046_pressed())
 8003cb2:	f7ff fea1 	bl	80039f8 <xpt2046_pressed>
 8003cb6:	b128      	cbz	r0, 8003cc4 <xpt2046_read_position+0x1c>
	{
		*x = ts_Coordinates.x;
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <xpt2046_read_position+0x24>)
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	802a      	strh	r2, [r5, #0]
		*y = ts_Coordinates.y;
 8003cbe:	885b      	ldrh	r3, [r3, #2]
 8003cc0:	8023      	strh	r3, [r4, #0]
 8003cc2:	bd38      	pop	{r3, r4, r5, pc}
	}else
	{
		*x = 0;
 8003cc4:	8028      	strh	r0, [r5, #0]
		*y = 0;
 8003cc6:	8020      	strh	r0, [r4, #0]
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
 8003cca:	bf00      	nop
 8003ccc:	200002a4 	.word	0x200002a4

08003cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003cd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003cd6:	e003      	b.n	8003ce0 <LoopCopyDataInit>

08003cd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003cda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003cdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003cde:	3104      	adds	r1, #4

08003ce0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ce0:	480b      	ldr	r0, [pc, #44]	; (8003d10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ce4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ce6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ce8:	d3f6      	bcc.n	8003cd8 <CopyDataInit>
  ldr  r2, =_sbss
 8003cea:	4a0b      	ldr	r2, [pc, #44]	; (8003d18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cec:	e002      	b.n	8003cf4 <LoopFillZerobss>

08003cee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cf0:	f842 3b04 	str.w	r3, [r2], #4

08003cf4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cf6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cf8:	d3f9      	bcc.n	8003cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cfa:	f7fe fb67 	bl	80023cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cfe:	f000 f817 	bl	8003d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d02:	f7fe f927 	bl	8001f54 <main>
  bx  lr    
 8003d06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d0c:	08004df8 	.word	0x08004df8
  ldr  r0, =_sdata
 8003d10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d14:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8003d18:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8003d1c:	200004b0 	.word	0x200004b0

08003d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d20:	e7fe      	b.n	8003d20 <ADC_IRQHandler>
	...

08003d24 <__errno>:
 8003d24:	4b01      	ldr	r3, [pc, #4]	; (8003d2c <__errno+0x8>)
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	2000002c 	.word	0x2000002c

08003d30 <__libc_init_array>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4e0d      	ldr	r6, [pc, #52]	; (8003d68 <__libc_init_array+0x38>)
 8003d34:	4c0d      	ldr	r4, [pc, #52]	; (8003d6c <__libc_init_array+0x3c>)
 8003d36:	1ba4      	subs	r4, r4, r6
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	2500      	movs	r5, #0
 8003d3c:	42a5      	cmp	r5, r4
 8003d3e:	d109      	bne.n	8003d54 <__libc_init_array+0x24>
 8003d40:	4e0b      	ldr	r6, [pc, #44]	; (8003d70 <__libc_init_array+0x40>)
 8003d42:	4c0c      	ldr	r4, [pc, #48]	; (8003d74 <__libc_init_array+0x44>)
 8003d44:	f000 fc60 	bl	8004608 <_init>
 8003d48:	1ba4      	subs	r4, r4, r6
 8003d4a:	10a4      	asrs	r4, r4, #2
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	42a5      	cmp	r5, r4
 8003d50:	d105      	bne.n	8003d5e <__libc_init_array+0x2e>
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d58:	4798      	blx	r3
 8003d5a:	3501      	adds	r5, #1
 8003d5c:	e7ee      	b.n	8003d3c <__libc_init_array+0xc>
 8003d5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d62:	4798      	blx	r3
 8003d64:	3501      	adds	r5, #1
 8003d66:	e7f2      	b.n	8003d4e <__libc_init_array+0x1e>
 8003d68:	08004df0 	.word	0x08004df0
 8003d6c:	08004df0 	.word	0x08004df0
 8003d70:	08004df0 	.word	0x08004df0
 8003d74:	08004df4 	.word	0x08004df4

08003d78 <memset>:
 8003d78:	4402      	add	r2, r0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d100      	bne.n	8003d82 <memset+0xa>
 8003d80:	4770      	bx	lr
 8003d82:	f803 1b01 	strb.w	r1, [r3], #1
 8003d86:	e7f9      	b.n	8003d7c <memset+0x4>

08003d88 <siprintf>:
 8003d88:	b40e      	push	{r1, r2, r3}
 8003d8a:	b500      	push	{lr}
 8003d8c:	b09c      	sub	sp, #112	; 0x70
 8003d8e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003d92:	ab1d      	add	r3, sp, #116	; 0x74
 8003d94:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003d98:	9002      	str	r0, [sp, #8]
 8003d9a:	9006      	str	r0, [sp, #24]
 8003d9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003da0:	480a      	ldr	r0, [pc, #40]	; (8003dcc <siprintf+0x44>)
 8003da2:	9104      	str	r1, [sp, #16]
 8003da4:	9107      	str	r1, [sp, #28]
 8003da6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dae:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003db2:	6800      	ldr	r0, [r0, #0]
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	a902      	add	r1, sp, #8
 8003db8:	f000 f888 	bl	8003ecc <_svfiprintf_r>
 8003dbc:	9b02      	ldr	r3, [sp, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	b01c      	add	sp, #112	; 0x70
 8003dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc8:	b003      	add	sp, #12
 8003dca:	4770      	bx	lr
 8003dcc:	2000002c 	.word	0x2000002c

08003dd0 <_vsiprintf_r>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	b09a      	sub	sp, #104	; 0x68
 8003dd4:	f44f 7402 	mov.w	r4, #520	; 0x208
 8003dd8:	9100      	str	r1, [sp, #0]
 8003dda:	9104      	str	r1, [sp, #16]
 8003ddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003de0:	9102      	str	r1, [sp, #8]
 8003de2:	9105      	str	r1, [sp, #20]
 8003de4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003de8:	f8ad 100e 	strh.w	r1, [sp, #14]
 8003dec:	4669      	mov	r1, sp
 8003dee:	f8ad 400c 	strh.w	r4, [sp, #12]
 8003df2:	f000 f86b 	bl	8003ecc <_svfiprintf_r>
 8003df6:	9b00      	ldr	r3, [sp, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	b01a      	add	sp, #104	; 0x68
 8003dfe:	bd10      	pop	{r4, pc}

08003e00 <vsiprintf>:
 8003e00:	4613      	mov	r3, r2
 8003e02:	460a      	mov	r2, r1
 8003e04:	4601      	mov	r1, r0
 8003e06:	4802      	ldr	r0, [pc, #8]	; (8003e10 <vsiprintf+0x10>)
 8003e08:	6800      	ldr	r0, [r0, #0]
 8003e0a:	f7ff bfe1 	b.w	8003dd0 <_vsiprintf_r>
 8003e0e:	bf00      	nop
 8003e10:	2000002c 	.word	0x2000002c

08003e14 <__ssputs_r>:
 8003e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	688e      	ldr	r6, [r1, #8]
 8003e1a:	429e      	cmp	r6, r3
 8003e1c:	4682      	mov	sl, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	4691      	mov	r9, r2
 8003e22:	4698      	mov	r8, r3
 8003e24:	d835      	bhi.n	8003e92 <__ssputs_r+0x7e>
 8003e26:	898a      	ldrh	r2, [r1, #12]
 8003e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e2c:	d031      	beq.n	8003e92 <__ssputs_r+0x7e>
 8003e2e:	6825      	ldr	r5, [r4, #0]
 8003e30:	6909      	ldr	r1, [r1, #16]
 8003e32:	1a6f      	subs	r7, r5, r1
 8003e34:	6965      	ldr	r5, [r4, #20]
 8003e36:	2302      	movs	r3, #2
 8003e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e40:	f108 0301 	add.w	r3, r8, #1
 8003e44:	443b      	add	r3, r7
 8003e46:	429d      	cmp	r5, r3
 8003e48:	bf38      	it	cc
 8003e4a:	461d      	movcc	r5, r3
 8003e4c:	0553      	lsls	r3, r2, #21
 8003e4e:	d531      	bpl.n	8003eb4 <__ssputs_r+0xa0>
 8003e50:	4629      	mov	r1, r5
 8003e52:	f000 fb39 	bl	80044c8 <_malloc_r>
 8003e56:	4606      	mov	r6, r0
 8003e58:	b950      	cbnz	r0, 8003e70 <__ssputs_r+0x5c>
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	f8ca 3000 	str.w	r3, [sl]
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e66:	81a3      	strh	r3, [r4, #12]
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	463a      	mov	r2, r7
 8003e72:	6921      	ldr	r1, [r4, #16]
 8003e74:	f000 fab4 	bl	80043e0 <memcpy>
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e82:	81a3      	strh	r3, [r4, #12]
 8003e84:	6126      	str	r6, [r4, #16]
 8003e86:	6165      	str	r5, [r4, #20]
 8003e88:	443e      	add	r6, r7
 8003e8a:	1bed      	subs	r5, r5, r7
 8003e8c:	6026      	str	r6, [r4, #0]
 8003e8e:	60a5      	str	r5, [r4, #8]
 8003e90:	4646      	mov	r6, r8
 8003e92:	4546      	cmp	r6, r8
 8003e94:	bf28      	it	cs
 8003e96:	4646      	movcs	r6, r8
 8003e98:	4632      	mov	r2, r6
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	f000 faaa 	bl	80043f6 <memmove>
 8003ea2:	68a3      	ldr	r3, [r4, #8]
 8003ea4:	1b9b      	subs	r3, r3, r6
 8003ea6:	60a3      	str	r3, [r4, #8]
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	441e      	add	r6, r3
 8003eac:	6026      	str	r6, [r4, #0]
 8003eae:	2000      	movs	r0, #0
 8003eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb4:	462a      	mov	r2, r5
 8003eb6:	f000 fb65 	bl	8004584 <_realloc_r>
 8003eba:	4606      	mov	r6, r0
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d1e1      	bne.n	8003e84 <__ssputs_r+0x70>
 8003ec0:	6921      	ldr	r1, [r4, #16]
 8003ec2:	4650      	mov	r0, sl
 8003ec4:	f000 fab2 	bl	800442c <_free_r>
 8003ec8:	e7c7      	b.n	8003e5a <__ssputs_r+0x46>
	...

08003ecc <_svfiprintf_r>:
 8003ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed0:	b09d      	sub	sp, #116	; 0x74
 8003ed2:	4680      	mov	r8, r0
 8003ed4:	9303      	str	r3, [sp, #12]
 8003ed6:	898b      	ldrh	r3, [r1, #12]
 8003ed8:	061c      	lsls	r4, r3, #24
 8003eda:	460d      	mov	r5, r1
 8003edc:	4616      	mov	r6, r2
 8003ede:	d50f      	bpl.n	8003f00 <_svfiprintf_r+0x34>
 8003ee0:	690b      	ldr	r3, [r1, #16]
 8003ee2:	b96b      	cbnz	r3, 8003f00 <_svfiprintf_r+0x34>
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	f000 faef 	bl	80044c8 <_malloc_r>
 8003eea:	6028      	str	r0, [r5, #0]
 8003eec:	6128      	str	r0, [r5, #16]
 8003eee:	b928      	cbnz	r0, 8003efc <_svfiprintf_r+0x30>
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	f8c8 3000 	str.w	r3, [r8]
 8003ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8003efa:	e0c5      	b.n	8004088 <_svfiprintf_r+0x1bc>
 8003efc:	2340      	movs	r3, #64	; 0x40
 8003efe:	616b      	str	r3, [r5, #20]
 8003f00:	2300      	movs	r3, #0
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
 8003f04:	2320      	movs	r3, #32
 8003f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f0a:	2330      	movs	r3, #48	; 0x30
 8003f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f10:	f04f 0b01 	mov.w	fp, #1
 8003f14:	4637      	mov	r7, r6
 8003f16:	463c      	mov	r4, r7
 8003f18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d13c      	bne.n	8003f9a <_svfiprintf_r+0xce>
 8003f20:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f24:	d00b      	beq.n	8003f3e <_svfiprintf_r+0x72>
 8003f26:	4653      	mov	r3, sl
 8003f28:	4632      	mov	r2, r6
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	4640      	mov	r0, r8
 8003f2e:	f7ff ff71 	bl	8003e14 <__ssputs_r>
 8003f32:	3001      	adds	r0, #1
 8003f34:	f000 80a3 	beq.w	800407e <_svfiprintf_r+0x1b2>
 8003f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f3a:	4453      	add	r3, sl
 8003f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f3e:	783b      	ldrb	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 809c 	beq.w	800407e <_svfiprintf_r+0x1b2>
 8003f46:	2300      	movs	r3, #0
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4c:	9304      	str	r3, [sp, #16]
 8003f4e:	9307      	str	r3, [sp, #28]
 8003f50:	9205      	str	r2, [sp, #20]
 8003f52:	9306      	str	r3, [sp, #24]
 8003f54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f58:	931a      	str	r3, [sp, #104]	; 0x68
 8003f5a:	2205      	movs	r2, #5
 8003f5c:	7821      	ldrb	r1, [r4, #0]
 8003f5e:	4850      	ldr	r0, [pc, #320]	; (80040a0 <_svfiprintf_r+0x1d4>)
 8003f60:	f7fc f936 	bl	80001d0 <memchr>
 8003f64:	1c67      	adds	r7, r4, #1
 8003f66:	9b04      	ldr	r3, [sp, #16]
 8003f68:	b9d8      	cbnz	r0, 8003fa2 <_svfiprintf_r+0xd6>
 8003f6a:	06d9      	lsls	r1, r3, #27
 8003f6c:	bf44      	itt	mi
 8003f6e:	2220      	movmi	r2, #32
 8003f70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f74:	071a      	lsls	r2, r3, #28
 8003f76:	bf44      	itt	mi
 8003f78:	222b      	movmi	r2, #43	; 0x2b
 8003f7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f7e:	7822      	ldrb	r2, [r4, #0]
 8003f80:	2a2a      	cmp	r2, #42	; 0x2a
 8003f82:	d016      	beq.n	8003fb2 <_svfiprintf_r+0xe6>
 8003f84:	9a07      	ldr	r2, [sp, #28]
 8003f86:	2100      	movs	r1, #0
 8003f88:	200a      	movs	r0, #10
 8003f8a:	4627      	mov	r7, r4
 8003f8c:	3401      	adds	r4, #1
 8003f8e:	783b      	ldrb	r3, [r7, #0]
 8003f90:	3b30      	subs	r3, #48	; 0x30
 8003f92:	2b09      	cmp	r3, #9
 8003f94:	d951      	bls.n	800403a <_svfiprintf_r+0x16e>
 8003f96:	b1c9      	cbz	r1, 8003fcc <_svfiprintf_r+0x100>
 8003f98:	e011      	b.n	8003fbe <_svfiprintf_r+0xf2>
 8003f9a:	2b25      	cmp	r3, #37	; 0x25
 8003f9c:	d0c0      	beq.n	8003f20 <_svfiprintf_r+0x54>
 8003f9e:	4627      	mov	r7, r4
 8003fa0:	e7b9      	b.n	8003f16 <_svfiprintf_r+0x4a>
 8003fa2:	4a3f      	ldr	r2, [pc, #252]	; (80040a0 <_svfiprintf_r+0x1d4>)
 8003fa4:	1a80      	subs	r0, r0, r2
 8003fa6:	fa0b f000 	lsl.w	r0, fp, r0
 8003faa:	4318      	orrs	r0, r3
 8003fac:	9004      	str	r0, [sp, #16]
 8003fae:	463c      	mov	r4, r7
 8003fb0:	e7d3      	b.n	8003f5a <_svfiprintf_r+0x8e>
 8003fb2:	9a03      	ldr	r2, [sp, #12]
 8003fb4:	1d11      	adds	r1, r2, #4
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	9103      	str	r1, [sp, #12]
 8003fba:	2a00      	cmp	r2, #0
 8003fbc:	db01      	blt.n	8003fc2 <_svfiprintf_r+0xf6>
 8003fbe:	9207      	str	r2, [sp, #28]
 8003fc0:	e004      	b.n	8003fcc <_svfiprintf_r+0x100>
 8003fc2:	4252      	negs	r2, r2
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	9207      	str	r2, [sp, #28]
 8003fca:	9304      	str	r3, [sp, #16]
 8003fcc:	783b      	ldrb	r3, [r7, #0]
 8003fce:	2b2e      	cmp	r3, #46	; 0x2e
 8003fd0:	d10e      	bne.n	8003ff0 <_svfiprintf_r+0x124>
 8003fd2:	787b      	ldrb	r3, [r7, #1]
 8003fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd6:	f107 0101 	add.w	r1, r7, #1
 8003fda:	d132      	bne.n	8004042 <_svfiprintf_r+0x176>
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	9203      	str	r2, [sp, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bfb8      	it	lt
 8003fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fec:	3702      	adds	r7, #2
 8003fee:	9305      	str	r3, [sp, #20]
 8003ff0:	4c2c      	ldr	r4, [pc, #176]	; (80040a4 <_svfiprintf_r+0x1d8>)
 8003ff2:	7839      	ldrb	r1, [r7, #0]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7fc f8ea 	bl	80001d0 <memchr>
 8003ffc:	b138      	cbz	r0, 800400e <_svfiprintf_r+0x142>
 8003ffe:	2340      	movs	r3, #64	; 0x40
 8004000:	1b00      	subs	r0, r0, r4
 8004002:	fa03 f000 	lsl.w	r0, r3, r0
 8004006:	9b04      	ldr	r3, [sp, #16]
 8004008:	4303      	orrs	r3, r0
 800400a:	9304      	str	r3, [sp, #16]
 800400c:	3701      	adds	r7, #1
 800400e:	7839      	ldrb	r1, [r7, #0]
 8004010:	4825      	ldr	r0, [pc, #148]	; (80040a8 <_svfiprintf_r+0x1dc>)
 8004012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004016:	2206      	movs	r2, #6
 8004018:	1c7e      	adds	r6, r7, #1
 800401a:	f7fc f8d9 	bl	80001d0 <memchr>
 800401e:	2800      	cmp	r0, #0
 8004020:	d035      	beq.n	800408e <_svfiprintf_r+0x1c2>
 8004022:	4b22      	ldr	r3, [pc, #136]	; (80040ac <_svfiprintf_r+0x1e0>)
 8004024:	b9fb      	cbnz	r3, 8004066 <_svfiprintf_r+0x19a>
 8004026:	9b03      	ldr	r3, [sp, #12]
 8004028:	3307      	adds	r3, #7
 800402a:	f023 0307 	bic.w	r3, r3, #7
 800402e:	3308      	adds	r3, #8
 8004030:	9303      	str	r3, [sp, #12]
 8004032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004034:	444b      	add	r3, r9
 8004036:	9309      	str	r3, [sp, #36]	; 0x24
 8004038:	e76c      	b.n	8003f14 <_svfiprintf_r+0x48>
 800403a:	fb00 3202 	mla	r2, r0, r2, r3
 800403e:	2101      	movs	r1, #1
 8004040:	e7a3      	b.n	8003f8a <_svfiprintf_r+0xbe>
 8004042:	2300      	movs	r3, #0
 8004044:	9305      	str	r3, [sp, #20]
 8004046:	4618      	mov	r0, r3
 8004048:	240a      	movs	r4, #10
 800404a:	460f      	mov	r7, r1
 800404c:	3101      	adds	r1, #1
 800404e:	783a      	ldrb	r2, [r7, #0]
 8004050:	3a30      	subs	r2, #48	; 0x30
 8004052:	2a09      	cmp	r2, #9
 8004054:	d903      	bls.n	800405e <_svfiprintf_r+0x192>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ca      	beq.n	8003ff0 <_svfiprintf_r+0x124>
 800405a:	9005      	str	r0, [sp, #20]
 800405c:	e7c8      	b.n	8003ff0 <_svfiprintf_r+0x124>
 800405e:	fb04 2000 	mla	r0, r4, r0, r2
 8004062:	2301      	movs	r3, #1
 8004064:	e7f1      	b.n	800404a <_svfiprintf_r+0x17e>
 8004066:	ab03      	add	r3, sp, #12
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	462a      	mov	r2, r5
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <_svfiprintf_r+0x1e4>)
 800406e:	a904      	add	r1, sp, #16
 8004070:	4640      	mov	r0, r8
 8004072:	f3af 8000 	nop.w
 8004076:	f1b0 3fff 	cmp.w	r0, #4294967295
 800407a:	4681      	mov	r9, r0
 800407c:	d1d9      	bne.n	8004032 <_svfiprintf_r+0x166>
 800407e:	89ab      	ldrh	r3, [r5, #12]
 8004080:	065b      	lsls	r3, r3, #25
 8004082:	f53f af38 	bmi.w	8003ef6 <_svfiprintf_r+0x2a>
 8004086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004088:	b01d      	add	sp, #116	; 0x74
 800408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408e:	ab03      	add	r3, sp, #12
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	462a      	mov	r2, r5
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <_svfiprintf_r+0x1e4>)
 8004096:	a904      	add	r1, sp, #16
 8004098:	4640      	mov	r0, r8
 800409a:	f000 f881 	bl	80041a0 <_printf_i>
 800409e:	e7ea      	b.n	8004076 <_svfiprintf_r+0x1aa>
 80040a0:	08004db5 	.word	0x08004db5
 80040a4:	08004dbb 	.word	0x08004dbb
 80040a8:	08004dbf 	.word	0x08004dbf
 80040ac:	00000000 	.word	0x00000000
 80040b0:	08003e15 	.word	0x08003e15

080040b4 <_printf_common>:
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	4691      	mov	r9, r2
 80040ba:	461f      	mov	r7, r3
 80040bc:	688a      	ldr	r2, [r1, #8]
 80040be:	690b      	ldr	r3, [r1, #16]
 80040c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bfb8      	it	lt
 80040c8:	4613      	movlt	r3, r2
 80040ca:	f8c9 3000 	str.w	r3, [r9]
 80040ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040d2:	4606      	mov	r6, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	b112      	cbz	r2, 80040de <_printf_common+0x2a>
 80040d8:	3301      	adds	r3, #1
 80040da:	f8c9 3000 	str.w	r3, [r9]
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	0699      	lsls	r1, r3, #26
 80040e2:	bf42      	ittt	mi
 80040e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040e8:	3302      	addmi	r3, #2
 80040ea:	f8c9 3000 	strmi.w	r3, [r9]
 80040ee:	6825      	ldr	r5, [r4, #0]
 80040f0:	f015 0506 	ands.w	r5, r5, #6
 80040f4:	d107      	bne.n	8004106 <_printf_common+0x52>
 80040f6:	f104 0a19 	add.w	sl, r4, #25
 80040fa:	68e3      	ldr	r3, [r4, #12]
 80040fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	429d      	cmp	r5, r3
 8004104:	db29      	blt.n	800415a <_printf_common+0xa6>
 8004106:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	3300      	adds	r3, #0
 800410e:	bf18      	it	ne
 8004110:	2301      	movne	r3, #1
 8004112:	0692      	lsls	r2, r2, #26
 8004114:	d42e      	bmi.n	8004174 <_printf_common+0xc0>
 8004116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800411a:	4639      	mov	r1, r7
 800411c:	4630      	mov	r0, r6
 800411e:	47c0      	blx	r8
 8004120:	3001      	adds	r0, #1
 8004122:	d021      	beq.n	8004168 <_printf_common+0xb4>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	68e5      	ldr	r5, [r4, #12]
 8004128:	f8d9 2000 	ldr.w	r2, [r9]
 800412c:	f003 0306 	and.w	r3, r3, #6
 8004130:	2b04      	cmp	r3, #4
 8004132:	bf08      	it	eq
 8004134:	1aad      	subeq	r5, r5, r2
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	6922      	ldr	r2, [r4, #16]
 800413a:	bf0c      	ite	eq
 800413c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004140:	2500      	movne	r5, #0
 8004142:	4293      	cmp	r3, r2
 8004144:	bfc4      	itt	gt
 8004146:	1a9b      	subgt	r3, r3, r2
 8004148:	18ed      	addgt	r5, r5, r3
 800414a:	f04f 0900 	mov.w	r9, #0
 800414e:	341a      	adds	r4, #26
 8004150:	454d      	cmp	r5, r9
 8004152:	d11b      	bne.n	800418c <_printf_common+0xd8>
 8004154:	2000      	movs	r0, #0
 8004156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415a:	2301      	movs	r3, #1
 800415c:	4652      	mov	r2, sl
 800415e:	4639      	mov	r1, r7
 8004160:	4630      	mov	r0, r6
 8004162:	47c0      	blx	r8
 8004164:	3001      	adds	r0, #1
 8004166:	d103      	bne.n	8004170 <_printf_common+0xbc>
 8004168:	f04f 30ff 	mov.w	r0, #4294967295
 800416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004170:	3501      	adds	r5, #1
 8004172:	e7c2      	b.n	80040fa <_printf_common+0x46>
 8004174:	18e1      	adds	r1, r4, r3
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	2030      	movs	r0, #48	; 0x30
 800417a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800417e:	4422      	add	r2, r4
 8004180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004188:	3302      	adds	r3, #2
 800418a:	e7c4      	b.n	8004116 <_printf_common+0x62>
 800418c:	2301      	movs	r3, #1
 800418e:	4622      	mov	r2, r4
 8004190:	4639      	mov	r1, r7
 8004192:	4630      	mov	r0, r6
 8004194:	47c0      	blx	r8
 8004196:	3001      	adds	r0, #1
 8004198:	d0e6      	beq.n	8004168 <_printf_common+0xb4>
 800419a:	f109 0901 	add.w	r9, r9, #1
 800419e:	e7d7      	b.n	8004150 <_printf_common+0x9c>

080041a0 <_printf_i>:
 80041a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041a4:	4617      	mov	r7, r2
 80041a6:	7e0a      	ldrb	r2, [r1, #24]
 80041a8:	b085      	sub	sp, #20
 80041aa:	2a6e      	cmp	r2, #110	; 0x6e
 80041ac:	4698      	mov	r8, r3
 80041ae:	4606      	mov	r6, r0
 80041b0:	460c      	mov	r4, r1
 80041b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041b4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80041b8:	f000 80bc 	beq.w	8004334 <_printf_i+0x194>
 80041bc:	d81a      	bhi.n	80041f4 <_printf_i+0x54>
 80041be:	2a63      	cmp	r2, #99	; 0x63
 80041c0:	d02e      	beq.n	8004220 <_printf_i+0x80>
 80041c2:	d80a      	bhi.n	80041da <_printf_i+0x3a>
 80041c4:	2a00      	cmp	r2, #0
 80041c6:	f000 80c8 	beq.w	800435a <_printf_i+0x1ba>
 80041ca:	2a58      	cmp	r2, #88	; 0x58
 80041cc:	f000 808a 	beq.w	80042e4 <_printf_i+0x144>
 80041d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80041d8:	e02a      	b.n	8004230 <_printf_i+0x90>
 80041da:	2a64      	cmp	r2, #100	; 0x64
 80041dc:	d001      	beq.n	80041e2 <_printf_i+0x42>
 80041de:	2a69      	cmp	r2, #105	; 0x69
 80041e0:	d1f6      	bne.n	80041d0 <_printf_i+0x30>
 80041e2:	6821      	ldr	r1, [r4, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80041ea:	d023      	beq.n	8004234 <_printf_i+0x94>
 80041ec:	1d11      	adds	r1, r2, #4
 80041ee:	6019      	str	r1, [r3, #0]
 80041f0:	6813      	ldr	r3, [r2, #0]
 80041f2:	e027      	b.n	8004244 <_printf_i+0xa4>
 80041f4:	2a73      	cmp	r2, #115	; 0x73
 80041f6:	f000 80b4 	beq.w	8004362 <_printf_i+0x1c2>
 80041fa:	d808      	bhi.n	800420e <_printf_i+0x6e>
 80041fc:	2a6f      	cmp	r2, #111	; 0x6f
 80041fe:	d02a      	beq.n	8004256 <_printf_i+0xb6>
 8004200:	2a70      	cmp	r2, #112	; 0x70
 8004202:	d1e5      	bne.n	80041d0 <_printf_i+0x30>
 8004204:	680a      	ldr	r2, [r1, #0]
 8004206:	f042 0220 	orr.w	r2, r2, #32
 800420a:	600a      	str	r2, [r1, #0]
 800420c:	e003      	b.n	8004216 <_printf_i+0x76>
 800420e:	2a75      	cmp	r2, #117	; 0x75
 8004210:	d021      	beq.n	8004256 <_printf_i+0xb6>
 8004212:	2a78      	cmp	r2, #120	; 0x78
 8004214:	d1dc      	bne.n	80041d0 <_printf_i+0x30>
 8004216:	2278      	movs	r2, #120	; 0x78
 8004218:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800421c:	496e      	ldr	r1, [pc, #440]	; (80043d8 <_printf_i+0x238>)
 800421e:	e064      	b.n	80042ea <_printf_i+0x14a>
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004226:	1d11      	adds	r1, r2, #4
 8004228:	6019      	str	r1, [r3, #0]
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004230:	2301      	movs	r3, #1
 8004232:	e0a3      	b.n	800437c <_printf_i+0x1dc>
 8004234:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004238:	f102 0104 	add.w	r1, r2, #4
 800423c:	6019      	str	r1, [r3, #0]
 800423e:	d0d7      	beq.n	80041f0 <_printf_i+0x50>
 8004240:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004244:	2b00      	cmp	r3, #0
 8004246:	da03      	bge.n	8004250 <_printf_i+0xb0>
 8004248:	222d      	movs	r2, #45	; 0x2d
 800424a:	425b      	negs	r3, r3
 800424c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004250:	4962      	ldr	r1, [pc, #392]	; (80043dc <_printf_i+0x23c>)
 8004252:	220a      	movs	r2, #10
 8004254:	e017      	b.n	8004286 <_printf_i+0xe6>
 8004256:	6820      	ldr	r0, [r4, #0]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800425e:	d003      	beq.n	8004268 <_printf_i+0xc8>
 8004260:	1d08      	adds	r0, r1, #4
 8004262:	6018      	str	r0, [r3, #0]
 8004264:	680b      	ldr	r3, [r1, #0]
 8004266:	e006      	b.n	8004276 <_printf_i+0xd6>
 8004268:	f010 0f40 	tst.w	r0, #64	; 0x40
 800426c:	f101 0004 	add.w	r0, r1, #4
 8004270:	6018      	str	r0, [r3, #0]
 8004272:	d0f7      	beq.n	8004264 <_printf_i+0xc4>
 8004274:	880b      	ldrh	r3, [r1, #0]
 8004276:	4959      	ldr	r1, [pc, #356]	; (80043dc <_printf_i+0x23c>)
 8004278:	2a6f      	cmp	r2, #111	; 0x6f
 800427a:	bf14      	ite	ne
 800427c:	220a      	movne	r2, #10
 800427e:	2208      	moveq	r2, #8
 8004280:	2000      	movs	r0, #0
 8004282:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004286:	6865      	ldr	r5, [r4, #4]
 8004288:	60a5      	str	r5, [r4, #8]
 800428a:	2d00      	cmp	r5, #0
 800428c:	f2c0 809c 	blt.w	80043c8 <_printf_i+0x228>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	f020 0004 	bic.w	r0, r0, #4
 8004296:	6020      	str	r0, [r4, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d13f      	bne.n	800431c <_printf_i+0x17c>
 800429c:	2d00      	cmp	r5, #0
 800429e:	f040 8095 	bne.w	80043cc <_printf_i+0x22c>
 80042a2:	4675      	mov	r5, lr
 80042a4:	2a08      	cmp	r2, #8
 80042a6:	d10b      	bne.n	80042c0 <_printf_i+0x120>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	07da      	lsls	r2, r3, #31
 80042ac:	d508      	bpl.n	80042c0 <_printf_i+0x120>
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	6862      	ldr	r2, [r4, #4]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	bfde      	ittt	le
 80042b6:	2330      	movle	r3, #48	; 0x30
 80042b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042c0:	ebae 0305 	sub.w	r3, lr, r5
 80042c4:	6123      	str	r3, [r4, #16]
 80042c6:	f8cd 8000 	str.w	r8, [sp]
 80042ca:	463b      	mov	r3, r7
 80042cc:	aa03      	add	r2, sp, #12
 80042ce:	4621      	mov	r1, r4
 80042d0:	4630      	mov	r0, r6
 80042d2:	f7ff feef 	bl	80040b4 <_printf_common>
 80042d6:	3001      	adds	r0, #1
 80042d8:	d155      	bne.n	8004386 <_printf_i+0x1e6>
 80042da:	f04f 30ff 	mov.w	r0, #4294967295
 80042de:	b005      	add	sp, #20
 80042e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80042e8:	493c      	ldr	r1, [pc, #240]	; (80043dc <_printf_i+0x23c>)
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80042f2:	f100 0504 	add.w	r5, r0, #4
 80042f6:	601d      	str	r5, [r3, #0]
 80042f8:	d001      	beq.n	80042fe <_printf_i+0x15e>
 80042fa:	6803      	ldr	r3, [r0, #0]
 80042fc:	e002      	b.n	8004304 <_printf_i+0x164>
 80042fe:	0655      	lsls	r5, r2, #25
 8004300:	d5fb      	bpl.n	80042fa <_printf_i+0x15a>
 8004302:	8803      	ldrh	r3, [r0, #0]
 8004304:	07d0      	lsls	r0, r2, #31
 8004306:	bf44      	itt	mi
 8004308:	f042 0220 	orrmi.w	r2, r2, #32
 800430c:	6022      	strmi	r2, [r4, #0]
 800430e:	b91b      	cbnz	r3, 8004318 <_printf_i+0x178>
 8004310:	6822      	ldr	r2, [r4, #0]
 8004312:	f022 0220 	bic.w	r2, r2, #32
 8004316:	6022      	str	r2, [r4, #0]
 8004318:	2210      	movs	r2, #16
 800431a:	e7b1      	b.n	8004280 <_printf_i+0xe0>
 800431c:	4675      	mov	r5, lr
 800431e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004322:	fb02 3310 	mls	r3, r2, r0, r3
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800432c:	4603      	mov	r3, r0
 800432e:	2800      	cmp	r0, #0
 8004330:	d1f5      	bne.n	800431e <_printf_i+0x17e>
 8004332:	e7b7      	b.n	80042a4 <_printf_i+0x104>
 8004334:	6808      	ldr	r0, [r1, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	6949      	ldr	r1, [r1, #20]
 800433a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800433e:	d004      	beq.n	800434a <_printf_i+0x1aa>
 8004340:	1d10      	adds	r0, r2, #4
 8004342:	6018      	str	r0, [r3, #0]
 8004344:	6813      	ldr	r3, [r2, #0]
 8004346:	6019      	str	r1, [r3, #0]
 8004348:	e007      	b.n	800435a <_printf_i+0x1ba>
 800434a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800434e:	f102 0004 	add.w	r0, r2, #4
 8004352:	6018      	str	r0, [r3, #0]
 8004354:	6813      	ldr	r3, [r2, #0]
 8004356:	d0f6      	beq.n	8004346 <_printf_i+0x1a6>
 8004358:	8019      	strh	r1, [r3, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	4675      	mov	r5, lr
 8004360:	e7b1      	b.n	80042c6 <_printf_i+0x126>
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	1d11      	adds	r1, r2, #4
 8004366:	6019      	str	r1, [r3, #0]
 8004368:	6815      	ldr	r5, [r2, #0]
 800436a:	6862      	ldr	r2, [r4, #4]
 800436c:	2100      	movs	r1, #0
 800436e:	4628      	mov	r0, r5
 8004370:	f7fb ff2e 	bl	80001d0 <memchr>
 8004374:	b108      	cbz	r0, 800437a <_printf_i+0x1da>
 8004376:	1b40      	subs	r0, r0, r5
 8004378:	6060      	str	r0, [r4, #4]
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	6123      	str	r3, [r4, #16]
 800437e:	2300      	movs	r3, #0
 8004380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004384:	e79f      	b.n	80042c6 <_printf_i+0x126>
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	462a      	mov	r2, r5
 800438a:	4639      	mov	r1, r7
 800438c:	4630      	mov	r0, r6
 800438e:	47c0      	blx	r8
 8004390:	3001      	adds	r0, #1
 8004392:	d0a2      	beq.n	80042da <_printf_i+0x13a>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	079b      	lsls	r3, r3, #30
 8004398:	d507      	bpl.n	80043aa <_printf_i+0x20a>
 800439a:	2500      	movs	r5, #0
 800439c:	f104 0919 	add.w	r9, r4, #25
 80043a0:	68e3      	ldr	r3, [r4, #12]
 80043a2:	9a03      	ldr	r2, [sp, #12]
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	429d      	cmp	r5, r3
 80043a8:	db05      	blt.n	80043b6 <_printf_i+0x216>
 80043aa:	68e0      	ldr	r0, [r4, #12]
 80043ac:	9b03      	ldr	r3, [sp, #12]
 80043ae:	4298      	cmp	r0, r3
 80043b0:	bfb8      	it	lt
 80043b2:	4618      	movlt	r0, r3
 80043b4:	e793      	b.n	80042de <_printf_i+0x13e>
 80043b6:	2301      	movs	r3, #1
 80043b8:	464a      	mov	r2, r9
 80043ba:	4639      	mov	r1, r7
 80043bc:	4630      	mov	r0, r6
 80043be:	47c0      	blx	r8
 80043c0:	3001      	adds	r0, #1
 80043c2:	d08a      	beq.n	80042da <_printf_i+0x13a>
 80043c4:	3501      	adds	r5, #1
 80043c6:	e7eb      	b.n	80043a0 <_printf_i+0x200>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1a7      	bne.n	800431c <_printf_i+0x17c>
 80043cc:	780b      	ldrb	r3, [r1, #0]
 80043ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d6:	e765      	b.n	80042a4 <_printf_i+0x104>
 80043d8:	08004dd7 	.word	0x08004dd7
 80043dc:	08004dc6 	.word	0x08004dc6

080043e0 <memcpy>:
 80043e0:	b510      	push	{r4, lr}
 80043e2:	1e43      	subs	r3, r0, #1
 80043e4:	440a      	add	r2, r1
 80043e6:	4291      	cmp	r1, r2
 80043e8:	d100      	bne.n	80043ec <memcpy+0xc>
 80043ea:	bd10      	pop	{r4, pc}
 80043ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f4:	e7f7      	b.n	80043e6 <memcpy+0x6>

080043f6 <memmove>:
 80043f6:	4288      	cmp	r0, r1
 80043f8:	b510      	push	{r4, lr}
 80043fa:	eb01 0302 	add.w	r3, r1, r2
 80043fe:	d803      	bhi.n	8004408 <memmove+0x12>
 8004400:	1e42      	subs	r2, r0, #1
 8004402:	4299      	cmp	r1, r3
 8004404:	d10c      	bne.n	8004420 <memmove+0x2a>
 8004406:	bd10      	pop	{r4, pc}
 8004408:	4298      	cmp	r0, r3
 800440a:	d2f9      	bcs.n	8004400 <memmove+0xa>
 800440c:	1881      	adds	r1, r0, r2
 800440e:	1ad2      	subs	r2, r2, r3
 8004410:	42d3      	cmn	r3, r2
 8004412:	d100      	bne.n	8004416 <memmove+0x20>
 8004414:	bd10      	pop	{r4, pc}
 8004416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800441a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800441e:	e7f7      	b.n	8004410 <memmove+0x1a>
 8004420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004424:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004428:	e7eb      	b.n	8004402 <memmove+0xc>
	...

0800442c <_free_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4605      	mov	r5, r0
 8004430:	2900      	cmp	r1, #0
 8004432:	d045      	beq.n	80044c0 <_free_r+0x94>
 8004434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004438:	1f0c      	subs	r4, r1, #4
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfb8      	it	lt
 800443e:	18e4      	addlt	r4, r4, r3
 8004440:	f000 f8d6 	bl	80045f0 <__malloc_lock>
 8004444:	4a1f      	ldr	r2, [pc, #124]	; (80044c4 <_free_r+0x98>)
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	4610      	mov	r0, r2
 800444a:	b933      	cbnz	r3, 800445a <_free_r+0x2e>
 800444c:	6063      	str	r3, [r4, #4]
 800444e:	6014      	str	r4, [r2, #0]
 8004450:	4628      	mov	r0, r5
 8004452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004456:	f000 b8cc 	b.w	80045f2 <__malloc_unlock>
 800445a:	42a3      	cmp	r3, r4
 800445c:	d90c      	bls.n	8004478 <_free_r+0x4c>
 800445e:	6821      	ldr	r1, [r4, #0]
 8004460:	1862      	adds	r2, r4, r1
 8004462:	4293      	cmp	r3, r2
 8004464:	bf04      	itt	eq
 8004466:	681a      	ldreq	r2, [r3, #0]
 8004468:	685b      	ldreq	r3, [r3, #4]
 800446a:	6063      	str	r3, [r4, #4]
 800446c:	bf04      	itt	eq
 800446e:	1852      	addeq	r2, r2, r1
 8004470:	6022      	streq	r2, [r4, #0]
 8004472:	6004      	str	r4, [r0, #0]
 8004474:	e7ec      	b.n	8004450 <_free_r+0x24>
 8004476:	4613      	mov	r3, r2
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	b10a      	cbz	r2, 8004480 <_free_r+0x54>
 800447c:	42a2      	cmp	r2, r4
 800447e:	d9fa      	bls.n	8004476 <_free_r+0x4a>
 8004480:	6819      	ldr	r1, [r3, #0]
 8004482:	1858      	adds	r0, r3, r1
 8004484:	42a0      	cmp	r0, r4
 8004486:	d10b      	bne.n	80044a0 <_free_r+0x74>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	4401      	add	r1, r0
 800448c:	1858      	adds	r0, r3, r1
 800448e:	4282      	cmp	r2, r0
 8004490:	6019      	str	r1, [r3, #0]
 8004492:	d1dd      	bne.n	8004450 <_free_r+0x24>
 8004494:	6810      	ldr	r0, [r2, #0]
 8004496:	6852      	ldr	r2, [r2, #4]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	4401      	add	r1, r0
 800449c:	6019      	str	r1, [r3, #0]
 800449e:	e7d7      	b.n	8004450 <_free_r+0x24>
 80044a0:	d902      	bls.n	80044a8 <_free_r+0x7c>
 80044a2:	230c      	movs	r3, #12
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	e7d3      	b.n	8004450 <_free_r+0x24>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	1821      	adds	r1, r4, r0
 80044ac:	428a      	cmp	r2, r1
 80044ae:	bf04      	itt	eq
 80044b0:	6811      	ldreq	r1, [r2, #0]
 80044b2:	6852      	ldreq	r2, [r2, #4]
 80044b4:	6062      	str	r2, [r4, #4]
 80044b6:	bf04      	itt	eq
 80044b8:	1809      	addeq	r1, r1, r0
 80044ba:	6021      	streq	r1, [r4, #0]
 80044bc:	605c      	str	r4, [r3, #4]
 80044be:	e7c7      	b.n	8004450 <_free_r+0x24>
 80044c0:	bd38      	pop	{r3, r4, r5, pc}
 80044c2:	bf00      	nop
 80044c4:	200001bc 	.word	0x200001bc

080044c8 <_malloc_r>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	1ccd      	adds	r5, r1, #3
 80044cc:	f025 0503 	bic.w	r5, r5, #3
 80044d0:	3508      	adds	r5, #8
 80044d2:	2d0c      	cmp	r5, #12
 80044d4:	bf38      	it	cc
 80044d6:	250c      	movcc	r5, #12
 80044d8:	2d00      	cmp	r5, #0
 80044da:	4606      	mov	r6, r0
 80044dc:	db01      	blt.n	80044e2 <_malloc_r+0x1a>
 80044de:	42a9      	cmp	r1, r5
 80044e0:	d903      	bls.n	80044ea <_malloc_r+0x22>
 80044e2:	230c      	movs	r3, #12
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	2000      	movs	r0, #0
 80044e8:	bd70      	pop	{r4, r5, r6, pc}
 80044ea:	f000 f881 	bl	80045f0 <__malloc_lock>
 80044ee:	4a23      	ldr	r2, [pc, #140]	; (800457c <_malloc_r+0xb4>)
 80044f0:	6814      	ldr	r4, [r2, #0]
 80044f2:	4621      	mov	r1, r4
 80044f4:	b991      	cbnz	r1, 800451c <_malloc_r+0x54>
 80044f6:	4c22      	ldr	r4, [pc, #136]	; (8004580 <_malloc_r+0xb8>)
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	b91b      	cbnz	r3, 8004504 <_malloc_r+0x3c>
 80044fc:	4630      	mov	r0, r6
 80044fe:	f000 f867 	bl	80045d0 <_sbrk_r>
 8004502:	6020      	str	r0, [r4, #0]
 8004504:	4629      	mov	r1, r5
 8004506:	4630      	mov	r0, r6
 8004508:	f000 f862 	bl	80045d0 <_sbrk_r>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d126      	bne.n	800455e <_malloc_r+0x96>
 8004510:	230c      	movs	r3, #12
 8004512:	6033      	str	r3, [r6, #0]
 8004514:	4630      	mov	r0, r6
 8004516:	f000 f86c 	bl	80045f2 <__malloc_unlock>
 800451a:	e7e4      	b.n	80044e6 <_malloc_r+0x1e>
 800451c:	680b      	ldr	r3, [r1, #0]
 800451e:	1b5b      	subs	r3, r3, r5
 8004520:	d41a      	bmi.n	8004558 <_malloc_r+0x90>
 8004522:	2b0b      	cmp	r3, #11
 8004524:	d90f      	bls.n	8004546 <_malloc_r+0x7e>
 8004526:	600b      	str	r3, [r1, #0]
 8004528:	50cd      	str	r5, [r1, r3]
 800452a:	18cc      	adds	r4, r1, r3
 800452c:	4630      	mov	r0, r6
 800452e:	f000 f860 	bl	80045f2 <__malloc_unlock>
 8004532:	f104 000b 	add.w	r0, r4, #11
 8004536:	1d23      	adds	r3, r4, #4
 8004538:	f020 0007 	bic.w	r0, r0, #7
 800453c:	1ac3      	subs	r3, r0, r3
 800453e:	d01b      	beq.n	8004578 <_malloc_r+0xb0>
 8004540:	425a      	negs	r2, r3
 8004542:	50e2      	str	r2, [r4, r3]
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	428c      	cmp	r4, r1
 8004548:	bf0d      	iteet	eq
 800454a:	6863      	ldreq	r3, [r4, #4]
 800454c:	684b      	ldrne	r3, [r1, #4]
 800454e:	6063      	strne	r3, [r4, #4]
 8004550:	6013      	streq	r3, [r2, #0]
 8004552:	bf18      	it	ne
 8004554:	460c      	movne	r4, r1
 8004556:	e7e9      	b.n	800452c <_malloc_r+0x64>
 8004558:	460c      	mov	r4, r1
 800455a:	6849      	ldr	r1, [r1, #4]
 800455c:	e7ca      	b.n	80044f4 <_malloc_r+0x2c>
 800455e:	1cc4      	adds	r4, r0, #3
 8004560:	f024 0403 	bic.w	r4, r4, #3
 8004564:	42a0      	cmp	r0, r4
 8004566:	d005      	beq.n	8004574 <_malloc_r+0xac>
 8004568:	1a21      	subs	r1, r4, r0
 800456a:	4630      	mov	r0, r6
 800456c:	f000 f830 	bl	80045d0 <_sbrk_r>
 8004570:	3001      	adds	r0, #1
 8004572:	d0cd      	beq.n	8004510 <_malloc_r+0x48>
 8004574:	6025      	str	r5, [r4, #0]
 8004576:	e7d9      	b.n	800452c <_malloc_r+0x64>
 8004578:	bd70      	pop	{r4, r5, r6, pc}
 800457a:	bf00      	nop
 800457c:	200001bc 	.word	0x200001bc
 8004580:	200001c0 	.word	0x200001c0

08004584 <_realloc_r>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	4607      	mov	r7, r0
 8004588:	4614      	mov	r4, r2
 800458a:	460e      	mov	r6, r1
 800458c:	b921      	cbnz	r1, 8004598 <_realloc_r+0x14>
 800458e:	4611      	mov	r1, r2
 8004590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004594:	f7ff bf98 	b.w	80044c8 <_malloc_r>
 8004598:	b922      	cbnz	r2, 80045a4 <_realloc_r+0x20>
 800459a:	f7ff ff47 	bl	800442c <_free_r>
 800459e:	4625      	mov	r5, r4
 80045a0:	4628      	mov	r0, r5
 80045a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a4:	f000 f826 	bl	80045f4 <_malloc_usable_size_r>
 80045a8:	4284      	cmp	r4, r0
 80045aa:	d90f      	bls.n	80045cc <_realloc_r+0x48>
 80045ac:	4621      	mov	r1, r4
 80045ae:	4638      	mov	r0, r7
 80045b0:	f7ff ff8a 	bl	80044c8 <_malloc_r>
 80045b4:	4605      	mov	r5, r0
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d0f2      	beq.n	80045a0 <_realloc_r+0x1c>
 80045ba:	4631      	mov	r1, r6
 80045bc:	4622      	mov	r2, r4
 80045be:	f7ff ff0f 	bl	80043e0 <memcpy>
 80045c2:	4631      	mov	r1, r6
 80045c4:	4638      	mov	r0, r7
 80045c6:	f7ff ff31 	bl	800442c <_free_r>
 80045ca:	e7e9      	b.n	80045a0 <_realloc_r+0x1c>
 80045cc:	4635      	mov	r5, r6
 80045ce:	e7e7      	b.n	80045a0 <_realloc_r+0x1c>

080045d0 <_sbrk_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4c06      	ldr	r4, [pc, #24]	; (80045ec <_sbrk_r+0x1c>)
 80045d4:	2300      	movs	r3, #0
 80045d6:	4605      	mov	r5, r0
 80045d8:	4608      	mov	r0, r1
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	f7fd fedc 	bl	8002398 <_sbrk>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d102      	bne.n	80045ea <_sbrk_r+0x1a>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	b103      	cbz	r3, 80045ea <_sbrk_r+0x1a>
 80045e8:	602b      	str	r3, [r5, #0]
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	200004ac 	.word	0x200004ac

080045f0 <__malloc_lock>:
 80045f0:	4770      	bx	lr

080045f2 <__malloc_unlock>:
 80045f2:	4770      	bx	lr

080045f4 <_malloc_usable_size_r>:
 80045f4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80045f8:	2800      	cmp	r0, #0
 80045fa:	f1a0 0004 	sub.w	r0, r0, #4
 80045fe:	bfbc      	itt	lt
 8004600:	580b      	ldrlt	r3, [r1, r0]
 8004602:	18c0      	addlt	r0, r0, r3
 8004604:	4770      	bx	lr
	...

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr
